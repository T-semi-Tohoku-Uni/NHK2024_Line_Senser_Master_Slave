
NHK2024_Line_Senser_Master_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003638  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003880  08003880  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003880  08003880  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003880  08003880  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003880  08003880  00013880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003884  08003884  00013884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000074  080038fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  080038fc  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7bb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a54  00000000  00000000  0002a85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d472  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b376  00000000  00000000  0004ab72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b75b6  00000000  00000000  00055ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d49e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  0010d4f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080037f8 	.word	0x080037f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	080037f8 	.word	0x080037f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <moving_average_filter_init>:
#include "filter.h"

NHK2024_Filter_Buffer* moving_average_filter_init(
    double init_val,
    int buf_size
) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a5e:	6078      	str	r0, [r7, #4]
    NHK2024_Filter_Buffer* buf = (NHK2024_Filter_Buffer*)malloc(sizeof(NHK2024_Filter_Buffer));
 8000a60:	2008      	movs	r0, #8
 8000a62:	f002 fe07 	bl	8003674 <malloc>
 8000a66:	4603      	mov	r3, r0
 8000a68:	613b      	str	r3, [r7, #16]
    buf->buf = (double*)malloc(sizeof(double) * buf_size);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f002 fe00 	bl	8003674 <malloc>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	601a      	str	r2, [r3, #0]
    buf->buf_size = buf_size;
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < buf_size; i++) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e00b      	b.n	8000aa0 <moving_average_filter_init+0x4c>
        buf->buf[i] = init_val;
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	18d1      	adds	r1, r2, r3
 8000a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a96:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < buf_size; i++) {
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbef      	blt.n	8000a88 <moving_average_filter_init+0x34>
    }
    return buf;
 8000aa8:	693b      	ldr	r3, [r7, #16]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <moving_average_filter_update>:

double moving_average_filter_update(
    NHK2024_Filter_Buffer* buf,
    double val
) {
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b08a      	sub	sp, #40	; 0x28
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	ed87 0b00 	vstr	d0, [r7]
    for (int i = 0; i < buf->buf_size - 1; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac2:	e011      	b.n	8000ae8 <moving_average_filter_update+0x36>
        buf->buf[i] = buf->buf[i + 1];
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	3301      	adds	r3, #1
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	4413      	add	r3, r2
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	00d2      	lsls	r2, r2, #3
 8000ad8:	4411      	add	r1, r2
 8000ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ade:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < buf->buf_size - 1; i++) {
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000af0:	429a      	cmp	r2, r3
 8000af2:	dbe7      	blt.n	8000ac4 <moving_average_filter_update+0x12>
    }
    buf->buf[buf->buf_size - 1] = val;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b00:	3b01      	subs	r3, #1
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	18d1      	adds	r1, r2, r3
 8000b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b0a:	e9c1 2300 	strd	r2, r3, [r1]

    double sum = 0.0;
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < buf->buf_size; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e011      	b.n	8000b44 <moving_average_filter_update+0x92>
        sum += buf->buf[i];
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b32:	f7ff fb77 	bl	8000224 <__adddf3>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < buf->buf_size; i++) {
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dbe8      	blt.n	8000b20 <moving_average_filter_update+0x6e>
    }
    return sum / buf->buf_size;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fcb2 	bl	80004bc <__aeabi_i2d>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b60:	f7ff fe40 	bl	80007e4 <__aeabi_ddiv>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	ec43 2b17 	vmov	d7, r2, r3
 8000b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8000b70:	eef0 0a67 	vmov.f32	s1, s15
 8000b74:	3728      	adds	r7, #40	; 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <ReadADCCChannel>:
void SendMessageOnCAN(uint32_t Identifier, uint32_t DataLength, uint8_t* TxData);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ReadADCCChannel(NHK2024_Filter_Buffer **bufList, unsigned int* sensorWhiteList, unsigned int* sensorBlackList) {
 8000b7c:	b5b0      	push	{r4, r5, r7, lr}
 8000b7e:	b0ac      	sub	sp, #176	; 0xb0
 8000b80:	af02      	add	r7, sp, #8
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	// センサ0からセンサ7までのNCCのリスト
	uint16_t sensorList[8] = {
 8000b88:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <ReadADCCChannel+0x1f8>)
 8000b8a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Sensor5_Pin,
			Sensor6_Pin,
			Sensor7_Pin,
			Sensor8_Pin
	};
	GPIO_TypeDef* sensorPort[8] = {
 8000b94:	4b78      	ldr	r3, [pc, #480]	; (8000d78 <ReadADCCChannel+0x1fc>)
 8000b96:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b9a:	461d      	mov	r5, r3
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	};

	// センサの値を格納する
	double filterdSensorVal[8];

	for(int pin = 0; pin < 8; pin++ ) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000bae:	e0a2      	b.n	8000cf6 <ReadADCCChannel+0x17a>
		HAL_GPIO_WritePin(sensorPort[pin], sensorList[pin], GPIO_PIN_RESET); // 通信するスレーブを選択する
 8000bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	33a8      	adds	r3, #168	; 0xa8
 8000bb8:	443b      	add	r3, r7
 8000bba:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8000bbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	33a8      	adds	r3, #168	; 0xa8
 8000bc6:	443b      	add	r3, r7
 8000bc8:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f001 f95c 	bl	8001e8c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 2, HAL_MAX_DELAY); // SPI通信
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	2302      	movs	r3, #2
 8000bdc:	4a67      	ldr	r2, [pc, #412]	; (8000d7c <ReadADCCChannel+0x200>)
 8000bde:	4968      	ldr	r1, [pc, #416]	; (8000d80 <ReadADCCChannel+0x204>)
 8000be0:	4868      	ldr	r0, [pc, #416]	; (8000d84 <ReadADCCChannel+0x208>)
 8000be2:	f002 f9a6 	bl	8002f32 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(sensorPort[pin], sensorList[pin], GPIO_PIN_RESET); // スレーブの選択を解除する
 8000be6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	33a8      	adds	r3, #168	; 0xa8
 8000bee:	443b      	add	r3, r7
 8000bf0:	f853 0c48 	ldr.w	r0, [r3, #-72]
 8000bf4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	33a8      	adds	r3, #168	; 0xa8
 8000bfc:	443b      	add	r3, r7
 8000bfe:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000c02:	2200      	movs	r2, #0
 8000c04:	4619      	mov	r1, r3
 8000c06:	f001 f941 	bl	8001e8c <HAL_GPIO_WritePin>

		unsigned int sensorVal = ((rxBuf[0] & 0x03) << 8) + rxBuf[1]; // デジタル値のセンサの値を取得する（10bit）
 8000c0a:	4b5c      	ldr	r3, [pc, #368]	; (8000d7c <ReadADCCChannel+0x200>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000c14:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <ReadADCCChannel+0x200>)
 8000c16:	7852      	ldrb	r2, [r2, #1]
 8000c18:	4413      	add	r3, r2
 8000c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		// 初めに取得した白(3.3V)と黒(0V)の値を使ってセンサの値をスケールする
		double scaledSensorVal;
		if (sensorVal >= sensorWhiteList[pin]) {
 8000c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	4413      	add	r3, r2
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d30d      	bcc.n	8000c4e <ReadADCCChannel+0xd2>
			scaledSensorVal = sensorWhiteList[pin];
 8000c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fc2c 	bl	800049c <__aeabi_ui2d>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8000c4c:	e037      	b.n	8000cbe <ReadADCCChannel+0x142>
		} else if (sensorVal <= sensorBlackList[pin]) {
 8000c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d80d      	bhi.n	8000c7e <ReadADCCChannel+0x102>
			scaledSensorVal = sensorBlackList[pin];
 8000c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc14 	bl	800049c <__aeabi_ui2d>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
 8000c7c:	e01f      	b.n	8000cbe <ReadADCCChannel+0x142>
		} else {
			scaledSensorVal = (sensorVal - sensorBlackList[pin]) * 1024 / (sensorWhiteList[pin] - sensorBlackList[pin]);
 8000c7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	029a      	lsls	r2, r3, #10
 8000c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	4403      	add	r3, r0
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1acb      	subs	r3, r1, r3
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fbf3 	bl	800049c <__aeabi_ui2d>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
		}

		// ローバスフィルタを適応する
		filterdSensorVal[pin] = moving_average_filter_update(bufList[pin], (double) scaledSensorVal);
 8000cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff feef 	bl	8000ab2 <moving_average_filter_update>
 8000cd4:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd8:	eef0 7a60 	vmov.f32	s15, s1
 8000cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	33a8      	adds	r3, #168	; 0xa8
 8000ce4:	443b      	add	r3, r7
 8000ce6:	3b88      	subs	r3, #136	; 0x88
 8000ce8:	ed83 7b00 	vstr	d7, [r3]
	for(int pin = 0; pin < 8; pin++ ) {
 8000cec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	f77f af58 	ble.w	8000bb0 <ReadADCCChannel+0x34>
	 * diff = (右の二つのセンサの値の和) - (左の二つのセンサの値の和)
	 * if diff > 0 then ロボットがラインに対して右にずれている
	 * if diff < 0 then ロボットがラインに対して左にずれている
	 *
	 */
	float horizontalOffset = (filterdSensorVal[2 - 1] + filterdSensorVal[6 - 1]) - (filterdSensorVal[3 - 1] + filterdSensorVal[7 - 1]);
 8000d00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000d08:	f7ff fa8c 	bl	8000224 <__adddf3>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4614      	mov	r4, r2
 8000d12:	461d      	mov	r5, r3
 8000d14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000d1c:	f7ff fa82 	bl	8000224 <__adddf3>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fa7a 	bl	8000220 <__aeabi_dsub>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fe3e 	bl	80009b4 <__aeabi_d2f>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	61fb      	str	r3, [r7, #28]
	/*
	 * 上の4つのセンサと下の四つのセンサを使って水平ラインを検出する
	 * 多分, 8つのセンサのうちそれぞれの側（左右）で一つづつセンサが反応すればOKかな
	 * 後で実装する
	 */
	uint8_t verticalLineDetector = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000d42:	69fb      	ldr	r3, [r7, #28]

	// CAN通信で上位の基盤に送る
	// 横ずれ
	uint8_t horizontalOffsetTxData[4];
	memcpy(horizontalOffsetTxData, &horizontalOffset, sizeof(float));
 8000d44:	61bb      	str	r3, [r7, #24]
	SendMessageOnCAN(0x00, FDCAN_DLC_BYTES_4, horizontalOffsetTxData);
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f819 	bl	8000d88 <SendMessageOnCAN>

	// 水平ライン検出
	uint8_t verticalLineDetectorTxData[1] = { // 意味はないけど, 今後のバグ防止
 8000d56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000d5a:	753b      	strb	r3, [r7, #20]
			verticalLineDetector
	};
	SendMessageOnCAN(0x01, FDCAN_DLC_BYTES_1, verticalLineDetectorTxData);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 f80e 	bl	8000d88 <SendMessageOnCAN>
	return;
 8000d6c:	bf00      	nop
}
 8000d6e:	37a8      	adds	r7, #168	; 0xa8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bdb0      	pop	{r4, r5, r7, pc}
 8000d74:	08003810 	.word	0x08003810
 8000d78:	08003820 	.word	0x08003820
 8000d7c:	20000158 	.word	0x20000158
 8000d80:	20000000 	.word	0x20000000
 8000d84:	200000f4 	.word	0x200000f4

08000d88 <SendMessageOnCAN>:

void SendMessageOnCAN(uint32_t Identifier, uint32_t DataLength, uint8_t TxData[3]) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef TxHeader;
//	HAL_StatusTypeDef HAL_ret;
	TxHeader.Identifier = Identifier;                 // ID
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID;         // 標準ID
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;     // データフレーム
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = DataLength;     // 3バイトデータ
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <SendMessageOnCAN+0x60>)
 8000dc2:	f000 fdcb 	bl	800195c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SendMessageOnCAN+0x48>
			Error_Handler();
 8000dcc:	f000 f9b4 	bl	8001138 <Error_Handler>
	}

	// FDCANメッセージの送信
//	HAL_ret = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <SendMessageOnCAN+0x60>)
 8000dda:	f000 fdbf 	bl	800195c <HAL_FDCAN_AddMessageToTxFifoQ>

	return;
 8000dde:	bf00      	nop
}
 8000de0:	3738      	adds	r7, #56	; 0x38
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000090 	.word	0x20000090
 8000dec:	00000000 	.word	0x00000000

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b098      	sub	sp, #96	; 0x60
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df6:	f000 fb02 	bl	80013fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfa:	f000 f85f 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfe:	f000 f92d 	bl	800105c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e02:	f000 f8ed 	bl	8000fe0 <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8000e06:	f000 f8a5 	bl	8000f54 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /*センサの個体差を吸収するため, 初期値を取得する. 後で実装する*/
  /*白*/
  unsigned int sensorWhiteList[8] = {
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <main+0xc8>)
 8000e0c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000e10:	461d      	mov	r5, r3
 8000e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  1024, // センサ6
		  1024, // センサ7
		  1024  // センサ8
  };
  /*黒*/
  unsigned int sensorBlackList[8] = {
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2220      	movs	r2, #32
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 fc2c 	bl	8003684 <memset>
  };

  /*それぞれのセンサのバッファを初期化*
   *初めに読み取った値で初期化するのが良さそう*/
  NHK2024_Filter_Buffer* bufList[8] = {
		  moving_average_filter_init(0.0, 10), // センサ1
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8000eb0 <main+0xc0>
 8000e32:	f7ff fe0f 	bl	8000a54 <moving_average_filter_init>
 8000e36:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e38:	603b      	str	r3, [r7, #0]
		  moving_average_filter_init(0.0, 10), // センサ2
 8000e3a:	200a      	movs	r0, #10
 8000e3c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8000eb0 <main+0xc0>
 8000e40:	f7ff fe08 	bl	8000a54 <moving_average_filter_init>
 8000e44:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e46:	607b      	str	r3, [r7, #4]
		  moving_average_filter_init(0.0, 10), // センサ3
 8000e48:	200a      	movs	r0, #10
 8000e4a:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8000eb0 <main+0xc0>
 8000e4e:	f7ff fe01 	bl	8000a54 <moving_average_filter_init>
 8000e52:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e54:	60bb      	str	r3, [r7, #8]
		  moving_average_filter_init(0.0, 10), // センサ4
 8000e56:	200a      	movs	r0, #10
 8000e58:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8000eb0 <main+0xc0>
 8000e5c:	f7ff fdfa 	bl	8000a54 <moving_average_filter_init>
 8000e60:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e62:	60fb      	str	r3, [r7, #12]
		  moving_average_filter_init(0.0, 10), // センサ5
 8000e64:	200a      	movs	r0, #10
 8000e66:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8000eb0 <main+0xc0>
 8000e6a:	f7ff fdf3 	bl	8000a54 <moving_average_filter_init>
 8000e6e:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e70:	613b      	str	r3, [r7, #16]
		  moving_average_filter_init(0.0, 10), // センサ6
 8000e72:	200a      	movs	r0, #10
 8000e74:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8000eb0 <main+0xc0>
 8000e78:	f7ff fdec 	bl	8000a54 <moving_average_filter_init>
 8000e7c:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e7e:	617b      	str	r3, [r7, #20]
		  moving_average_filter_init(0.0, 10), // センサ7
 8000e80:	200a      	movs	r0, #10
 8000e82:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000eb0 <main+0xc0>
 8000e86:	f7ff fde5 	bl	8000a54 <moving_average_filter_init>
 8000e8a:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e8c:	61bb      	str	r3, [r7, #24]
		  moving_average_filter_init(0.0, 10)  // センサ8
 8000e8e:	200a      	movs	r0, #10
 8000e90:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000eb0 <main+0xc0>
 8000e94:	f7ff fdde 	bl	8000a54 <moving_average_filter_init>
 8000e98:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8000e9a:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ReadADCCChannel(bufList, sensorWhiteList, sensorBlackList);
 8000e9c:	f107 0220 	add.w	r2, r7, #32
 8000ea0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe68 	bl	8000b7c <ReadADCCChannel>
 8000eac:	e7f6      	b.n	8000e9c <main+0xac>
 8000eae:	bf00      	nop
	...
 8000eb8:	08003840 	.word	0x08003840

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	2238      	movs	r2, #56	; 0x38
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 fbda 	bl	8003684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 ffec 	bl	8001ebc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000efa:	2304      	movs	r3, #4
 8000efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000efe:	2355      	movs	r3, #85	; 0x55
 8000f00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0318 	add.w	r3, r7, #24
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 f876 	bl	8002004 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f1e:	f000 f90b 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2303      	movs	r3, #3
 8000f28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fb7a 	bl	8002634 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f46:	f000 f8f7 	bl	8001138 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	; 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <MX_FDCAN1_Init+0x88>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f84:	2211      	movs	r2, #17
 8000f86:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_FDCAN1_Init+0x84>)
 8000fc6:	f000 fb6f 	bl	80016a8 <HAL_FDCAN_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fd0:	f000 f8b2 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	40006400 	.word	0x40006400

08000fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_SPI1_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_SPI1_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_SPI1_Init+0x74>)
 8000fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SPI1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <MX_SPI1_Init+0x74>)
 8000ffa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_SPI1_Init+0x74>)
 8001002:	2202      	movs	r2, #2
 8001004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SPI1_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI1_Init+0x74>)
 800100e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPI1_Init+0x74>)
 8001016:	2238      	movs	r2, #56	; 0x38
 8001018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0x74>)
 800102e:	2207      	movs	r2, #7
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_SPI1_Init+0x74>)
 8001040:	f001 fecc 	bl	8002ddc <HAL_SPI_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 f875 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000f4 	.word	0x200000f4
 8001058:	40013000 	.word	0x40013000

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_GPIO_Init+0xd4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Sensor8_Pin|Sensor7_Pin|Sensor1_Pin|Sensor6_Pin
 80010a2:	2201      	movs	r2, #1
 80010a4:	217f      	movs	r1, #127	; 0x7f
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f000 feef 	bl	8001e8c <HAL_GPIO_WritePin>
                          |Sensor5_Pin|Sensor4_Pin|Sensor3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sensor2_GPIO_Port, Sensor2_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f000 fee9 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <MX_GPIO_Init+0xd8>)
 80010c2:	f000 fee3 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sensor8_Pin Sensor7_Pin Sensor1_Pin Sensor6_Pin
                           Sensor5_Pin Sensor4_Pin Sensor3_Pin Sensor2_Pin */
  GPIO_InitStruct.Pin = Sensor8_Pin|Sensor7_Pin|Sensor1_Pin|Sensor6_Pin
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	60fb      	str	r3, [r7, #12]
                          |Sensor5_Pin|Sensor4_Pin|Sensor3_Pin|Sensor2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f000 fd52 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f6:	2307      	movs	r3, #7
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f000 fd40 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_GPIO_Init+0xd8>)
 8001122:	f000 fd31 	bl	8001b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	; 0x60
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	; 0x58
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b09a      	sub	sp, #104	; 0x68
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2244      	movs	r2, #68	; 0x44
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa69 	bl	8003684 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_FDCAN_MspInit+0xac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d139      	bne.n	8001230 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80011c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fc15 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011d8:	f7ff ffae 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	4a16      	ldr	r2, [pc, #88]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 80011e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e6:	6593      	str	r3, [r2, #88]	; 0x58
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_FDCAN_MspInit+0xb0>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800120c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800121e:	2309      	movs	r3, #9
 8001220:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122c:	f000 fcac 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3768      	adds	r7, #104	; 0x68
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40006400 	.word	0x40006400
 800123c:	40021000 	.word	0x40021000

08001240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a17      	ldr	r2, [pc, #92]	; (80012bc <HAL_SPI_MspInit+0x7c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d127      	bne.n	80012b2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800126c:	6613      	str	r3, [r2, #96]	; 0x60
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_SPI_MspInit+0x80>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001292:	2338      	movs	r3, #56	; 0x38
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a2:	2305      	movs	r3, #5
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_SPI_MspInit+0x84>)
 80012ae:	f000 fc6b 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40013000 	.word	0x40013000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000400 	.word	0x48000400

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8c6 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f002 f968 	bl	8003620 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20008000 	.word	0x20008000
 800137c:	00000400 	.word	0x00000400
 8001380:	2000015c 	.word	0x2000015c
 8001384:	20000178 	.word	0x20000178

08001388 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d6:	f7ff ffd7 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f002 f927 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff fd07 	bl	8000df0 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   r0, =_estack
 80013e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013f0:	08003888 	.word	0x08003888
  ldr r2, =_sbss
 80013f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013f8:	20000174 	.word	0x20000174

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>

080013fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f91b 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f80e 	bl	8001430 <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e001      	b.n	8001424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001420:	f7ff fe90 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001424:	79fb      	ldrb	r3, [r7, #7]

}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_InitTick+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d022      	beq.n	800148a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_InitTick+0x6c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_InitTick+0x68>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001450:	fbb1 f3f3 	udiv	r3, r1, r3
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f000 f918 	bl	800168e <HAL_SYSTICK_Config>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10f      	bne.n	8001484 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	d809      	bhi.n	800147e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	2200      	movs	r2, #0
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001472:	f000 f8f2 	bl	800165a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_InitTick+0x70>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e007      	b.n	800148e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e004      	b.n	800148e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e001      	b.n	800148e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000000c 	.word	0x2000000c
 800149c:	20000004 	.word	0x20000004
 80014a0:	20000008 	.word	0x20000008

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_IncTick+0x1c>)
 80014b4:	6013      	str	r3, [r2, #0]
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	20000160 	.word	0x20000160
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000160 	.word	0x20000160

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff47 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff5e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffb2 	bl	8001600 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e147      	b.n	800194a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fd5c 	bl	800118c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0210 	bic.w	r2, r2, #16
 80016e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e4:	f7ff fef0 	bl	80014c8 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ea:	e012      	b.n	8001712 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016ec:	f7ff feec 	bl	80014c8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	d90b      	bls.n	8001712 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e11b      	b.n	800194a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b08      	cmp	r3, #8
 800171e:	d0e5      	beq.n	80016ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001730:	f7ff feca 	bl	80014c8 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001736:	e012      	b.n	800175e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001738:	f7ff fec6 	bl	80014c8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b0a      	cmp	r3, #10
 8001744:	d90b      	bls.n	800175e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0f5      	b.n	800194a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e5      	beq.n	8001738 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0202 	orr.w	r2, r2, #2
 800177a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a74      	ldr	r2, [pc, #464]	; (8001954 <HAL_FDCAN_Init+0x2ac>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d103      	bne.n	800178e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001786:	4a74      	ldr	r2, [pc, #464]	; (8001958 <HAL_FDCAN_Init+0x2b0>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7c1b      	ldrb	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a4:	619a      	str	r2, [r3, #24]
 80017a6:	e007      	b.n	80017b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7c5b      	ldrb	r3, [r3, #17]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d108      	bne.n	80017d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ce:	619a      	str	r2, [r3, #24]
 80017d0:	e007      	b.n	80017e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7c9b      	ldrb	r3, [r3, #18]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699a      	ldr	r2, [r3, #24]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017f8:	619a      	str	r2, [r3, #24]
 80017fa:	e007      	b.n	800180c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800180a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001830:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0210 	bic.w	r2, r2, #16
 8001840:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0204 	orr.w	r2, r2, #4
 8001858:	619a      	str	r2, [r3, #24]
 800185a:	e02c      	b.n	80018b6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d028      	beq.n	80018b6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d01c      	beq.n	80018a6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0210 	orr.w	r2, r2, #16
 800188a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d110      	bne.n	80018b6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0220 	orr.w	r2, r2, #32
 80018a2:	619a      	str	r2, [r3, #24]
 80018a4:	e007      	b.n	80018b6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699a      	ldr	r2, [r3, #24]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f042 0220 	orr.w	r2, r2, #32
 80018b4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018c6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80018ce:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018de:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018e0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018ea:	d115      	bne.n	8001918 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	3b01      	subs	r3, #1
 80018f8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80018fa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	3b01      	subs	r3, #1
 8001902:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001904:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	3b01      	subs	r3, #1
 800190e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001914:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001916:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f858 	bl	80019e4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40006400 	.word	0x40006400
 8001958:	40006500 	.word	0x40006500

0800195c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d12c      	bne.n	80019ce <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e023      	b.n	80019dc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f870 	bl	8001a90 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	fa01 f202 	lsl.w	r2, r1, r2
 80019bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019c0:	2201      	movs	r2, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	409a      	lsls	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e006      	b.n	80019dc <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d2:	f043 0208 	orr.w	r2, r3, #8
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
  }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80019ee:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	041a      	lsls	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a24:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	061a      	lsls	r2, r3, #24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e005      	b.n	8001a72 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3f3      	bcc.n	8001a66 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	4000a400 	.word	0x4000a400

08001a90 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b089      	sub	sp, #36	; 0x24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10a      	bne.n	8001abc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001aae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	e00a      	b.n	8001ad2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ac4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001aca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001acc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ad0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001adc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001ae2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001ae8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e020      	b.n	8001b64 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3303      	adds	r3, #3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3302      	adds	r3, #2
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	440b      	add	r3, r1
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b3a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	440b      	add	r3, r1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001b48:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	440a      	add	r2, r1
 8001b50:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001b52:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <FDCAN_CopyMessageToRAM+0xf4>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d3d5      	bcc.n	8001b22 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3724      	adds	r7, #36	; 0x24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	08003870 	.word	0x08003870

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b96:	e15a      	b.n	8001e4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 814c 	beq.w	8001e48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d005      	beq.n	8001bc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d130      	bne.n	8001c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0201 	and.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d017      	beq.n	8001c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d123      	bne.n	8001cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	08da      	lsrs	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3208      	adds	r2, #8
 8001c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	6939      	ldr	r1, [r7, #16]
 8001cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0203 	and.w	r2, r3, #3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80a6 	beq.w	8001e48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfc:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_GPIO_Init+0x2e4>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	4a5a      	ldr	r2, [pc, #360]	; (8001e6c <HAL_GPIO_Init+0x2e4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6613      	str	r3, [r2, #96]	; 0x60
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_GPIO_Init+0x2e4>)
 8001d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d14:	4a56      	ldr	r2, [pc, #344]	; (8001e70 <HAL_GPIO_Init+0x2e8>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d3e:	d01f      	beq.n	8001d80 <HAL_GPIO_Init+0x1f8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a4c      	ldr	r2, [pc, #304]	; (8001e74 <HAL_GPIO_Init+0x2ec>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d019      	beq.n	8001d7c <HAL_GPIO_Init+0x1f4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a4b      	ldr	r2, [pc, #300]	; (8001e78 <HAL_GPIO_Init+0x2f0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d013      	beq.n	8001d78 <HAL_GPIO_Init+0x1f0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a4a      	ldr	r2, [pc, #296]	; (8001e7c <HAL_GPIO_Init+0x2f4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1ec>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_GPIO_Init+0x2f8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1e8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a48      	ldr	r2, [pc, #288]	; (8001e84 <HAL_GPIO_Init+0x2fc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1e4>
 8001d68:	2305      	movs	r3, #5
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x1fa>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d92:	4937      	ldr	r1, [pc, #220]	; (8001e70 <HAL_GPIO_Init+0x2e8>)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3302      	adds	r3, #2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dc4:	4a30      	ldr	r2, [pc, #192]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dee:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001df4:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e42:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f ae9d 	bne.w	8001b98 <HAL_GPIO_Init+0x10>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	48000400 	.word	0x48000400
 8001e78:	48000800 	.word	0x48000800
 8001e7c:	48000c00 	.word	0x48000c00
 8001e80:	48001000 	.word	0x48001000
 8001e84:	48001400 	.word	0x48001400
 8001e88:	40010400 	.word	0x40010400

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d141      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d131      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef0:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2232      	movs	r2, #50	; 0x32
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	e002      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d102      	bne.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f2      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d158      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e057      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f42:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f4c:	e04d      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d141      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d131      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	e002      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f2      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d112      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e011      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fd8:	e007      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	20000004 	.word	0x20000004
 8002000:	431bde83 	.word	0x431bde83

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e306      	b.n	8002624 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d075      	beq.n	800210e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b97      	ldr	r3, [pc, #604]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202c:	4b94      	ldr	r3, [pc, #592]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x3e>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d002      	beq.n	8002048 <HAL_RCC_OscConfig+0x44>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05b      	beq.n	800210c <HAL_RCC_OscConfig+0x108>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d157      	bne.n	800210c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2e1      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x74>
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a84      	ldr	r2, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a77      	ldr	r2, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a74      	ldr	r2, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fa04 	bl	80014c8 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fa00 	bl	80014c8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e2a6      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xc0>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f9f0 	bl	80014c8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f9ec 	bl	80014c8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e292      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	4b60      	ldr	r3, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0xe8>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x136>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d002      	beq.n	8002140 <HAL_RCC_OscConfig+0x13c>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d11f      	bne.n	8002180 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x154>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e265      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4946      	ldr	r1, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_RCC_OscConfig+0x280>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f95d 	bl	8001430 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d043      	beq.n	8002204 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e251      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f998 	bl	80014c8 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f994 	bl	80014c8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e23a      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e01a      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f974 	bl	80014c8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7ff f970 	bl	80014c8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e216      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1e0>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d041      	beq.n	8002296 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f94d 	bl	80014c8 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f949 	bl	80014c8 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1ef      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0x22e>
 8002252:	e020      	b.n	8002296 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f930 	bl	80014c8 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226a:	e00d      	b.n	8002288 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff f92c 	bl	80014c8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d906      	bls.n	8002288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1d2      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ea      	bne.n	800226c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a6 	beq.w	80023f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2b4>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x2b6>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7ff f8e9 	bl	80014c8 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7ff f8e5 	bl	80014c8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e18b      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_RCC_OscConfig+0x32e>
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a65      	ldr	r2, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e024      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d110      	bne.n	800235c <HAL_RCC_OscConfig+0x358>
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff f8a0 	bl	80014c8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7ff f89c 	bl	80014c8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e140      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ed      	beq.n	800238c <HAL_RCC_OscConfig+0x388>
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7ff f889 	bl	80014c8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f885 	bl	80014c8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e129      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ed      	bne.n	80023ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01c      	beq.n	800243e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7ff f858 	bl	80014c8 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241c:	f7ff f854 	bl	80014c8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0fa      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCC_OscConfig+0x418>
 800243c:	e01b      	b.n	8002476 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff f83b 	bl	80014c8 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002456:	f7ff f837 	bl	80014c8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0dd      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80d1 	beq.w	8002622 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b0c      	cmp	r3, #12
 800248a:	f000 808b 	beq.w	80025a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d15e      	bne.n	8002554 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7ff f811 	bl	80014c8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a8:	e00c      	b.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7ff f80d 	bl	80014c8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d905      	bls.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0b3      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_OscConfig+0x628>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ec      	bne.n	80024aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <HAL_RCC_OscConfig+0x628>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b56      	ldr	r3, [pc, #344]	; (8002630 <HAL_RCC_OscConfig+0x62c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6a11      	ldr	r1, [r2, #32]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024ea:	0212      	lsls	r2, r2, #8
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0552      	lsls	r2, r2, #21
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fe:	0852      	lsrs	r2, r2, #1
 8002500:	3a01      	subs	r2, #1
 8002502:	0652      	lsls	r2, r2, #25
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800250a:	06d2      	lsls	r2, r2, #27
 800250c:	430a      	orrs	r2, r1
 800250e:	4947      	ldr	r1, [pc, #284]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002510:	4313      	orrs	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b45      	ldr	r3, [pc, #276]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a44      	ldr	r2, [pc, #272]	; (800262c <HAL_RCC_OscConfig+0x628>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b42      	ldr	r3, [pc, #264]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a41      	ldr	r2, [pc, #260]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe ffcc 	bl	80014c8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe ffc8 	bl	80014c8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e06e      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x530>
 8002552:	e066      	b.n	8002622 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a34      	ldr	r2, [pc, #208]	; (800262c <HAL_RCC_OscConfig+0x628>)
 800255a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a31      	ldr	r2, [pc, #196]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCC_OscConfig+0x628>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a2e      	ldr	r2, [pc, #184]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002572:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe ffa4 	bl	80014c8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe ffa0 	bl	80014c8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e046      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002596:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_OscConfig+0x628>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x580>
 80025a2:	e03e      	b.n	8002622 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e039      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_RCC_OscConfig+0x628>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d12c      	bne.n	800261e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	3b01      	subs	r3, #1
 80025d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d123      	bne.n	800261e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11b      	bne.n	800261e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d113      	bne.n	800261e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002606:	429a      	cmp	r2, r3
 8002608:	d109      	bne.n	800261e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	019f800c 	.word	0x019f800c

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e11e      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b91      	ldr	r3, [pc, #580]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d910      	bls.n	800267c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b8e      	ldr	r3, [pc, #568]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	498c      	ldr	r1, [pc, #560]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b8a      	ldr	r3, [pc, #552]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e106      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d073      	beq.n	8002770 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d129      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002690:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e0f4      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026a0:	f000 f966 	bl	8002970 <RCC_GetSysClockFreqFromPLLSource>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4a7c      	ldr	r2, [pc, #496]	; (800289c <HAL_RCC_ClockConfig+0x268>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d93f      	bls.n	800272e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d033      	beq.n	800272e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12f      	bne.n	800272e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ce:	4b72      	ldr	r3, [pc, #456]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d6:	4a70      	ldr	r2, [pc, #448]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80026d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e024      	b.n	800272e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ec:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0c6      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0be      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800270c:	f000 f8ce 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a61      	ldr	r2, [pc, #388]	; (800289c <HAL_RCC_ClockConfig+0x268>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d909      	bls.n	800272e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002722:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4957      	ldr	r1, [pc, #348]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fec2 	bl	80014c8 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe febe 	bl	80014c8 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e095      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d023      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b43      	ldr	r3, [pc, #268]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a42      	ldr	r2, [pc, #264]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800278e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002792:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027a8:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4936      	ldr	r1, [pc, #216]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d105      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4a32      	ldr	r2, [pc, #200]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 80027d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d21d      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 020f 	bic.w	r2, r3, #15
 80027ec:	4929      	ldr	r1, [pc, #164]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fe68 	bl	80014c8 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe fe64 	bl	80014c8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e03b      	b.n	800288a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCC_ClockConfig+0x260>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d1ed      	bne.n	80027fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4917      	ldr	r1, [pc, #92]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490f      	ldr	r1, [pc, #60]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285e:	f000 f825 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_RCC_ClockConfig+0x264>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490c      	ldr	r1, [pc, #48]	; (80028a0 <HAL_RCC_ClockConfig+0x26c>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x270>)
 800287c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe fdd4 	bl	8001430 <HAL_InitTick>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	04c4b400 	.word	0x04c4b400
 80028a0:	08003860 	.word	0x08003860
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d102      	bne.n	80028c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e047      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d102      	bne.n	80028d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e03e      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d136      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3301      	adds	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002900:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	68d2      	ldr	r2, [r2, #12]
 800290c:	0a12      	lsrs	r2, r2, #8
 800290e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
      break;
 8002918:	e00c      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800291a:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0xbc>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4a10      	ldr	r2, [pc, #64]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002924:	68d2      	ldr	r2, [r2, #12]
 8002926:	0a12      	lsrs	r2, r2, #8
 8002928:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
      break;
 8002932:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0e5b      	lsrs	r3, r3, #25
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	3301      	adds	r3, #1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	e001      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002954:	693b      	ldr	r3, [r7, #16]
}
 8002956:	4618      	mov	r0, r3
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	00f42400 	.word	0x00f42400
 800296c:	007a1200 	.word	0x007a1200

08002970 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002976:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d10c      	bne.n	80029ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800299e:	68d2      	ldr	r2, [r2, #12]
 80029a0:	0a12      	lsrs	r2, r2, #8
 80029a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
    break;
 80029ac:	e00c      	b.n	80029c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	0a12      	lsrs	r2, r2, #8
 80029bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    break;
 80029c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029c8:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0e5b      	lsrs	r3, r3, #25
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029e2:	687b      	ldr	r3, [r7, #4]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	007a1200 	.word	0x007a1200
 80029f8:	00f42400 	.word	0x00f42400

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a04:	2300      	movs	r3, #0
 8002a06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8098 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a34:	6593      	str	r3, [r2, #88]	; 0x58
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a42:	2301      	movs	r3, #1
 8002a44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a39      	ldr	r2, [pc, #228]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fd39 	bl	80014c8 <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a58:	e009      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5a:	f7fe fd35 	bl	80014c8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d902      	bls.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6c:	e005      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0ef      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d159      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a80:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01e      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d019      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fcf5 	bl	80014c8 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae0:	e00b      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fcf1 	bl	80014c8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	74fb      	strb	r3, [r7, #19]
            break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b24:	e008      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
 8002b2a:	e005      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b38:	7c7b      	ldrb	r3, [r7, #17]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4ba6      	ldr	r3, [pc, #664]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4aa5      	ldr	r2, [pc, #660]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b56:	4ba0      	ldr	r3, [pc, #640]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 0203 	bic.w	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	499c      	ldr	r1, [pc, #624]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b78:	4b97      	ldr	r3, [pc, #604]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 020c 	bic.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4994      	ldr	r1, [pc, #592]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b9a:	4b8f      	ldr	r3, [pc, #572]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	498b      	ldr	r1, [pc, #556]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bbc:	4b86      	ldr	r3, [pc, #536]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	4983      	ldr	r1, [pc, #524]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bde:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	497a      	ldr	r1, [pc, #488]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c00:	4b75      	ldr	r3, [pc, #468]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	4972      	ldr	r1, [pc, #456]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c22:	4b6d      	ldr	r3, [pc, #436]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4969      	ldr	r1, [pc, #420]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c44:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	4961      	ldr	r1, [pc, #388]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b5c      	ldr	r3, [pc, #368]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	4958      	ldr	r1, [pc, #352]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c88:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	4950      	ldr	r1, [pc, #320]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cc0:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4942      	ldr	r1, [pc, #264]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cf8:	4b37      	ldr	r3, [pc, #220]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4934      	ldr	r1, [pc, #208]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d18:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a2e      	ldr	r2, [pc, #184]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d30:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3e:	4926      	ldr	r1, [pc, #152]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e09d      	b.n	8002f2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfe:	d009      	beq.n	8002e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
 8002e06:	e005      	b.n	8002e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fe fa06 	bl	8001240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e54:	d902      	bls.n	8002e5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	e002      	b.n	8002e62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002e6a:	d007      	beq.n	8002e7c <HAL_SPI_Init+0xa0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	0c1b      	lsrs	r3, r3, #16
 8002ed8:	f003 0204 	and.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ef8:	ea42 0103 	orr.w	r1, r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08a      	sub	sp, #40	; 0x28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f40:	2301      	movs	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_SPI_TransmitReceive+0x26>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e1fb      	b.n	8003350 <HAL_SPI_TransmitReceive+0x41e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f60:	f7fe fab2 	bl	80014c8 <HAL_GetTick>
 8002f64:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f6c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002f78:	887b      	ldrh	r3, [r7, #2]
 8002f7a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f7c:	7efb      	ldrb	r3, [r7, #27]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d00e      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x6e>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f88:	d106      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_TransmitReceive+0x66>
 8002f92:	7efb      	ldrb	r3, [r7, #27]
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d003      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002f9e:	e1cd      	b.n	800333c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x80>
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fb8:	e1c0      	b.n	800333c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d003      	beq.n	8002fce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2205      	movs	r2, #5
 8002fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003010:	d802      	bhi.n	8003018 <HAL_SPI_TransmitReceive+0xe6>
 8003012:	8a3b      	ldrh	r3, [r7, #16]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d908      	bls.n	800302a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e007      	b.n	800303a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d007      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003060:	d97c      	bls.n	800315c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x13e>
 800306a:	8a7b      	ldrh	r3, [r7, #18]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d169      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003094:	e056      	b.n	8003144 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d11b      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x1aa>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_SPI_TransmitReceive+0x1aa>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d113      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	881a      	ldrh	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	1c9a      	adds	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d11c      	bne.n	8003124 <HAL_SPI_TransmitReceive+0x1f2>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	b292      	uxth	r2, r2
 8003102:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003120:	2301      	movs	r3, #1
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003124:	f7fe f9d0 	bl	80014c8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003130:	429a      	cmp	r2, r3
 8003132:	d807      	bhi.n	8003144 <HAL_SPI_TransmitReceive+0x212>
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313a:	d003      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003142:	e0fb      	b.n	800333c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1a3      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x164>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d19d      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x164>
 800315a:	e0df      	b.n	800331c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_SPI_TransmitReceive+0x23a>
 8003164:	8a7b      	ldrh	r3, [r7, #18]
 8003166:	2b01      	cmp	r3, #1
 8003168:	f040 80cb 	bne.w	8003302 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d912      	bls.n	800319c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	881a      	ldrh	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	1c9a      	adds	r2, r3, #2
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b02      	subs	r3, #2
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800319a:	e0b2      	b.n	8003302 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	330c      	adds	r3, #12
 80031a6:	7812      	ldrb	r2, [r2, #0]
 80031a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031c2:	e09e      	b.n	8003302 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d134      	bne.n	800323c <HAL_SPI_TransmitReceive+0x30a>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02f      	beq.n	800323c <HAL_SPI_TransmitReceive+0x30a>
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d12c      	bne.n	800323c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d912      	bls.n	8003212 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b02      	subs	r3, #2
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003210:	e012      	b.n	8003238 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d148      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x3aa>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d042      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d923      	bls.n	80032aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	b292      	uxth	r2, r2
 800326e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b02      	subs	r3, #2
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d81f      	bhi.n	80032d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	e016      	b.n	80032d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f103 020c 	add.w	r2, r3, #12
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032dc:	f7fe f8f4 	bl	80014c8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d803      	bhi.n	80032f4 <HAL_SPI_TransmitReceive+0x3c2>
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x3c8>
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d103      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003300:	e01c      	b.n	800333c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af5b 	bne.w	80031c4 <HAL_SPI_TransmitReceive+0x292>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	f47f af54 	bne.w	80031c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f937 	bl	8003594 <SPI_EndRxTxTransaction>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	661a      	str	r2, [r3, #96]	; 0x60
 8003338:	e000      	b.n	800333c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800333a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800334c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003350:	4618      	mov	r0, r3
 8003352:	3728      	adds	r7, #40	; 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003368:	f7fe f8ae 	bl	80014c8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	4413      	add	r3, r2
 8003376:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003378:	f7fe f8a6 	bl	80014c8 <HAL_GetTick>
 800337c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800337e:	4b39      	ldr	r3, [pc, #228]	; (8003464 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	015b      	lsls	r3, r3, #5
 8003384:	0d1b      	lsrs	r3, r3, #20
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	fb02 f303 	mul.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800338e:	e054      	b.n	800343a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003396:	d050      	beq.n	800343a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003398:	f7fe f896 	bl	80014c8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d902      	bls.n	80033ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d13d      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c6:	d111      	bne.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d0:	d004      	beq.n	80033dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033da:	d107      	bne.n	80033ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f4:	d10f      	bne.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e017      	b.n	800345a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	3b01      	subs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	429a      	cmp	r2, r3
 8003456:	d19b      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000004 	.word	0x20000004

08003468 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800347a:	f7fe f825 	bl	80014c8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800348a:	f7fe f81d 	bl	80014c8 <HAL_GetTick>
 800348e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00da      	lsls	r2, r3, #3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	0d1b      	lsrs	r3, r3, #20
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034b0:	e060      	b.n	8003574 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034b8:	d107      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d0:	d050      	beq.n	8003574 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d2:	f7fd fff9 	bl	80014c8 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	429a      	cmp	r2, r3
 80034e0:	d902      	bls.n	80034e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d13d      	bne.n	8003564 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003500:	d111      	bne.n	8003526 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350a:	d004      	beq.n	8003516 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	d107      	bne.n	8003526 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003524:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	d10f      	bne.n	8003550 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800354e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e010      	b.n	8003586 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	3b01      	subs	r3, #1
 8003572:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d196      	bne.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3728      	adds	r7, #40	; 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000004 	.word	0x20000004

08003594 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ff5b 	bl	8003468 <SPI_WaitFifoStateUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e027      	b.n	8003618 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fec0 	bl	8003358 <SPI_WaitFlagStateUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e014      	b.n	8003618 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff ff34 	bl	8003468 <SPI_WaitFifoStateUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e000      	b.n	8003618 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <__errno>:
 8003620:	4b01      	ldr	r3, [pc, #4]	; (8003628 <__errno+0x8>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000010 	.word	0x20000010

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4d0d      	ldr	r5, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2600      	movs	r6, #0
 8003638:	42a6      	cmp	r6, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4d0b      	ldr	r5, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 f8da 	bl	80037f8 <_init>
 8003644:	1b64      	subs	r4, r4, r5
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2600      	movs	r6, #0
 800364a:	42a6      	cmp	r6, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f855 3b04 	ldr.w	r3, [r5], #4
 8003654:	4798      	blx	r3
 8003656:	3601      	adds	r6, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f855 3b04 	ldr.w	r3, [r5], #4
 800365e:	4798      	blx	r3
 8003660:	3601      	adds	r6, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	08003880 	.word	0x08003880
 8003668:	08003880 	.word	0x08003880
 800366c:	08003880 	.word	0x08003880
 8003670:	08003884 	.word	0x08003884

08003674 <malloc>:
 8003674:	4b02      	ldr	r3, [pc, #8]	; (8003680 <malloc+0xc>)
 8003676:	4601      	mov	r1, r0
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	f000 b82b 	b.w	80036d4 <_malloc_r>
 800367e:	bf00      	nop
 8003680:	20000010 	.word	0x20000010

08003684 <memset>:
 8003684:	4402      	add	r2, r0
 8003686:	4603      	mov	r3, r0
 8003688:	4293      	cmp	r3, r2
 800368a:	d100      	bne.n	800368e <memset+0xa>
 800368c:	4770      	bx	lr
 800368e:	f803 1b01 	strb.w	r1, [r3], #1
 8003692:	e7f9      	b.n	8003688 <memset+0x4>

08003694 <sbrk_aligned>:
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	4e0e      	ldr	r6, [pc, #56]	; (80036d0 <sbrk_aligned+0x3c>)
 8003698:	460c      	mov	r4, r1
 800369a:	6831      	ldr	r1, [r6, #0]
 800369c:	4605      	mov	r5, r0
 800369e:	b911      	cbnz	r1, 80036a6 <sbrk_aligned+0x12>
 80036a0:	f000 f88c 	bl	80037bc <_sbrk_r>
 80036a4:	6030      	str	r0, [r6, #0]
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 f887 	bl	80037bc <_sbrk_r>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	d00a      	beq.n	80036c8 <sbrk_aligned+0x34>
 80036b2:	1cc4      	adds	r4, r0, #3
 80036b4:	f024 0403 	bic.w	r4, r4, #3
 80036b8:	42a0      	cmp	r0, r4
 80036ba:	d007      	beq.n	80036cc <sbrk_aligned+0x38>
 80036bc:	1a21      	subs	r1, r4, r0
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 f87c 	bl	80037bc <_sbrk_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d101      	bne.n	80036cc <sbrk_aligned+0x38>
 80036c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	20000168 	.word	0x20000168

080036d4 <_malloc_r>:
 80036d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d8:	1ccd      	adds	r5, r1, #3
 80036da:	f025 0503 	bic.w	r5, r5, #3
 80036de:	3508      	adds	r5, #8
 80036e0:	2d0c      	cmp	r5, #12
 80036e2:	bf38      	it	cc
 80036e4:	250c      	movcc	r5, #12
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	4607      	mov	r7, r0
 80036ea:	db01      	blt.n	80036f0 <_malloc_r+0x1c>
 80036ec:	42a9      	cmp	r1, r5
 80036ee:	d905      	bls.n	80036fc <_malloc_r+0x28>
 80036f0:	230c      	movs	r3, #12
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	2600      	movs	r6, #0
 80036f6:	4630      	mov	r0, r6
 80036f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036fc:	4e2e      	ldr	r6, [pc, #184]	; (80037b8 <_malloc_r+0xe4>)
 80036fe:	f000 f86d 	bl	80037dc <__malloc_lock>
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	461c      	mov	r4, r3
 8003706:	bb34      	cbnz	r4, 8003756 <_malloc_r+0x82>
 8003708:	4629      	mov	r1, r5
 800370a:	4638      	mov	r0, r7
 800370c:	f7ff ffc2 	bl	8003694 <sbrk_aligned>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	4604      	mov	r4, r0
 8003714:	d14d      	bne.n	80037b2 <_malloc_r+0xde>
 8003716:	6834      	ldr	r4, [r6, #0]
 8003718:	4626      	mov	r6, r4
 800371a:	2e00      	cmp	r6, #0
 800371c:	d140      	bne.n	80037a0 <_malloc_r+0xcc>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	4631      	mov	r1, r6
 8003722:	4638      	mov	r0, r7
 8003724:	eb04 0803 	add.w	r8, r4, r3
 8003728:	f000 f848 	bl	80037bc <_sbrk_r>
 800372c:	4580      	cmp	r8, r0
 800372e:	d13a      	bne.n	80037a6 <_malloc_r+0xd2>
 8003730:	6821      	ldr	r1, [r4, #0]
 8003732:	3503      	adds	r5, #3
 8003734:	1a6d      	subs	r5, r5, r1
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ffa5 	bl	8003694 <sbrk_aligned>
 800374a:	3001      	adds	r0, #1
 800374c:	d02b      	beq.n	80037a6 <_malloc_r+0xd2>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	442b      	add	r3, r5
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	e00e      	b.n	8003774 <_malloc_r+0xa0>
 8003756:	6822      	ldr	r2, [r4, #0]
 8003758:	1b52      	subs	r2, r2, r5
 800375a:	d41e      	bmi.n	800379a <_malloc_r+0xc6>
 800375c:	2a0b      	cmp	r2, #11
 800375e:	d916      	bls.n	800378e <_malloc_r+0xba>
 8003760:	1961      	adds	r1, r4, r5
 8003762:	42a3      	cmp	r3, r4
 8003764:	6025      	str	r5, [r4, #0]
 8003766:	bf18      	it	ne
 8003768:	6059      	strne	r1, [r3, #4]
 800376a:	6863      	ldr	r3, [r4, #4]
 800376c:	bf08      	it	eq
 800376e:	6031      	streq	r1, [r6, #0]
 8003770:	5162      	str	r2, [r4, r5]
 8003772:	604b      	str	r3, [r1, #4]
 8003774:	4638      	mov	r0, r7
 8003776:	f104 060b 	add.w	r6, r4, #11
 800377a:	f000 f835 	bl	80037e8 <__malloc_unlock>
 800377e:	f026 0607 	bic.w	r6, r6, #7
 8003782:	1d23      	adds	r3, r4, #4
 8003784:	1af2      	subs	r2, r6, r3
 8003786:	d0b6      	beq.n	80036f6 <_malloc_r+0x22>
 8003788:	1b9b      	subs	r3, r3, r6
 800378a:	50a3      	str	r3, [r4, r2]
 800378c:	e7b3      	b.n	80036f6 <_malloc_r+0x22>
 800378e:	6862      	ldr	r2, [r4, #4]
 8003790:	42a3      	cmp	r3, r4
 8003792:	bf0c      	ite	eq
 8003794:	6032      	streq	r2, [r6, #0]
 8003796:	605a      	strne	r2, [r3, #4]
 8003798:	e7ec      	b.n	8003774 <_malloc_r+0xa0>
 800379a:	4623      	mov	r3, r4
 800379c:	6864      	ldr	r4, [r4, #4]
 800379e:	e7b2      	b.n	8003706 <_malloc_r+0x32>
 80037a0:	4634      	mov	r4, r6
 80037a2:	6876      	ldr	r6, [r6, #4]
 80037a4:	e7b9      	b.n	800371a <_malloc_r+0x46>
 80037a6:	230c      	movs	r3, #12
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4638      	mov	r0, r7
 80037ac:	f000 f81c 	bl	80037e8 <__malloc_unlock>
 80037b0:	e7a1      	b.n	80036f6 <_malloc_r+0x22>
 80037b2:	6025      	str	r5, [r4, #0]
 80037b4:	e7de      	b.n	8003774 <_malloc_r+0xa0>
 80037b6:	bf00      	nop
 80037b8:	20000164 	.word	0x20000164

080037bc <_sbrk_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4d06      	ldr	r5, [pc, #24]	; (80037d8 <_sbrk_r+0x1c>)
 80037c0:	2300      	movs	r3, #0
 80037c2:	4604      	mov	r4, r0
 80037c4:	4608      	mov	r0, r1
 80037c6:	602b      	str	r3, [r5, #0]
 80037c8:	f7fd fda8 	bl	800131c <_sbrk>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_sbrk_r+0x1a>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_sbrk_r+0x1a>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	2000016c 	.word	0x2000016c

080037dc <__malloc_lock>:
 80037dc:	4801      	ldr	r0, [pc, #4]	; (80037e4 <__malloc_lock+0x8>)
 80037de:	f000 b809 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 80037e2:	bf00      	nop
 80037e4:	20000170 	.word	0x20000170

080037e8 <__malloc_unlock>:
 80037e8:	4801      	ldr	r0, [pc, #4]	; (80037f0 <__malloc_unlock+0x8>)
 80037ea:	f000 b804 	b.w	80037f6 <__retarget_lock_release_recursive>
 80037ee:	bf00      	nop
 80037f0:	20000170 	.word	0x20000170

080037f4 <__retarget_lock_acquire_recursive>:
 80037f4:	4770      	bx	lr

080037f6 <__retarget_lock_release_recursive>:
 80037f6:	4770      	bx	lr

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
