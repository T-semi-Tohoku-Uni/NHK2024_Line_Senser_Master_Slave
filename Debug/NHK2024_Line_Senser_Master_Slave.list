
NHK2024_Line_Senser_Master_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  080094a8  080094a8  000194a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009958  08009958  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009960  08009960  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08009968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000208  08009b70  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08009b70  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c43  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002328  00000000  00000000  00030ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af4  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ee1d  00000000  00000000  00034b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106a3  00000000  00000000  00053941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff27  00000000  00000000  00063fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000516c  00000000  00000000  00123f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00129078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800948c 	.word	0x0800948c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800948c 	.word	0x0800948c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <moving_average_filter_init>:
#include "filter.h"

NHK2024_Filter_Buffer* moving_average_filter_init(
    double init_val,
    int buf_size
) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0b02 	vstr	d0, [r7, #8]
 800104a:	6078      	str	r0, [r7, #4]
    NHK2024_Filter_Buffer* buf = (NHK2024_Filter_Buffer*)malloc(sizeof(NHK2024_Filter_Buffer));
 800104c:	2008      	movs	r0, #8
 800104e:	f004 f855 	bl	80050fc <malloc>
 8001052:	4603      	mov	r3, r0
 8001054:	613b      	str	r3, [r7, #16]
    buf->buf = (double*)malloc(sizeof(double) * buf_size);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f84e 	bl	80050fc <malloc>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	601a      	str	r2, [r3, #0]
    buf->buf_size = buf_size;
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < buf_size; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e00b      	b.n	800108c <moving_average_filter_init+0x4c>
        buf->buf[i] = init_val;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	18d1      	adds	r1, r2, r3
 800107e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < buf_size; i++) {
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	3301      	adds	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	dbef      	blt.n	8001074 <moving_average_filter_init+0x34>
    }
    return buf;
 8001094:	693b      	ldr	r3, [r7, #16]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <moving_average_filter_update>:

double moving_average_filter_update(
    NHK2024_Filter_Buffer* buf,
    double val
) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b08a      	sub	sp, #40	; 0x28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	60f8      	str	r0, [r7, #12]
 80010a6:	ed87 0b00 	vstr	d0, [r7]
    for (int i = 0; i < buf->buf_size - 1; i++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
 80010ae:	e011      	b.n	80010d4 <moving_average_filter_update+0x36>
        buf->buf[i] = buf->buf[i + 1];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3301      	adds	r3, #1
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	6811      	ldr	r1, [r2, #0]
 80010c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c2:	00d2      	lsls	r2, r2, #3
 80010c4:	4411      	add	r1, r2
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < buf->buf_size - 1; i++) {
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	3301      	adds	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	3b01      	subs	r3, #1
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbe7      	blt.n	80010b0 <moving_average_filter_update+0x12>
    }
    buf->buf[buf->buf_size - 1] = val;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80010ec:	3b01      	subs	r3, #1
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	18d1      	adds	r1, r2, r3
 80010f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]

    double sum = 0.0;
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < buf->buf_size; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e011      	b.n	8001130 <moving_average_filter_update+0x92>
        sum += buf->buf[i];
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800111e:	f7ff f8dd 	bl	80002dc <__adddf3>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < buf->buf_size; i++) {
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	429a      	cmp	r2, r3
 8001138:	dbe8      	blt.n	800110c <moving_average_filter_update+0x6e>
    }
    return sum / buf->buf_size;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa18 	bl	8000574 <__aeabi_i2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800114c:	f7ff fba6 	bl	800089c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	ec43 2b17 	vmov	d7, r2, r3
 8001158:	eeb0 0a47 	vmov.f32	s0, s14
 800115c:	eef0 0a67 	vmov.f32	s1, s15
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <ReadADCCChannel>:
		Sensor6_GPIO_Port,
		Sensor7_GPIO_Port,
		Sensor8_GPIO_Port
	};

void ReadADCCChannel(NHK2024_Filter_Buffer **bufList, unsigned int* sensorWhiteList, unsigned int* sensorBlackList) {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b0a0      	sub	sp, #128	; 0x80
 800116c:	af02      	add	r7, sp, #8
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
	double filterdSensorVal[8];

	for(int pin = 0; pin < 8; pin++ ) {
 8001174:	2300      	movs	r3, #0
 8001176:	677b      	str	r3, [r7, #116]	; 0x74
 8001178:	e093      	b.n	80012a2 <ReadADCCChannel+0x13a>
		HAL_GPIO_WritePin(sensorPort[pin], sensorList[pin], GPIO_PIN_RESET); // 通信するスレーブを選択する
 800117a:	4a69      	ldr	r2, [pc, #420]	; (8001320 <ReadADCCChannel+0x1b8>)
 800117c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800117e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001182:	4a68      	ldr	r2, [pc, #416]	; (8001324 <ReadADCCChannel+0x1bc>)
 8001184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800118a:	2200      	movs	r2, #0
 800118c:	4619      	mov	r1, r3
 800118e:	f001 fa73 	bl	8002678 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, txBuf, rxBuf, 2, HAL_MAX_DELAY); // SPI通信
 8001192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	4a63      	ldr	r2, [pc, #396]	; (8001328 <ReadADCCChannel+0x1c0>)
 800119c:	4963      	ldr	r1, [pc, #396]	; (800132c <ReadADCCChannel+0x1c4>)
 800119e:	4864      	ldr	r0, [pc, #400]	; (8001330 <ReadADCCChannel+0x1c8>)
 80011a0:	f002 faf5 	bl	800378e <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(sensorPort[pin], sensorList[pin], GPIO_PIN_RESET); // スレーブの選択を解除する
 80011a4:	4a5e      	ldr	r2, [pc, #376]	; (8001320 <ReadADCCChannel+0x1b8>)
 80011a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011ac:	4a5d      	ldr	r2, [pc, #372]	; (8001324 <ReadADCCChannel+0x1bc>)
 80011ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f001 fa5e 	bl	8002678 <HAL_GPIO_WritePin>

		unsigned int sensorVal = ((rxBuf[0] & 0x03) << 8) + rxBuf[1]; // デジタル値のセンサの値を取得する（10bit）
 80011bc:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <ReadADCCChannel+0x1c0>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80011c6:	4a58      	ldr	r2, [pc, #352]	; (8001328 <ReadADCCChannel+0x1c0>)
 80011c8:	7852      	ldrb	r2, [r2, #1]
 80011ca:	4413      	add	r3, r2
 80011cc:	663b      	str	r3, [r7, #96]	; 0x60
		// 初めに取得した白(3.3V)と黒(0V)の値を使ってセンサの値をスケールする
		double scaledSensorVal;
		if (sensorVal >= sensorWhiteList[pin]) {
 80011ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011da:	429a      	cmp	r2, r3
 80011dc:	d30c      	bcc.n	80011f8 <ReadADCCChannel+0x90>
			scaledSensorVal = sensorWhiteList[pin];
 80011de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9b3 	bl	8000554 <__aeabi_ui2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80011f6:	e030      	b.n	800125a <ReadADCCChannel+0xf2>
		} else if (sensorVal <= sensorBlackList[pin]) {
 80011f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001204:	429a      	cmp	r2, r3
 8001206:	d80c      	bhi.n	8001222 <ReadADCCChannel+0xba>
			scaledSensorVal = sensorBlackList[pin];
 8001208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f99e 	bl	8000554 <__aeabi_ui2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 8001220:	e01b      	b.n	800125a <ReadADCCChannel+0xf2>
		} else {
			scaledSensorVal = (sensorVal - sensorBlackList[pin]) * 1024 / (sensorWhiteList[pin] - sensorBlackList[pin]);
 8001222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	029a      	lsls	r2, r3, #10
 8001232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	440b      	add	r3, r1
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4403      	add	r3, r0
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	1acb      	subs	r3, r1, r3
 8001248:	fbb2 f3f3 	udiv	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f981 	bl	8000554 <__aeabi_ui2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		}

		// ローバスフィルタを適応する
		filterdSensorVal[pin] = moving_average_filter_update(bufList[pin], (double) scaledSensorVal);
 800125a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ed97 0b1a 	vldr	d0, [r7, #104]	; 0x68
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff18 	bl	800109e <moving_average_filter_update>
 800126e:	eeb0 7a40 	vmov.f32	s14, s0
 8001272:	eef0 7a60 	vmov.f32	s15, s1
 8001276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	3378      	adds	r3, #120	; 0x78
 800127c:	443b      	add	r3, r7
 800127e:	3b58      	subs	r3, #88	; 0x58
 8001280:	ed83 7b00 	vstr	d7, [r3]

		// デバッグ用の出力を書くところ
		printf("original sensor%d: %f", pin+1, filterdSensorVal[pin]);
 8001284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001286:	1c59      	adds	r1, r3, #1
 8001288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	3378      	adds	r3, #120	; 0x78
 800128e:	443b      	add	r3, r7
 8001290:	3b58      	subs	r3, #88	; 0x58
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <ReadADCCChannel+0x1cc>)
 8001298:	f005 fc14 	bl	8006ac4 <iprintf>
	for(int pin = 0; pin < 8; pin++ ) {
 800129c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800129e:	3301      	adds	r3, #1
 80012a0:	677b      	str	r3, [r7, #116]	; 0x74
 80012a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012a4:	2b07      	cmp	r3, #7
 80012a6:	f77f af68 	ble.w	800117a <ReadADCCChannel+0x12>
	 * diff = (右の二つのセンサの値の和) - (左の二つのセンサの値の和)
	 * if diff > 0 then ロボットがラインに対して右にずれている
	 * if diff < 0 then ロボットがラインに対して左にずれている
	 *
	 */
	float horizontalOffset = (filterdSensorVal[2 - 1] + filterdSensorVal[6 - 1]) - (filterdSensorVal[3 - 1] + filterdSensorVal[7 - 1]);
 80012aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012b2:	f7ff f813 	bl	80002dc <__adddf3>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012c6:	f7ff f809 	bl	80002dc <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7ff f801 	bl	80002d8 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fcab 	bl	8000c38 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	61fb      	str	r3, [r7, #28]
	/*
	 * 上の4つのセンサと下の四つのセンサを使って水平ラインを検出する
	 * 多分, 8つのセンサのうちそれぞれの側（左右）で一つづつセンサが反応すればOKかな
	 * 後で実装する
	 */
	uint8_t verticalLineDetector = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80012ec:	69fb      	ldr	r3, [r7, #28]

	// CAN通信で上位の基盤に送る
	// 横ずれ
	uint8_t horizontalOffsetTxData[4];
	memcpy(horizontalOffsetTxData, &horizontalOffset, sizeof(float));
 80012ee:	61bb      	str	r3, [r7, #24]
	SendMessageOnCAN(0x00, FDCAN_DLC_BYTES_4, horizontalOffsetTxData);
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	461a      	mov	r2, r3
 80012f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f81c 	bl	8001338 <SendMessageOnCAN>

	// 水平ライン検出
	uint8_t verticalLineDetectorTxData[1] = { // 意味はないけど, 今後のバグ防止
 8001300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001304:	753b      	strb	r3, [r7, #20]
			verticalLineDetector
	};
	SendMessageOnCAN(0x01, FDCAN_DLC_BYTES_1, verticalLineDetectorTxData);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	461a      	mov	r2, r3
 800130c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001310:	2001      	movs	r0, #1
 8001312:	f000 f811 	bl	8001338 <SendMessageOnCAN>
	return;
 8001316:	bf00      	nop
}
 8001318:	3778      	adds	r7, #120	; 0x78
 800131a:	46bd      	mov	sp, r7
 800131c:	bdb0      	pop	{r4, r5, r7, pc}
 800131e:	bf00      	nop
 8001320:	20000014 	.word	0x20000014
 8001324:	20000004 	.word	0x20000004
 8001328:	2000037c 	.word	0x2000037c
 800132c:	20000000 	.word	0x20000000
 8001330:	20000288 	.word	0x20000288
 8001334:	080094a8 	.word	0x080094a8

08001338 <SendMessageOnCAN>:

void SendMessageOnCAN(uint32_t Identifier, uint32_t DataLength, uint8_t TxData[3]) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
	FDCAN_TxHeaderTypeDef TxHeader;
//	HAL_StatusTypeDef HAL_ret;
	TxHeader.Identifier = Identifier;                 // ID
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	617b      	str	r3, [r7, #20]
	TxHeader.IdType = FDCAN_STANDARD_ID;         // 標準ID
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;     // データフレーム
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
	TxHeader.DataLength = DataLength;     // 3バイトデータ
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	623b      	str	r3, [r7, #32]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.MessageMarker = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <SendMessageOnCAN+0x60>)
 8001372:	f000 fee9 	bl	8002148 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SendMessageOnCAN+0x48>
			Error_Handler();
 800137c:	f000 fa06 	bl	800178c <Error_Handler>
	}

	// FDCANメッセージの送信
//	HAL_ret = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4619      	mov	r1, r3
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <SendMessageOnCAN+0x60>)
 800138a:	f000 fedd 	bl	8002148 <HAL_FDCAN_AddMessageToTxFifoQ>

	return;
 800138e:	bf00      	nop
}
 8001390:	3738      	adds	r7, #56	; 0x38
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000224 	.word	0x20000224

0800139c <_write>:

int _write(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	230a      	movs	r3, #10
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <_write+0x24>)
 80013b2:	f002 fdb3 	bl	8003f1c <HAL_UART_Transmit>
  return len;
 80013b6:	687b      	ldr	r3, [r7, #4]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200002ec 	.word	0x200002ec
 80013c4:	00000000 	.word	0x00000000

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b098      	sub	sp, #96	; 0x60
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setbuf(stdout, NULL); // printfの有効化
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <main+0xd8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fad8 	bl	800598c <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fc05 	bl	8001bea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f862 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f000 f97c 	bl	80016e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013e8:	f000 f8f0 	bl	80015cc <MX_SPI1_Init>
  MX_FDCAN1_Init();
 80013ec:	f000 f8a8 	bl	8001540 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 80013f0:	f000 f92a 	bl	8001648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*センサの個体差を吸収するため, 初期値を取得する. 後で実装する*/
  /*白*/
  unsigned int sensorWhiteList[8] = {
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <main+0xdc>)
 80013f6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  1024, // センサ6
		  1024, // センサ7
		  1024  // センサ8
  };
  /*黒*/
  unsigned int sensorBlackList[8] = {
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	2220      	movs	r2, #32
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fb7b 	bl	8006b0c <memset>
  };

  /*それぞれのセンサのバッファを初期化*
   *初めに読み取った値で初期化するのが良さそう*/
  NHK2024_Filter_Buffer* bufList[8] = {
		  moving_average_filter_init(0.0, 10), // センサ1
 8001416:	200a      	movs	r0, #10
 8001418:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001498 <main+0xd0>
 800141c:	f7ff fe10 	bl	8001040 <moving_average_filter_init>
 8001420:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8001422:	603b      	str	r3, [r7, #0]
		  moving_average_filter_init(0.0, 10), // センサ2
 8001424:	200a      	movs	r0, #10
 8001426:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001498 <main+0xd0>
 800142a:	f7ff fe09 	bl	8001040 <moving_average_filter_init>
 800142e:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8001430:	607b      	str	r3, [r7, #4]
		  moving_average_filter_init(0.0, 10), // センサ3
 8001432:	200a      	movs	r0, #10
 8001434:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8001498 <main+0xd0>
 8001438:	f7ff fe02 	bl	8001040 <moving_average_filter_init>
 800143c:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 800143e:	60bb      	str	r3, [r7, #8]
		  moving_average_filter_init(0.0, 10), // センサ4
 8001440:	200a      	movs	r0, #10
 8001442:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8001498 <main+0xd0>
 8001446:	f7ff fdfb 	bl	8001040 <moving_average_filter_init>
 800144a:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 800144c:	60fb      	str	r3, [r7, #12]
		  moving_average_filter_init(0.0, 10), // センサ5
 800144e:	200a      	movs	r0, #10
 8001450:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001498 <main+0xd0>
 8001454:	f7ff fdf4 	bl	8001040 <moving_average_filter_init>
 8001458:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 800145a:	613b      	str	r3, [r7, #16]
		  moving_average_filter_init(0.0, 10), // センサ6
 800145c:	200a      	movs	r0, #10
 800145e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8001498 <main+0xd0>
 8001462:	f7ff fded 	bl	8001040 <moving_average_filter_init>
 8001466:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8001468:	617b      	str	r3, [r7, #20]
		  moving_average_filter_init(0.0, 10), // センサ7
 800146a:	200a      	movs	r0, #10
 800146c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001498 <main+0xd0>
 8001470:	f7ff fde6 	bl	8001040 <moving_average_filter_init>
 8001474:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8001476:	61bb      	str	r3, [r7, #24]
		  moving_average_filter_init(0.0, 10)  // センサ8
 8001478:	200a      	movs	r0, #10
 800147a:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001498 <main+0xd0>
 800147e:	f7ff fddf 	bl	8001040 <moving_average_filter_init>
 8001482:	4603      	mov	r3, r0
  NHK2024_Filter_Buffer* bufList[8] = {
 8001484:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ReadADCCChannel(bufList, sensorWhiteList, sensorBlackList);
 8001486:	f107 0220 	add.w	r2, r7, #32
 800148a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800148e:	463b      	mov	r3, r7
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe69 	bl	8001168 <ReadADCCChannel>
 8001496:	e7f6      	b.n	8001486 <main+0xbe>
	...
 80014a0:	20000204 	.word	0x20000204
 80014a4:	080094c0 	.word	0x080094c0

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2238      	movs	r2, #56	; 0x38
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fb28 	bl	8006b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f001 f8ec 	bl	80026a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2340      	movs	r3, #64	; 0x40
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e2:	2302      	movs	r3, #2
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ea:	2355      	movs	r3, #85	; 0x55
 80014ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f976 	bl	80027f0 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800150a:	f000 f93f 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fc7a 	bl	8002e20 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001532:	f000 f92b 	bl	800178c <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001546:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <MX_FDCAN1_Init+0x88>)
 8001548:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800155e:	2200      	movs	r2, #0
 8001560:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001564:	2200      	movs	r2, #0
 8001566:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800156a:	2200      	movs	r2, #0
 800156c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001570:	2211      	movs	r2, #17
 8001572:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001576:	2201      	movs	r2, #1
 8001578:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800157c:	2207      	movs	r2, #7
 800157e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001582:	2202      	movs	r2, #2
 8001584:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001586:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001588:	2201      	movs	r2, #1
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800158e:	2201      	movs	r2, #1
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 8001594:	2201      	movs	r2, #1
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 800159a:	2201      	movs	r2, #1
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	; (80015c4 <MX_FDCAN1_Init+0x84>)
 80015b2:	f000 fc6f 	bl	8001e94 <HAL_FDCAN_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80015bc:	f000 f8e6 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000224 	.word	0x20000224
 80015c8:	40006400 	.word	0x40006400

080015cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_SPI1_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_SPI1_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_SPI1_Init+0x74>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x74>)
 80015e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x74>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x74>)
 80015fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x74>)
 8001602:	2238      	movs	r2, #56	; 0x38
 8001604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x74>)
 800161a:	2207      	movs	r2, #7
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SPI1_Init+0x74>)
 800162c:	f002 f804 	bl	8003638 <HAL_SPI_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 f8a9 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000288 	.word	0x20000288
 8001644:	40013000 	.word	0x40013000

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 800164e:	4a23      	ldr	r2, [pc, #140]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001690:	4811      	ldr	r0, [pc, #68]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 8001692:	f002 fbf3 	bl	8003e7c <HAL_UART_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800169c:	f000 f876 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a0:	2100      	movs	r1, #0
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 80016a4:	f003 f98a 	bl	80049bc <HAL_UARTEx_SetTxFifoThreshold>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016ae:	f000 f86d 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b2:	2100      	movs	r1, #0
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 80016b6:	f003 f9bf 	bl	8004a38 <HAL_UARTEx_SetRxFifoThreshold>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016c0:	f000 f864 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_USART2_UART_Init+0x90>)
 80016c6:	f003 f940 	bl	800494a <HAL_UARTEx_DisableFifoMode>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80016d0:	f000 f85c 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002ec 	.word	0x200002ec
 80016dc:	40004400 	.word	0x40004400

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <MX_GPIO_Init+0xa4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_GPIO_Init+0xa4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <MX_GPIO_Init+0xa4>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_GPIO_Init+0xa4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Sensor4_Pin|Sensor3_Pin|Sensor2_Pin|Sensor1_Pin
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f000 ffa2 	bl	8002678 <HAL_GPIO_WritePin>
                          |Sensor5_Pin|Sensor6_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Sensor7_Pin|Sensor8_Pin, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2141      	movs	r1, #65	; 0x41
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <MX_GPIO_Init+0xa8>)
 800173a:	f000 ff9d 	bl	8002678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Sensor4_Pin Sensor3_Pin Sensor2_Pin Sensor1_Pin
                           Sensor5_Pin Sensor6_Pin */
  GPIO_InitStruct.Pin = Sensor4_Pin|Sensor3_Pin|Sensor2_Pin|Sensor1_Pin
 800173e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001742:	60fb      	str	r3, [r7, #12]
                          |Sensor5_Pin|Sensor6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f000 fe0b 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : Sensor7_Pin Sensor8_Pin */
  GPIO_InitStruct.Pin = Sensor7_Pin|Sensor8_Pin;
 800175e:	2341      	movs	r3, #65	; 0x41
 8001760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <MX_GPIO_Init+0xa8>)
 8001776:	f000 fdfd 	bl	8002374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	48000400 	.word	0x48000400

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_MspInit+0x44>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	; 0x60
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b09a      	sub	sp, #104	; 0x68
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2244      	movs	r2, #68	; 0x44
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f005 f983 	bl	8006b0c <memset>
  if(hfdcan->Instance==FDCAN1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_FDCAN_MspInit+0xac>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d139      	bne.n	8001884 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001814:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fd19 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800182c:	f7ff ffae 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 8001836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_FDCAN_MspInit+0xb0>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001860:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001864:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001872:	2309      	movs	r3, #9
 8001874:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187a:	4619      	mov	r1, r3
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f000 fd78 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3768      	adds	r7, #104	; 0x68
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40006400 	.word	0x40006400
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x7c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d127      	bne.n	8001906 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c0:	6613      	str	r3, [r2, #96]	; 0x60
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_SPI_MspInit+0x80>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018e6:	2338      	movs	r3, #56	; 0x38
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f6:	2305      	movs	r3, #5
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_SPI_MspInit+0x84>)
 8001902:	f000 fd37 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40013000 	.word	0x40013000
 8001914:	40021000 	.word	0x40021000
 8001918:	48000400 	.word	0x48000400

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09a      	sub	sp, #104	; 0x68
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2244      	movs	r2, #68	; 0x44
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f005 f8e5 	bl	8006b0c <memset>
  if(huart->Instance==USART2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_UART_MspInit+0xa8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d136      	bne.n	80019ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800194c:	2302      	movs	r3, #2
 800194e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fc7d 	bl	8003258 <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001964:	f7ff ff12 	bl	800178c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0xac>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0xac>)
 800196e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001972:	6593      	str	r3, [r2, #88]	; 0x58
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_UART_MspInit+0xac>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_UART_MspInit+0xac>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001984:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_UART_MspInit+0xac>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_UART_MspInit+0xac>)
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001998:	230c      	movs	r3, #12
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f000 fcdd 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3768      	adds	r7, #104	; 0x68
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40021000 	.word	0x40021000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f93a 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_kill>:

int _kill(int pid, int sig)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3a:	f005 f8a5 	bl	8006b88 <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2216      	movs	r2, #22
 8001a42:	601a      	str	r2, [r3, #0]
  return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
  }

  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f005 f826 	bl	8006b88 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20008000 	.word	0x20008000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	20000380 	.word	0x20000380
 8001b70:	200004d8 	.word	0x200004d8

08001b74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b98:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc2:	f7ff ffd7 	bl	8001b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f004 ffe5 	bl	8006b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bca:	f7ff fbfd 	bl	80013c8 <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   r0, =_estack
 8001bd0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001bdc:	08009968 	.word	0x08009968
  ldr r2, =_sbss
 8001be0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001be4:	200004d4 	.word	0x200004d4

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>

08001bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f91b 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f80e 	bl	8001c1c <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e001      	b.n	8001c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c0c:	f7ff fdc4 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c10:	79fb      	ldrb	r3, [r7, #7]

}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_InitTick+0x68>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d022      	beq.n	8001c76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_InitTick+0x6c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_InitTick+0x68>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f918 	bl	8001e7a <HAL_SYSTICK_Config>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10f      	bne.n	8001c70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	d809      	bhi.n	8001c6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c56:	2200      	movs	r2, #0
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5e:	f000 f8f2 	bl	8001e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_InitTick+0x70>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e004      	b.n	8001c7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	2000003c 	.word	0x2000003c
 8001c88:	20000034 	.word	0x20000034
 8001c8c:	20000038 	.word	0x20000038

08001c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x1c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_IncTick+0x1c>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000384 	.word	0x20000384
 8001cb0:	2000003c 	.word	0x2000003c

08001cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_GetTick+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000384 	.word	0x20000384

08001ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x44>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <__NVIC_GetPriorityGrouping+0x18>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 0307 	and.w	r3, r3, #7
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff47 	bl	8001ccc <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff5e 	bl	8001d14 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff90 	bl	8001d84 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5f 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ffb2 	bl	8001dec <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e147      	b.n	8002136 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fc90 	bl	80017e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0210 	bic.w	r2, r2, #16
 8001ece:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed0:	f7ff fef0 	bl	8001cb4 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ed6:	e012      	b.n	8001efe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ed8:	f7ff feec 	bl	8001cb4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d90b      	bls.n	8001efe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	f043 0201 	orr.w	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e11b      	b.n	8002136 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d0e5      	beq.n	8001ed8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1c:	f7ff feca 	bl	8001cb4 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f22:	e012      	b.n	8001f4a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001f24:	f7ff fec6 	bl	8001cb4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b0a      	cmp	r3, #10
 8001f30:	d90b      	bls.n	8001f4a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2203      	movs	r2, #3
 8001f42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0f5      	b.n	8002136 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0e5      	beq.n	8001f24 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0202 	orr.w	r2, r2, #2
 8001f66:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a74      	ldr	r2, [pc, #464]	; (8002140 <HAL_FDCAN_Init+0x2ac>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d103      	bne.n	8001f7a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001f72:	4a74      	ldr	r2, [pc, #464]	; (8002144 <HAL_FDCAN_Init+0x2b0>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7c1b      	ldrb	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	e007      	b.n	8001fa4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fa2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7c5b      	ldrb	r3, [r3, #17]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d108      	bne.n	8001fbe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fba:	619a      	str	r2, [r3, #24]
 8001fbc:	e007      	b.n	8001fce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7c9b      	ldrb	r3, [r3, #18]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d108      	bne.n	8001fe8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	e007      	b.n	8001ff8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ff6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800201c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0210 	bic.w	r2, r2, #16
 800202c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0204 	orr.w	r2, r2, #4
 8002044:	619a      	str	r2, [r3, #24]
 8002046:	e02c      	b.n	80020a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d028      	beq.n	80020a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d01c      	beq.n	8002092 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002066:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0210 	orr.w	r2, r2, #16
 8002076:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d110      	bne.n	80020a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	619a      	str	r2, [r3, #24]
 8002090:	e007      	b.n	80020a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699a      	ldr	r2, [r3, #24]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80020ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80020cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020d6:	d115      	bne.n	8002104 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	3b01      	subs	r3, #1
 80020e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	3b01      	subs	r3, #1
 80020ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002100:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002102:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f858 	bl	80021d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40006400 	.word	0x40006400
 8002144:	40006500 	.word	0x40006500

08002148 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d12c      	bne.n	80021ba <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e023      	b.n	80021c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f870 	bl	800227c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80021ac:	2201      	movs	r2, #1
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	409a      	lsls	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e006      	b.n	80021c8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021be:	f043 0208 	orr.w	r2, r3, #8
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80021da:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ea:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	041a      	lsls	r2, r3, #16
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002210:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e005      	b.n	800225e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	429a      	cmp	r2, r3
 8002268:	d3f3      	bcc.n	8002252 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800226a:	bf00      	nop
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	4000a400 	.word	0x4000a400

0800227c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800229a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e00a      	b.n	80022be <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80022b0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80022b6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022c8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80022ce:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80022d4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	3304      	adds	r3, #4
 80022fa:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	3304      	adds	r3, #4
 8002306:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e020      	b.n	8002350 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3303      	adds	r3, #3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3302      	adds	r3, #2
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	440b      	add	r3, r1
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002326:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	440b      	add	r3, r1
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002334:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	440a      	add	r2, r1
 800233c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800233e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3304      	adds	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3304      	adds	r3, #4
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	4a06      	ldr	r2, [pc, #24]	; (8002370 <FDCAN_CopyMessageToRAM+0xf4>)
 8002358:	5cd3      	ldrb	r3, [r2, r3]
 800235a:	461a      	mov	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4293      	cmp	r3, r2
 8002360:	d3d5      	bcc.n	800230e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	3724      	adds	r7, #36	; 0x24
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	080094f8 	.word	0x080094f8

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002382:	e15a      	b.n	800263a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 814c 	beq.w	8002634 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d005      	beq.n	80023b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d130      	bne.n	8002416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ea:	2201      	movs	r2, #1
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0201 	and.w	r2, r3, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d017      	beq.n	8002452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d123      	bne.n	80024a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	08da      	lsrs	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3208      	adds	r2, #8
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	08da      	lsrs	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3208      	adds	r2, #8
 80024a0:	6939      	ldr	r1, [r7, #16]
 80024a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a6 	beq.w	8002634 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e8:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6613      	str	r3, [r2, #96]	; 0x60
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_GPIO_Init+0x2e4>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800252a:	d01f      	beq.n	800256c <HAL_GPIO_Init+0x1f8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4c      	ldr	r2, [pc, #304]	; (8002660 <HAL_GPIO_Init+0x2ec>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d019      	beq.n	8002568 <HAL_GPIO_Init+0x1f4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_GPIO_Init+0x2f0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d013      	beq.n	8002564 <HAL_GPIO_Init+0x1f0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_GPIO_Init+0x2f4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d00d      	beq.n	8002560 <HAL_GPIO_Init+0x1ec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2f8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d007      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2fc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_GPIO_Init+0x1e4>
 8002554:	2305      	movs	r3, #5
 8002556:	e00a      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002558:	2306      	movs	r3, #6
 800255a:	e008      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 800255c:	2304      	movs	r3, #4
 800255e:	e006      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002560:	2303      	movs	r3, #3
 8002562:	e004      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002564:	2302      	movs	r3, #2
 8002566:	e002      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_GPIO_Init+0x1fa>
 800256c:	2300      	movs	r3, #0
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257e:	4937      	ldr	r1, [pc, #220]	; (800265c <HAL_GPIO_Init+0x2e8>)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <HAL_GPIO_Init+0x300>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_GPIO_Init+0x300>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_GPIO_Init+0x300>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <HAL_GPIO_Init+0x300>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262e:	4a11      	ldr	r2, [pc, #68]	; (8002674 <HAL_GPIO_Init+0x300>)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	f47f ae9d 	bne.w	8002384 <HAL_GPIO_Init+0x10>
  }
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40021000 	.word	0x40021000
 800265c:	40010000 	.word	0x40010000
 8002660:	48000400 	.word	0x48000400
 8002664:	48000800 	.word	0x48000800
 8002668:	48000c00 	.word	0x48000c00
 800266c:	48001000 	.word	0x48001000
 8002670:	48001400 	.word	0x48001400
 8002674:	40010400 	.word	0x40010400

08002678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
 8002684:	4613      	mov	r3, r2
 8002686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002688:	787b      	ldrb	r3, [r7, #1]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002694:	e002      	b.n	800269c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d141      	bne.n	800273a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026b6:	4b4b      	ldr	r3, [pc, #300]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d131      	bne.n	8002728 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026c4:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d4:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026dc:	4a41      	ldr	r2, [pc, #260]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026e4:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2232      	movs	r2, #50	; 0x32
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a3f      	ldr	r2, [pc, #252]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026fa:	e002      	b.n	8002702 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3b01      	subs	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d102      	bne.n	8002716 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f2      	bne.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002716:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002722:	d158      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e057      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800272a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272e:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002734:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002738:	e04d      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d141      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800274a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274e:	d131      	bne.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002756:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2232      	movs	r2, #50	; 0x32
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a1c      	ldr	r2, [pc, #112]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002786:	e002      	b.n	800278e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3b01      	subs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279a:	d102      	bne.n	80027a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f2      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d112      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e011      	b.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027c4:	e007      	b.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ce:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40007000 	.word	0x40007000
 80027e8:	20000034 	.word	0x20000034
 80027ec:	431bde83 	.word	0x431bde83

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e306      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	4b97      	ldr	r3, [pc, #604]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d102      	bne.n	800282e <HAL_RCC_OscConfig+0x3e>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d002      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b8d      	ldr	r3, [pc, #564]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e2e1      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a84      	ldr	r2, [pc, #528]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7e      	ldr	r2, [pc, #504]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7b      	ldr	r2, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a74      	ldr	r2, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff fa04 	bl	8001cb4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fa00 	bl	8001cb4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e2a6      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f9f0 	bl	8001cb4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff f9ec 	bl	8001cb4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e292      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d075      	beq.n	80029f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d102      	bne.n	8002926 <HAL_RCC_OscConfig+0x136>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d002      	beq.n	800292c <HAL_RCC_OscConfig+0x13c>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d11f      	bne.n	800296c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_OscConfig+0x154>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e265      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	4946      	ldr	r1, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002958:	4b45      	ldr	r3, [pc, #276]	; (8002a70 <HAL_RCC_OscConfig+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f95d 	bl	8001c1c <HAL_InitTick>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d043      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e251      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3c      	ldr	r2, [pc, #240]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff f998 	bl	8001cb4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002988:	f7ff f994 	bl	8001cb4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e23a      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299a:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	492d      	ldr	r1, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
 80029ba:	e01a      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f974 	bl	8001cb4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7ff f970 	bl	8001cb4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e216      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x1e0>
 80029ee:	e000      	b.n	80029f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d041      	beq.n	8002a82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff f94d 	bl	8001cb4 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7ff f949 	bl	8001cb4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1ef      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ef      	beq.n	8002a1e <HAL_RCC_OscConfig+0x22e>
 8002a3e:	e020      	b.n	8002a82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff f930 	bl	8001cb4 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a56:	e00d      	b.n	8002a74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7ff f92c 	bl	8001cb4 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d906      	bls.n	8002a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1d2      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	20000038 	.word	0x20000038
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ea      	bne.n	8002a58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a94:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2b4>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a7e      	ldr	r2, [pc, #504]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4b79      	ldr	r3, [pc, #484]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7ff f8e9 	bl	8001cb4 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7ff f8e5 	bl	8001cb4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e18b      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af8:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x4bc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_RCC_OscConfig+0x32e>
 8002b0c:	4b66      	ldr	r3, [pc, #408]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1c:	e024      	b.n	8002b68 <HAL_RCC_OscConfig+0x378>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d110      	bne.n	8002b48 <HAL_RCC_OscConfig+0x358>
 8002b26:	4b60      	ldr	r3, [pc, #384]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	4a5e      	ldr	r2, [pc, #376]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b36:	4b5c      	ldr	r3, [pc, #368]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b46:	e00f      	b.n	8002b68 <HAL_RCC_OscConfig+0x378>
 8002b48:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	4a56      	ldr	r2, [pc, #344]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7ff f8a0 	bl	8001cb4 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7ff f89c 	bl	8001cb4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e140      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_RCC_OscConfig+0x388>
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f889 	bl	8001cb4 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7ff f885 	bl	8001cb4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e129      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ed      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b35      	ldr	r3, [pc, #212]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	4a34      	ldr	r2, [pc, #208]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d03c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d01c      	beq.n	8002c2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bf6:	4a2c      	ldr	r2, [pc, #176]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7ff f858 	bl	8001cb4 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c08:	f7ff f854 	bl	8001cb4 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0fa      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0ef      	beq.n	8002c08 <HAL_RCC_OscConfig+0x418>
 8002c28:	e01b      	b.n	8002c62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c30:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7ff f83b 	bl	8001cb4 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c42:	f7ff f837 	bl	8001cb4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0dd      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ef      	bne.n	8002c42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d1 	beq.w	8002e0e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	f000 808b 	beq.w	8002d90 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d15e      	bne.n	8002d40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7ff f811 	bl	8001cb4 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7ff f80d 	bl	8001cb4 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d905      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0b3      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ec      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <HAL_RCC_OscConfig+0x62c>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6a11      	ldr	r1, [r2, #32]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0112      	lsls	r2, r2, #4
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cd6:	0212      	lsls	r2, r2, #8
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cde:	0852      	lsrs	r2, r2, #1
 8002ce0:	3a01      	subs	r2, #1
 8002ce2:	0552      	lsls	r2, r2, #21
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cea:	0852      	lsrs	r2, r2, #1
 8002cec:	3a01      	subs	r2, #1
 8002cee:	0652      	lsls	r2, r2, #25
 8002cf0:	4311      	orrs	r1, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cf6:	06d2      	lsls	r2, r2, #27
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4947      	ldr	r1, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d00:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a44      	ldr	r2, [pc, #272]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe ffcc 	bl	8001cb4 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe ffc8 	bl	8001cb4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e06e      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x530>
 8002d3e:	e066      	b.n	8002e0e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a34      	ldr	r2, [pc, #208]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d4c:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d5e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe ffa4 	bl	8001cb4 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe ffa0 	bl	8001cb4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e046      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x580>
 8002d8e:	e03e      	b.n	8002e0e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e039      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002d9c:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCC_OscConfig+0x628>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d12c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d123      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d11b      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d113      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	085b      	lsrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d109      	bne.n	8002e0a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	019f800c 	.word	0x019f800c

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e11e      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b91      	ldr	r3, [pc, #580]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b8e      	ldr	r3, [pc, #568]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 020f 	bic.w	r2, r3, #15
 8002e4e:	498c      	ldr	r1, [pc, #560]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e106      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d073      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d129      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0f4      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002e8c:	f000 f99e 	bl	80031cc <RCC_GetSysClockFreqFromPLLSource>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_RCC_ClockConfig+0x268>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d93f      	bls.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d033      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d12f      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002eba:	4b72      	ldr	r3, [pc, #456]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec2:	4a70      	ldr	r2, [pc, #448]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e024      	b.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed8:	4b6a      	ldr	r3, [pc, #424]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0c6      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0be      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ef8:	f000 f8ce 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_RCC_ClockConfig+0x268>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d909      	bls.n	8002f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 0203 	bic.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4957      	ldr	r1, [pc, #348]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fec2 	bl	8001cb4 <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f34:	f7fe febe 	bl	8001cb4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e095      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4a:	4b4e      	ldr	r3, [pc, #312]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 020c 	and.w	r2, r3, #12
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d1eb      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	4a42      	ldr	r2, [pc, #264]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002f8c:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f94:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4936      	ldr	r1, [pc, #216]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b80      	cmp	r3, #128	; 0x80
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d21d      	bcs.n	800300c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 020f 	bic.w	r2, r3, #15
 8002fd8:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002fe0:	f7fe fe68 	bl	8001cb4 <HAL_GetTick>
 8002fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe fe64 	bl	8001cb4 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e03b      	b.n	8003076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_ClockConfig+0x260>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d1ed      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4917      	ldr	r1, [pc, #92]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490f      	ldr	r1, [pc, #60]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800304a:	f000 f825 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800304e:	4602      	mov	r2, r0
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_ClockConfig+0x264>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	490c      	ldr	r1, [pc, #48]	; (800308c <HAL_RCC_ClockConfig+0x26c>)
 800305c:	5ccb      	ldrb	r3, [r1, r3]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	fa22 f303 	lsr.w	r3, r2, r3
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <HAL_RCC_ClockConfig+0x270>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800306a:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x274>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fdd4 	bl	8001c1c <HAL_InitTick>
 8003074:	4603      	mov	r3, r0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	40021000 	.word	0x40021000
 8003088:	04c4b400 	.word	0x04c4b400
 800308c:	080094e0 	.word	0x080094e0
 8003090:	20000034 	.word	0x20000034
 8003094:	20000038 	.word	0x20000038

08003098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e047      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e03e      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80030c2:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d136      	bne.n	800313c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ce:	4b20      	ldr	r3, [pc, #128]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3301      	adds	r3, #1
 80030e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d10c      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030f6:	68d2      	ldr	r2, [r2, #12]
 80030f8:	0a12      	lsrs	r2, r2, #8
 80030fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	0a12      	lsrs	r2, r2, #8
 8003114:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
      break;
 800311e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0e5b      	lsrs	r3, r3, #25
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e001      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003140:	693b      	ldr	r3, [r7, #16]
}
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000034 	.word	0x20000034

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <HAL_RCC_GetPCLK1Freq+0x28>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	080094f0 	.word	0x080094f0

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a4:	f7ff ffda 	bl	800315c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0adb      	lsrs	r3, r3, #11
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4904      	ldr	r1, [pc, #16]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080094f0 	.word	0x080094f0

080031cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d10c      	bne.n	800320a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	0a12      	lsrs	r2, r2, #8
 80031fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
    break;
 8003208:	e00c      	b.n	8003224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	0a12      	lsrs	r2, r2, #8
 8003218:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    break;
 8003222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0e5b      	lsrs	r3, r3, #25
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800323e:	687b      	ldr	r3, [r7, #4]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	007a1200 	.word	0x007a1200
 8003254:	00f42400 	.word	0x00f42400

08003258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003260:	2300      	movs	r3, #0
 8003262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003264:	2300      	movs	r3, #0
 8003266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8098 	beq.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003276:	2300      	movs	r3, #0
 8003278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a2:	4b3a      	ldr	r3, [pc, #232]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a39      	ldr	r2, [pc, #228]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032ae:	f7fe fd01 	bl	8001cb4 <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b4:	e009      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fe fcfd 	bl	8001cb4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d902      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	74fb      	strb	r3, [r7, #19]
        break;
 80032c8:	e005      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ca:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ef      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80032d6:	7cfb      	ldrb	r3, [r7, #19]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d159      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032dc:	4b2a      	ldr	r3, [pc, #168]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01e      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d019      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800331c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003324:	4a18      	ldr	r2, [pc, #96]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fcbd 	bl	8001cb4 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333c:	e00b      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fe fcb9 	bl	8001cb4 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d902      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	74fb      	strb	r3, [r7, #19]
            break;
 8003354:	e006      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ec      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003380:	e008      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	74bb      	strb	r3, [r7, #18]
 8003386:	e005      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7c7b      	ldrb	r3, [r7, #17]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4ba6      	ldr	r3, [pc, #664]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339e:	4aa5      	ldr	r2, [pc, #660]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b2:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	499c      	ldr	r1, [pc, #624]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d4:	4b97      	ldr	r3, [pc, #604]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 020c 	bic.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4994      	ldr	r1, [pc, #592]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f6:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	498b      	ldr	r1, [pc, #556]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003418:	4b86      	ldr	r3, [pc, #536]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4983      	ldr	r1, [pc, #524]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800343a:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	497a      	ldr	r1, [pc, #488]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800345c:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4972      	ldr	r1, [pc, #456]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	4969      	ldr	r1, [pc, #420]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034a0:	4b64      	ldr	r3, [pc, #400]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4961      	ldr	r1, [pc, #388]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	4958      	ldr	r1, [pc, #352]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e4:	4b53      	ldr	r3, [pc, #332]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4950      	ldr	r1, [pc, #320]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003502:	d105      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4942      	ldr	r1, [pc, #264]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353c:	4b3d      	ldr	r3, [pc, #244]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4934      	ldr	r1, [pc, #208]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800358c:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a20      	ldr	r2, [pc, #128]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4918      	ldr	r1, [pc, #96]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a12      	ldr	r2, [pc, #72]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d015      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800361a:	d105      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003628:	7cbb      	ldrb	r3, [r7, #18]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e09d      	b.n	8003786 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365a:	d009      	beq.n	8003670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
 8003662:	e005      	b.n	8003670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe f902 	bl	8001894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036b0:	d902      	bls.n	80036b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e002      	b.n	80036be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036c6:	d007      	beq.n	80036d8 <HAL_SPI_Init+0xa0>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	ea42 0103 	orr.w	r1, r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	f003 0204 	and.w	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003754:	ea42 0103 	orr.w	r1, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08a      	sub	sp, #40	; 0x28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800379c:	2301      	movs	r3, #1
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_SPI_TransmitReceive+0x26>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e1fb      	b.n	8003bac <HAL_SPI_TransmitReceive+0x41e>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037bc:	f7fe fa7a 	bl	8001cb4 <HAL_GetTick>
 80037c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037d8:	7efb      	ldrb	r3, [r7, #27]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d00e      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x6e>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037e4:	d106      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x66>
 80037ee:	7efb      	ldrb	r3, [r7, #27]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d003      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80037f4:	2302      	movs	r3, #2
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80037fa:	e1cd      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_SPI_TransmitReceive+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_TransmitReceive+0x80>
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003814:	e1c0      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	887a      	ldrh	r2, [r7, #2]
 800383a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800386c:	d802      	bhi.n	8003874 <HAL_SPI_TransmitReceive+0xe6>
 800386e:	8a3b      	ldrh	r3, [r7, #16]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d908      	bls.n	8003886 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e007      	b.n	8003896 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003894:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d007      	beq.n	80038b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038bc:	d97c      	bls.n	80039b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x13e>
 80038c6:	8a7b      	ldrh	r3, [r7, #18]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d169      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f0:	e056      	b.n	80039a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d11b      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x1aa>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d016      	beq.n	8003938 <HAL_SPI_TransmitReceive+0x1aa>
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d113      	bne.n	8003938 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d11c      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x1f2>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	b292      	uxth	r2, r2
 800395e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	1c9a      	adds	r2, r3, #2
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003980:	f7fe f998 	bl	8001cb4 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398c:	429a      	cmp	r2, r3
 800398e:	d807      	bhi.n	80039a0 <HAL_SPI_TransmitReceive+0x212>
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003996:	d003      	beq.n	80039a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800399e:	e0fb      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1a3      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x164>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d19d      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x164>
 80039b6:	e0df      	b.n	8003b78 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x23a>
 80039c0:	8a7b      	ldrh	r3, [r7, #18]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f040 80cb 	bne.w	8003b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d912      	bls.n	80039f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	881a      	ldrh	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b02      	subs	r3, #2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f6:	e0b2      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	330c      	adds	r3, #12
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a1e:	e09e      	b.n	8003b5e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d134      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x30a>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d02f      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x30a>
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d12c      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d912      	bls.n	8003a6e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b02      	subs	r3, #2
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a6c:	e012      	b.n	8003a94 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d148      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x3aa>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d042      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d923      	bls.n	8003b06 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	1c9a      	adds	r2, r3, #2
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b02      	subs	r3, #2
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d81f      	bhi.n	8003b34 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	e016      	b.n	8003b34 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f103 020c 	add.w	r2, r3, #12
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	7812      	ldrb	r2, [r2, #0]
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b34:	2301      	movs	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b38:	f7fe f8bc 	bl	8001cb4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d803      	bhi.n	8003b50 <HAL_SPI_TransmitReceive+0x3c2>
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b4e:	d102      	bne.n	8003b56 <HAL_SPI_TransmitReceive+0x3c8>
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b5c:	e01c      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f af5b 	bne.w	8003a20 <HAL_SPI_TransmitReceive+0x292>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f47f af54 	bne.w	8003a20 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f937 	bl	8003df0 <SPI_EndRxTxTransaction>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
 8003b94:	e000      	b.n	8003b98 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003b96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bc4:	f7fe f876 	bl	8001cb4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bd4:	f7fe f86e 	bl	8001cb4 <HAL_GetTick>
 8003bd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	015b      	lsls	r3, r3, #5
 8003be0:	0d1b      	lsrs	r3, r3, #20
 8003be2:	69fa      	ldr	r2, [r7, #28]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bea:	e054      	b.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf2:	d050      	beq.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bf4:	f7fe f85e 	bl	8001cb4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d902      	bls.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d13d      	bne.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c22:	d111      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	d004      	beq.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d107      	bne.n	8003c48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c50:	d10f      	bne.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e017      	b.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	bf0c      	ite	eq
 8003ca6:	2301      	moveq	r3, #1
 8003ca8:	2300      	movne	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d19b      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000034 	.word	0x20000034

08003cc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cd6:	f7fd ffed 	bl	8001cb4 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ce6:	f7fd ffe5 	bl	8001cb4 <HAL_GetTick>
 8003cea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf4:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00da      	lsls	r2, r3, #3
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d0c:	e060      	b.n	8003dd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d14:	d107      	bne.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2c:	d050      	beq.n	8003dd0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d2e:	f7fd ffc1 	bl	8001cb4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d902      	bls.n	8003d44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d13d      	bne.n	8003dc0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d5c:	d111      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d66:	d004      	beq.n	8003d72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d70:	d107      	bne.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8a:	d10f      	bne.n	8003dac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003daa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e010      	b.n	8003de2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d196      	bne.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000034 	.word	0x20000034

08003df0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff ff5b 	bl	8003cc4 <SPI_WaitFifoStateUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e027      	b.n	8003e74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fec0 	bl	8003bb4 <SPI_WaitFlagStateUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e014      	b.n	8003e74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff ff34 	bl	8003cc4 <SPI_WaitFifoStateUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e000      	b.n	8003e74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e042      	b.n	8003f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fd3b 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8c2 	bl	8004048 <UART_SetConfig>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb82 	bl	80045e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fc09 	bl	8004724 <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f32:	2b20      	cmp	r3, #32
 8003f34:	f040 8083 	bne.w	800403e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Transmit+0x28>
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e07b      	b.n	8004040 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Transmit+0x3a>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e074      	b.n	8004040 <HAL_UART_Transmit+0x124>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2221      	movs	r2, #33	; 0x21
 8003f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6e:	f7fd fea1 	bl	8001cb4 <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	88fa      	ldrh	r2, [r7, #6]
 8003f78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	d108      	bne.n	8003fa0 <HAL_UART_Transmit+0x84>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e003      	b.n	8003fa8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003fb0:	e02c      	b.n	800400c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2180      	movs	r1, #128	; 0x80
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fbfc 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e039      	b.n	8004040 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	e007      	b.n	8003ffa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1cc      	bne.n	8003fb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	2140      	movs	r1, #64	; 0x40
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fbc9 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e006      	b.n	8004040 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b08c      	sub	sp, #48	; 0x30
 800404e:	af00      	add	r7, sp, #0
 8004050:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4bab      	ldr	r3, [pc, #684]	; (8004324 <UART_SetConfig+0x2dc>)
 8004078:	4013      	ands	r3, r2
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004080:	430b      	orrs	r3, r1
 8004082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4aa0      	ldr	r2, [pc, #640]	; (8004328 <UART_SetConfig+0x2e0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040b0:	4313      	orrs	r3, r2
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80040be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d2:	f023 010f 	bic.w	r1, r3, #15
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a91      	ldr	r2, [pc, #580]	; (800432c <UART_SetConfig+0x2e4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d125      	bne.n	8004138 <UART_SetConfig+0xf0>
 80040ec:	4b90      	ldr	r3, [pc, #576]	; (8004330 <UART_SetConfig+0x2e8>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d81a      	bhi.n	8004130 <UART_SetConfig+0xe8>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0xb8>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	08004121 	.word	0x08004121
 8004108:	08004119 	.word	0x08004119
 800410c:	08004129 	.word	0x08004129
 8004110:	2301      	movs	r3, #1
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004116:	e0d6      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004118:	2302      	movs	r3, #2
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411e:	e0d2      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004120:	2304      	movs	r3, #4
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004126:	e0ce      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004128:	2308      	movs	r3, #8
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412e:	e0ca      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004130:	2310      	movs	r3, #16
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004136:	e0c6      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a7d      	ldr	r2, [pc, #500]	; (8004334 <UART_SetConfig+0x2ec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d138      	bne.n	80041b4 <UART_SetConfig+0x16c>
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <UART_SetConfig+0x2e8>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d82d      	bhi.n	80041ac <UART_SetConfig+0x164>
 8004150:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0x110>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	0800418d 	.word	0x0800418d
 800415c:	080041ad 	.word	0x080041ad
 8004160:	080041ad 	.word	0x080041ad
 8004164:	080041ad 	.word	0x080041ad
 8004168:	0800419d 	.word	0x0800419d
 800416c:	080041ad 	.word	0x080041ad
 8004170:	080041ad 	.word	0x080041ad
 8004174:	080041ad 	.word	0x080041ad
 8004178:	08004195 	.word	0x08004195
 800417c:	080041ad 	.word	0x080041ad
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041a5 	.word	0x080041a5
 800418c:	2300      	movs	r3, #0
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e098      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e094      	b.n	80042c6 <UART_SetConfig+0x27e>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e090      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e08c      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e088      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5f      	ldr	r2, [pc, #380]	; (8004338 <UART_SetConfig+0x2f0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d125      	bne.n	800420a <UART_SetConfig+0x1c2>
 80041be:	4b5c      	ldr	r3, [pc, #368]	; (8004330 <UART_SetConfig+0x2e8>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c8:	2b30      	cmp	r3, #48	; 0x30
 80041ca:	d016      	beq.n	80041fa <UART_SetConfig+0x1b2>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d818      	bhi.n	8004202 <UART_SetConfig+0x1ba>
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d00a      	beq.n	80041ea <UART_SetConfig+0x1a2>
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d814      	bhi.n	8004202 <UART_SetConfig+0x1ba>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <UART_SetConfig+0x19a>
 80041dc:	2b10      	cmp	r3, #16
 80041de:	d008      	beq.n	80041f2 <UART_SetConfig+0x1aa>
 80041e0:	e00f      	b.n	8004202 <UART_SetConfig+0x1ba>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e8:	e06d      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f0:	e069      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041f2:	2304      	movs	r3, #4
 80041f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f8:	e065      	b.n	80042c6 <UART_SetConfig+0x27e>
 80041fa:	2308      	movs	r3, #8
 80041fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004200:	e061      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004202:	2310      	movs	r3, #16
 8004204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004208:	e05d      	b.n	80042c6 <UART_SetConfig+0x27e>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a4b      	ldr	r2, [pc, #300]	; (800433c <UART_SetConfig+0x2f4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d125      	bne.n	8004260 <UART_SetConfig+0x218>
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <UART_SetConfig+0x2e8>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800421e:	2bc0      	cmp	r3, #192	; 0xc0
 8004220:	d016      	beq.n	8004250 <UART_SetConfig+0x208>
 8004222:	2bc0      	cmp	r3, #192	; 0xc0
 8004224:	d818      	bhi.n	8004258 <UART_SetConfig+0x210>
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d00a      	beq.n	8004240 <UART_SetConfig+0x1f8>
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	d814      	bhi.n	8004258 <UART_SetConfig+0x210>
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <UART_SetConfig+0x1f0>
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d008      	beq.n	8004248 <UART_SetConfig+0x200>
 8004236:	e00f      	b.n	8004258 <UART_SetConfig+0x210>
 8004238:	2300      	movs	r3, #0
 800423a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423e:	e042      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e03e      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e03a      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e036      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e032      	b.n	80042c6 <UART_SetConfig+0x27e>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <UART_SetConfig+0x2e0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12a      	bne.n	80042c0 <UART_SetConfig+0x278>
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <UART_SetConfig+0x2e8>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004278:	d01a      	beq.n	80042b0 <UART_SetConfig+0x268>
 800427a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427e:	d81b      	bhi.n	80042b8 <UART_SetConfig+0x270>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d00c      	beq.n	80042a0 <UART_SetConfig+0x258>
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d815      	bhi.n	80042b8 <UART_SetConfig+0x270>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <UART_SetConfig+0x250>
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0x260>
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x270>
 8004298:	2300      	movs	r3, #0
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429e:	e012      	b.n	80042c6 <UART_SetConfig+0x27e>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a6:	e00e      	b.n	80042c6 <UART_SetConfig+0x27e>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x27e>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b6:	e006      	b.n	80042c6 <UART_SetConfig+0x27e>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x27e>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <UART_SetConfig+0x2e0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	f040 80a8 	bne.w	8004422 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d834      	bhi.n	8004344 <UART_SetConfig+0x2fc>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x298>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	08004305 	.word	0x08004305
 80042e4:	08004345 	.word	0x08004345
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004313 	.word	0x08004313
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004345 	.word	0x08004345
 8004300:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe ff36 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430a:	e021      	b.n	8004350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <UART_SetConfig+0x2f8>)
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004310:	e01e      	b.n	8004350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004312:	f7fe fec1 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004318:	e01a      	b.n	8004350 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004320:	e016      	b.n	8004350 <UART_SetConfig+0x308>
 8004322:	bf00      	nop
 8004324:	cfff69f3 	.word	0xcfff69f3
 8004328:	40008000 	.word	0x40008000
 800432c:	40013800 	.word	0x40013800
 8004330:	40021000 	.word	0x40021000
 8004334:	40004400 	.word	0x40004400
 8004338:	40004800 	.word	0x40004800
 800433c:	40004c00 	.word	0x40004c00
 8004340:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800434e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 812a 	beq.w	80045ac <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	4a9e      	ldr	r2, [pc, #632]	; (80045d8 <UART_SetConfig+0x590>)
 800435e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004362:	461a      	mov	r2, r3
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	fbb3 f3f2 	udiv	r3, r3, r2
 800436a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	4413      	add	r3, r2
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d305      	bcc.n	8004388 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	d903      	bls.n	8004390 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800438e:	e10d      	b.n	80045ac <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	2200      	movs	r2, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	60fa      	str	r2, [r7, #12]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	4a8e      	ldr	r2, [pc, #568]	; (80045d8 <UART_SetConfig+0x590>)
 800439e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2200      	movs	r2, #0
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043b2:	f7fc fc91 	bl	8000cd8 <__aeabi_uldivmod>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	020b      	lsls	r3, r1, #8
 80043c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043cc:	0202      	lsls	r2, r0, #8
 80043ce:	6979      	ldr	r1, [r7, #20]
 80043d0:	6849      	ldr	r1, [r1, #4]
 80043d2:	0849      	lsrs	r1, r1, #1
 80043d4:	2000      	movs	r0, #0
 80043d6:	460c      	mov	r4, r1
 80043d8:	4605      	mov	r5, r0
 80043da:	eb12 0804 	adds.w	r8, r2, r4
 80043de:	eb43 0905 	adc.w	r9, r3, r5
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	469a      	mov	sl, r3
 80043ea:	4693      	mov	fp, r2
 80043ec:	4652      	mov	r2, sl
 80043ee:	465b      	mov	r3, fp
 80043f0:	4640      	mov	r0, r8
 80043f2:	4649      	mov	r1, r9
 80043f4:	f7fc fc70 	bl	8000cd8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004406:	d308      	bcc.n	800441a <UART_SetConfig+0x3d2>
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440e:	d204      	bcs.n	800441a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	e0c8      	b.n	80045ac <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004420:	e0c4      	b.n	80045ac <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442a:	d167      	bne.n	80044fc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800442c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004430:	2b08      	cmp	r3, #8
 8004432:	d828      	bhi.n	8004486 <UART_SetConfig+0x43e>
 8004434:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x3f4>)
 8004436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443a:	bf00      	nop
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	08004487 	.word	0x08004487
 800444c:	08004477 	.word	0x08004477
 8004450:	08004487 	.word	0x08004487
 8004454:	08004487 	.word	0x08004487
 8004458:	08004487 	.word	0x08004487
 800445c:	0800447f 	.word	0x0800447f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fe88 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004466:	e014      	b.n	8004492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7fe fe9a 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 800446c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800446e:	e010      	b.n	8004492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b5a      	ldr	r3, [pc, #360]	; (80045dc <UART_SetConfig+0x594>)
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004474:	e00d      	b.n	8004492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe fe0f 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800447a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800447c:	e009      	b.n	8004492 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004484:	e005      	b.n	8004492 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8089 	beq.w	80045ac <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	4a4e      	ldr	r2, [pc, #312]	; (80045d8 <UART_SetConfig+0x590>)
 80044a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ac:	005a      	lsls	r2, r3, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	441a      	add	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	d916      	bls.n	80044f4 <UART_SetConfig+0x4ac>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d212      	bcs.n	80044f4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	f023 030f 	bic.w	r3, r3, #15
 80044d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	8bfb      	ldrh	r3, [r7, #30]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	8bfa      	ldrh	r2, [r7, #30]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e05b      	b.n	80045ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044fa:	e057      	b.n	80045ac <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004500:	2b08      	cmp	r3, #8
 8004502:	d828      	bhi.n	8004556 <UART_SetConfig+0x50e>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x4c4>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004531 	.word	0x08004531
 8004510:	08004539 	.word	0x08004539
 8004514:	08004541 	.word	0x08004541
 8004518:	08004557 	.word	0x08004557
 800451c:	08004547 	.word	0x08004547
 8004520:	08004557 	.word	0x08004557
 8004524:	08004557 	.word	0x08004557
 8004528:	08004557 	.word	0x08004557
 800452c:	0800454f 	.word	0x0800454f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fe20 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8004534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004536:	e014      	b.n	8004562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004538:	f7fe fe32 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <UART_SetConfig+0x594>)
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004544:	e00d      	b.n	8004562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004546:	f7fe fda7 	bl	8003098 <HAL_RCC_GetSysClockFreq>
 800454a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800454c:	e009      	b.n	8004562 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004554:	e005      	b.n	8004562 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004560:	bf00      	nop
    }

    if (pclk != 0U)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d021      	beq.n	80045ac <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <UART_SetConfig+0x590>)
 800456e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004572:	461a      	mov	r2, r3
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	fbb3 f2f2 	udiv	r2, r3, r2
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	441a      	add	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d909      	bls.n	80045a6 <UART_SetConfig+0x55e>
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d205      	bcs.n	80045a6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	b29a      	uxth	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	e002      	b.n	80045ac <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2200      	movs	r2, #0
 80045c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3730      	adds	r7, #48	; 0x30
 80045d0:	46bd      	mov	sp, r7
 80045d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d6:	bf00      	nop
 80045d8:	08009508 	.word	0x08009508
 80045dc:	00f42400 	.word	0x00f42400

080045e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0310 	and.w	r3, r3, #16
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d10a      	bne.n	80046f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004734:	f7fd fabe 	bl	8001cb4 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b08      	cmp	r3, #8
 8004746:	d10e      	bne.n	8004766 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f82f 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e025      	b.n	80047b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d10e      	bne.n	8004792 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f819 	bl	80047ba <UART_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e00f      	b.n	80047b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b09c      	sub	sp, #112	; 0x70
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ca:	e0a9      	b.n	8004920 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d2:	f000 80a5 	beq.w	8004920 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fd fa6d 	bl	8001cb4 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <UART_WaitOnFlagUntilTimeout+0x32>
 80047e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d140      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004800:	667b      	str	r3, [r7, #100]	; 0x64
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800480c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004810:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e6      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	663b      	str	r3, [r7, #96]	; 0x60
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3308      	adds	r3, #8
 800483c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800483e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004840:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800484c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e069      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d051      	beq.n	8004920 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488a:	d149      	bne.n	8004920 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004894:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
 80048b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e6      	bne.n	8004896 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	613b      	str	r3, [r7, #16]
   return(result);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048e8:	623a      	str	r2, [r7, #32]
 80048ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e010      	b.n	8004942 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4013      	ands	r3, r2
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	429a      	cmp	r2, r3
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	461a      	mov	r2, r3
 8004938:	79fb      	ldrb	r3, [r7, #7]
 800493a:	429a      	cmp	r2, r3
 800493c:	f43f af46 	beq.w	80047cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3770      	adds	r7, #112	; 0x70
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_UARTEx_DisableFifoMode+0x16>
 800495c:	2302      	movs	r3, #2
 800495e:	e027      	b.n	80049b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0201 	bic.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800498e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e02d      	b.n	8004a30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	; 0x24
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f84f 	bl	8004ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e02d      	b.n	8004aac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f811 	bl	8004ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d108      	bne.n	8004ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ad4:	e031      	b.n	8004b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ada:	2308      	movs	r3, #8
 8004adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	0e5b      	lsrs	r3, r3, #25
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	0f5b      	lsrs	r3, r3, #29
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004afe:	7bbb      	ldrb	r3, [r7, #14]
 8004b00:	7b3a      	ldrb	r2, [r7, #12]
 8004b02:	4911      	ldr	r1, [pc, #68]	; (8004b48 <UARTEx_SetNbDataToProcess+0x94>)
 8004b04:	5c8a      	ldrb	r2, [r1, r2]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b0a:	7b3a      	ldrb	r2, [r7, #12]
 8004b0c:	490f      	ldr	r1, [pc, #60]	; (8004b4c <UARTEx_SetNbDataToProcess+0x98>)
 8004b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	7b7a      	ldrb	r2, [r7, #13]
 8004b20:	4909      	ldr	r1, [pc, #36]	; (8004b48 <UARTEx_SetNbDataToProcess+0x94>)
 8004b22:	5c8a      	ldrb	r2, [r1, r2]
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b28:	7b7a      	ldrb	r2, [r7, #13]
 8004b2a:	4908      	ldr	r1, [pc, #32]	; (8004b4c <UARTEx_SetNbDataToProcess+0x98>)
 8004b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	08009520 	.word	0x08009520
 8004b4c:	08009528 	.word	0x08009528

08004b50 <__cvt>:
 8004b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b54:	ec55 4b10 	vmov	r4, r5, d0
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	460e      	mov	r6, r1
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	462b      	mov	r3, r5
 8004b60:	bfbb      	ittet	lt
 8004b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b66:	461d      	movlt	r5, r3
 8004b68:	2300      	movge	r3, #0
 8004b6a:	232d      	movlt	r3, #45	; 0x2d
 8004b6c:	700b      	strb	r3, [r1, #0]
 8004b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b74:	4691      	mov	r9, r2
 8004b76:	f023 0820 	bic.w	r8, r3, #32
 8004b7a:	bfbc      	itt	lt
 8004b7c:	4622      	movlt	r2, r4
 8004b7e:	4614      	movlt	r4, r2
 8004b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b84:	d005      	beq.n	8004b92 <__cvt+0x42>
 8004b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004b8a:	d100      	bne.n	8004b8e <__cvt+0x3e>
 8004b8c:	3601      	adds	r6, #1
 8004b8e:	2102      	movs	r1, #2
 8004b90:	e000      	b.n	8004b94 <__cvt+0x44>
 8004b92:	2103      	movs	r1, #3
 8004b94:	ab03      	add	r3, sp, #12
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	ab02      	add	r3, sp, #8
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ba0:	4653      	mov	r3, sl
 8004ba2:	4632      	mov	r2, r6
 8004ba4:	f002 f8c4 	bl	8006d30 <_dtoa_r>
 8004ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004bac:	4607      	mov	r7, r0
 8004bae:	d102      	bne.n	8004bb6 <__cvt+0x66>
 8004bb0:	f019 0f01 	tst.w	r9, #1
 8004bb4:	d022      	beq.n	8004bfc <__cvt+0xac>
 8004bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bba:	eb07 0906 	add.w	r9, r7, r6
 8004bbe:	d110      	bne.n	8004be2 <__cvt+0x92>
 8004bc0:	783b      	ldrb	r3, [r7, #0]
 8004bc2:	2b30      	cmp	r3, #48	; 0x30
 8004bc4:	d10a      	bne.n	8004bdc <__cvt+0x8c>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4629      	mov	r1, r5
 8004bce:	f7fb ffa3 	bl	8000b18 <__aeabi_dcmpeq>
 8004bd2:	b918      	cbnz	r0, 8004bdc <__cvt+0x8c>
 8004bd4:	f1c6 0601 	rsb	r6, r6, #1
 8004bd8:	f8ca 6000 	str.w	r6, [sl]
 8004bdc:	f8da 3000 	ldr.w	r3, [sl]
 8004be0:	4499      	add	r9, r3
 8004be2:	2200      	movs	r2, #0
 8004be4:	2300      	movs	r3, #0
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb ff95 	bl	8000b18 <__aeabi_dcmpeq>
 8004bee:	b108      	cbz	r0, 8004bf4 <__cvt+0xa4>
 8004bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004bf4:	2230      	movs	r2, #48	; 0x30
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	454b      	cmp	r3, r9
 8004bfa:	d307      	bcc.n	8004c0c <__cvt+0xbc>
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c00:	1bdb      	subs	r3, r3, r7
 8004c02:	4638      	mov	r0, r7
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	b004      	add	sp, #16
 8004c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0c:	1c59      	adds	r1, r3, #1
 8004c0e:	9103      	str	r1, [sp, #12]
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	e7f0      	b.n	8004bf6 <__cvt+0xa6>

08004c14 <__exponent>:
 8004c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c16:	4603      	mov	r3, r0
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	bfb8      	it	lt
 8004c1c:	4249      	neglt	r1, r1
 8004c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8004c22:	bfb4      	ite	lt
 8004c24:	222d      	movlt	r2, #45	; 0x2d
 8004c26:	222b      	movge	r2, #43	; 0x2b
 8004c28:	2909      	cmp	r1, #9
 8004c2a:	7042      	strb	r2, [r0, #1]
 8004c2c:	dd2a      	ble.n	8004c84 <__exponent+0x70>
 8004c2e:	f10d 0207 	add.w	r2, sp, #7
 8004c32:	4617      	mov	r7, r2
 8004c34:	260a      	movs	r6, #10
 8004c36:	4694      	mov	ip, r2
 8004c38:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c3c:	fb06 1415 	mls	r4, r6, r5, r1
 8004c40:	3430      	adds	r4, #48	; 0x30
 8004c42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004c46:	460c      	mov	r4, r1
 8004c48:	2c63      	cmp	r4, #99	; 0x63
 8004c4a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004c4e:	4629      	mov	r1, r5
 8004c50:	dcf1      	bgt.n	8004c36 <__exponent+0x22>
 8004c52:	3130      	adds	r1, #48	; 0x30
 8004c54:	f1ac 0402 	sub.w	r4, ip, #2
 8004c58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c5c:	1c41      	adds	r1, r0, #1
 8004c5e:	4622      	mov	r2, r4
 8004c60:	42ba      	cmp	r2, r7
 8004c62:	d30a      	bcc.n	8004c7a <__exponent+0x66>
 8004c64:	f10d 0209 	add.w	r2, sp, #9
 8004c68:	eba2 020c 	sub.w	r2, r2, ip
 8004c6c:	42bc      	cmp	r4, r7
 8004c6e:	bf88      	it	hi
 8004c70:	2200      	movhi	r2, #0
 8004c72:	4413      	add	r3, r2
 8004c74:	1a18      	subs	r0, r3, r0
 8004c76:	b003      	add	sp, #12
 8004c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004c7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004c82:	e7ed      	b.n	8004c60 <__exponent+0x4c>
 8004c84:	2330      	movs	r3, #48	; 0x30
 8004c86:	3130      	adds	r1, #48	; 0x30
 8004c88:	7083      	strb	r3, [r0, #2]
 8004c8a:	70c1      	strb	r1, [r0, #3]
 8004c8c:	1d03      	adds	r3, r0, #4
 8004c8e:	e7f1      	b.n	8004c74 <__exponent+0x60>

08004c90 <_printf_float>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	ed2d 8b02 	vpush	{d8}
 8004c98:	b08d      	sub	sp, #52	; 0x34
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	461f      	mov	r7, r3
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	f001 ff39 	bl	8006b1c <_localeconv_r>
 8004caa:	f8d0 a000 	ldr.w	sl, [r0]
 8004cae:	4650      	mov	r0, sl
 8004cb0:	f7fb fb06 	bl	80002c0 <strlen>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	9305      	str	r3, [sp, #20]
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	f103 0208 	add.w	r2, r3, #8
 8004cce:	f8c8 2000 	str.w	r2, [r8]
 8004cd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004cda:	9307      	str	r3, [sp, #28]
 8004cdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ce0:	ee08 0a10 	vmov	s16, r0
 8004ce4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ce8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cec:	4b9e      	ldr	r3, [pc, #632]	; (8004f68 <_printf_float+0x2d8>)
 8004cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf2:	f7fb ff43 	bl	8000b7c <__aeabi_dcmpun>
 8004cf6:	bb88      	cbnz	r0, 8004d5c <_printf_float+0xcc>
 8004cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <_printf_float+0x2d8>)
 8004cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d02:	f7fb ff1d 	bl	8000b40 <__aeabi_dcmple>
 8004d06:	bb48      	cbnz	r0, 8004d5c <_printf_float+0xcc>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb ff0c 	bl	8000b2c <__aeabi_dcmplt>
 8004d14:	b110      	cbz	r0, 8004d1c <_printf_float+0x8c>
 8004d16:	232d      	movs	r3, #45	; 0x2d
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	4a93      	ldr	r2, [pc, #588]	; (8004f6c <_printf_float+0x2dc>)
 8004d1e:	4b94      	ldr	r3, [pc, #592]	; (8004f70 <_printf_float+0x2e0>)
 8004d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d24:	bf94      	ite	ls
 8004d26:	4690      	movls	r8, r2
 8004d28:	4698      	movhi	r8, r3
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	9b05      	ldr	r3, [sp, #20]
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	f04f 0900 	mov.w	r9, #0
 8004d3a:	9700      	str	r7, [sp, #0]
 8004d3c:	4633      	mov	r3, r6
 8004d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d40:	4621      	mov	r1, r4
 8004d42:	4628      	mov	r0, r5
 8004d44:	f000 fa82 	bl	800524c <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	f040 8090 	bne.w	8004e6e <_printf_float+0x1de>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d52:	b00d      	add	sp, #52	; 0x34
 8004d54:	ecbd 8b02 	vpop	{d8}
 8004d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb ff0a 	bl	8000b7c <__aeabi_dcmpun>
 8004d68:	b140      	cbz	r0, 8004d7c <_printf_float+0xec>
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bfbc      	itt	lt
 8004d70:	232d      	movlt	r3, #45	; 0x2d
 8004d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004d76:	4a7f      	ldr	r2, [pc, #508]	; (8004f74 <_printf_float+0x2e4>)
 8004d78:	4b7f      	ldr	r3, [pc, #508]	; (8004f78 <_printf_float+0x2e8>)
 8004d7a:	e7d1      	b.n	8004d20 <_printf_float+0x90>
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004d82:	9206      	str	r2, [sp, #24]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	d13f      	bne.n	8004e08 <_printf_float+0x178>
 8004d88:	2306      	movs	r3, #6
 8004d8a:	6063      	str	r3, [r4, #4]
 8004d8c:	9b05      	ldr	r3, [sp, #20]
 8004d8e:	6861      	ldr	r1, [r4, #4]
 8004d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004d94:	2300      	movs	r3, #0
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	ab0a      	add	r3, sp, #40	; 0x28
 8004d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004d9e:	ab09      	add	r3, sp, #36	; 0x24
 8004da0:	ec49 8b10 	vmov	d0, r8, r9
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	6022      	str	r2, [r4, #0]
 8004da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dac:	4628      	mov	r0, r5
 8004dae:	f7ff fecf 	bl	8004b50 <__cvt>
 8004db2:	9b06      	ldr	r3, [sp, #24]
 8004db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004db6:	2b47      	cmp	r3, #71	; 0x47
 8004db8:	4680      	mov	r8, r0
 8004dba:	d108      	bne.n	8004dce <_printf_float+0x13e>
 8004dbc:	1cc8      	adds	r0, r1, #3
 8004dbe:	db02      	blt.n	8004dc6 <_printf_float+0x136>
 8004dc0:	6863      	ldr	r3, [r4, #4]
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	dd41      	ble.n	8004e4a <_printf_float+0x1ba>
 8004dc6:	f1ab 0302 	sub.w	r3, fp, #2
 8004dca:	fa5f fb83 	uxtb.w	fp, r3
 8004dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dd2:	d820      	bhi.n	8004e16 <_printf_float+0x186>
 8004dd4:	3901      	subs	r1, #1
 8004dd6:	465a      	mov	r2, fp
 8004dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8004dde:	f7ff ff19 	bl	8004c14 <__exponent>
 8004de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004de4:	1813      	adds	r3, r2, r0
 8004de6:	2a01      	cmp	r2, #1
 8004de8:	4681      	mov	r9, r0
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	dc02      	bgt.n	8004df4 <_printf_float+0x164>
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	07d2      	lsls	r2, r2, #31
 8004df2:	d501      	bpl.n	8004df8 <_printf_float+0x168>
 8004df4:	3301      	adds	r3, #1
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d09c      	beq.n	8004d3a <_printf_float+0xaa>
 8004e00:	232d      	movs	r3, #45	; 0x2d
 8004e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e06:	e798      	b.n	8004d3a <_printf_float+0xaa>
 8004e08:	9a06      	ldr	r2, [sp, #24]
 8004e0a:	2a47      	cmp	r2, #71	; 0x47
 8004e0c:	d1be      	bne.n	8004d8c <_printf_float+0xfc>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1bc      	bne.n	8004d8c <_printf_float+0xfc>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7b9      	b.n	8004d8a <_printf_float+0xfa>
 8004e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e1a:	d118      	bne.n	8004e4e <_printf_float+0x1be>
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	dd0b      	ble.n	8004e3a <_printf_float+0x1aa>
 8004e22:	6121      	str	r1, [r4, #16]
 8004e24:	b913      	cbnz	r3, 8004e2c <_printf_float+0x19c>
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	07d0      	lsls	r0, r2, #31
 8004e2a:	d502      	bpl.n	8004e32 <_printf_float+0x1a2>
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	440b      	add	r3, r1
 8004e30:	6123      	str	r3, [r4, #16]
 8004e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e34:	f04f 0900 	mov.w	r9, #0
 8004e38:	e7de      	b.n	8004df8 <_printf_float+0x168>
 8004e3a:	b913      	cbnz	r3, 8004e42 <_printf_float+0x1b2>
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	07d2      	lsls	r2, r2, #31
 8004e40:	d501      	bpl.n	8004e46 <_printf_float+0x1b6>
 8004e42:	3302      	adds	r3, #2
 8004e44:	e7f4      	b.n	8004e30 <_printf_float+0x1a0>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e7f2      	b.n	8004e30 <_printf_float+0x1a0>
 8004e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e50:	4299      	cmp	r1, r3
 8004e52:	db05      	blt.n	8004e60 <_printf_float+0x1d0>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	6121      	str	r1, [r4, #16]
 8004e58:	07d8      	lsls	r0, r3, #31
 8004e5a:	d5ea      	bpl.n	8004e32 <_printf_float+0x1a2>
 8004e5c:	1c4b      	adds	r3, r1, #1
 8004e5e:	e7e7      	b.n	8004e30 <_printf_float+0x1a0>
 8004e60:	2900      	cmp	r1, #0
 8004e62:	bfd4      	ite	le
 8004e64:	f1c1 0202 	rsble	r2, r1, #2
 8004e68:	2201      	movgt	r2, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	e7e0      	b.n	8004e30 <_printf_float+0x1a0>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	055a      	lsls	r2, r3, #21
 8004e72:	d407      	bmi.n	8004e84 <_printf_float+0x1f4>
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	4642      	mov	r2, r8
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d12c      	bne.n	8004edc <_printf_float+0x24c>
 8004e82:	e764      	b.n	8004d4e <_printf_float+0xbe>
 8004e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e88:	f240 80e0 	bls.w	800504c <_printf_float+0x3bc>
 8004e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e90:	2200      	movs	r2, #0
 8004e92:	2300      	movs	r3, #0
 8004e94:	f7fb fe40 	bl	8000b18 <__aeabi_dcmpeq>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d034      	beq.n	8004f06 <_printf_float+0x276>
 8004e9c:	4a37      	ldr	r2, [pc, #220]	; (8004f7c <_printf_float+0x2ec>)
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4631      	mov	r1, r6
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b8      	blx	r7
 8004ea6:	3001      	adds	r0, #1
 8004ea8:	f43f af51 	beq.w	8004d4e <_printf_float+0xbe>
 8004eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	db02      	blt.n	8004eba <_printf_float+0x22a>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	07d8      	lsls	r0, r3, #31
 8004eb8:	d510      	bpl.n	8004edc <_printf_float+0x24c>
 8004eba:	ee18 3a10 	vmov	r3, s16
 8004ebe:	4652      	mov	r2, sl
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	47b8      	blx	r7
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	f43f af41 	beq.w	8004d4e <_printf_float+0xbe>
 8004ecc:	f04f 0800 	mov.w	r8, #0
 8004ed0:	f104 091a 	add.w	r9, r4, #26
 8004ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	4543      	cmp	r3, r8
 8004eda:	dc09      	bgt.n	8004ef0 <_printf_float+0x260>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	079b      	lsls	r3, r3, #30
 8004ee0:	f100 8107 	bmi.w	80050f2 <_printf_float+0x462>
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ee8:	4298      	cmp	r0, r3
 8004eea:	bfb8      	it	lt
 8004eec:	4618      	movlt	r0, r3
 8004eee:	e730      	b.n	8004d52 <_printf_float+0xc2>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	464a      	mov	r2, r9
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	f43f af27 	beq.w	8004d4e <_printf_float+0xbe>
 8004f00:	f108 0801 	add.w	r8, r8, #1
 8004f04:	e7e6      	b.n	8004ed4 <_printf_float+0x244>
 8004f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	dc39      	bgt.n	8004f80 <_printf_float+0x2f0>
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <_printf_float+0x2ec>)
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4631      	mov	r1, r6
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	f43f af19 	beq.w	8004d4e <_printf_float+0xbe>
 8004f1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d102      	bne.n	8004f2a <_printf_float+0x29a>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07d9      	lsls	r1, r3, #31
 8004f28:	d5d8      	bpl.n	8004edc <_printf_float+0x24c>
 8004f2a:	ee18 3a10 	vmov	r3, s16
 8004f2e:	4652      	mov	r2, sl
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f af09 	beq.w	8004d4e <_printf_float+0xbe>
 8004f3c:	f04f 0900 	mov.w	r9, #0
 8004f40:	f104 0a1a 	add.w	sl, r4, #26
 8004f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f46:	425b      	negs	r3, r3
 8004f48:	454b      	cmp	r3, r9
 8004f4a:	dc01      	bgt.n	8004f50 <_printf_float+0x2c0>
 8004f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4e:	e792      	b.n	8004e76 <_printf_float+0x1e6>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4652      	mov	r2, sl
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f aef7 	beq.w	8004d4e <_printf_float+0xbe>
 8004f60:	f109 0901 	add.w	r9, r9, #1
 8004f64:	e7ee      	b.n	8004f44 <_printf_float+0x2b4>
 8004f66:	bf00      	nop
 8004f68:	7fefffff 	.word	0x7fefffff
 8004f6c:	08009530 	.word	0x08009530
 8004f70:	08009534 	.word	0x08009534
 8004f74:	08009538 	.word	0x08009538
 8004f78:	0800953c 	.word	0x0800953c
 8004f7c:	08009540 	.word	0x08009540
 8004f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f84:	429a      	cmp	r2, r3
 8004f86:	bfa8      	it	ge
 8004f88:	461a      	movge	r2, r3
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	4691      	mov	r9, r2
 8004f8e:	dc37      	bgt.n	8005000 <_printf_float+0x370>
 8004f90:	f04f 0b00 	mov.w	fp, #0
 8004f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f98:	f104 021a 	add.w	r2, r4, #26
 8004f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f9e:	9305      	str	r3, [sp, #20]
 8004fa0:	eba3 0309 	sub.w	r3, r3, r9
 8004fa4:	455b      	cmp	r3, fp
 8004fa6:	dc33      	bgt.n	8005010 <_printf_float+0x380>
 8004fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fac:	429a      	cmp	r2, r3
 8004fae:	db3b      	blt.n	8005028 <_printf_float+0x398>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	07da      	lsls	r2, r3, #31
 8004fb4:	d438      	bmi.n	8005028 <_printf_float+0x398>
 8004fb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004fba:	eba2 0903 	sub.w	r9, r2, r3
 8004fbe:	9b05      	ldr	r3, [sp, #20]
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	4591      	cmp	r9, r2
 8004fc4:	bfa8      	it	ge
 8004fc6:	4691      	movge	r9, r2
 8004fc8:	f1b9 0f00 	cmp.w	r9, #0
 8004fcc:	dc35      	bgt.n	800503a <_printf_float+0x3aa>
 8004fce:	f04f 0800 	mov.w	r8, #0
 8004fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd6:	f104 0a1a 	add.w	sl, r4, #26
 8004fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	eba3 0309 	sub.w	r3, r3, r9
 8004fe4:	4543      	cmp	r3, r8
 8004fe6:	f77f af79 	ble.w	8004edc <_printf_float+0x24c>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4652      	mov	r2, sl
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f aeaa 	beq.w	8004d4e <_printf_float+0xbe>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	e7ec      	b.n	8004fda <_printf_float+0x34a>
 8005000:	4613      	mov	r3, r2
 8005002:	4631      	mov	r1, r6
 8005004:	4642      	mov	r2, r8
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	d1c0      	bne.n	8004f90 <_printf_float+0x300>
 800500e:	e69e      	b.n	8004d4e <_printf_float+0xbe>
 8005010:	2301      	movs	r3, #1
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	9205      	str	r2, [sp, #20]
 8005018:	47b8      	blx	r7
 800501a:	3001      	adds	r0, #1
 800501c:	f43f ae97 	beq.w	8004d4e <_printf_float+0xbe>
 8005020:	9a05      	ldr	r2, [sp, #20]
 8005022:	f10b 0b01 	add.w	fp, fp, #1
 8005026:	e7b9      	b.n	8004f9c <_printf_float+0x30c>
 8005028:	ee18 3a10 	vmov	r3, s16
 800502c:	4652      	mov	r2, sl
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	d1be      	bne.n	8004fb6 <_printf_float+0x326>
 8005038:	e689      	b.n	8004d4e <_printf_float+0xbe>
 800503a:	9a05      	ldr	r2, [sp, #20]
 800503c:	464b      	mov	r3, r9
 800503e:	4442      	add	r2, r8
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	d1c1      	bne.n	8004fce <_printf_float+0x33e>
 800504a:	e680      	b.n	8004d4e <_printf_float+0xbe>
 800504c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800504e:	2a01      	cmp	r2, #1
 8005050:	dc01      	bgt.n	8005056 <_printf_float+0x3c6>
 8005052:	07db      	lsls	r3, r3, #31
 8005054:	d53a      	bpl.n	80050cc <_printf_float+0x43c>
 8005056:	2301      	movs	r3, #1
 8005058:	4642      	mov	r2, r8
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f ae74 	beq.w	8004d4e <_printf_float+0xbe>
 8005066:	ee18 3a10 	vmov	r3, s16
 800506a:	4652      	mov	r2, sl
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f ae6b 	beq.w	8004d4e <_printf_float+0xbe>
 8005078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800507c:	2200      	movs	r2, #0
 800507e:	2300      	movs	r3, #0
 8005080:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005084:	f7fb fd48 	bl	8000b18 <__aeabi_dcmpeq>
 8005088:	b9d8      	cbnz	r0, 80050c2 <_printf_float+0x432>
 800508a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800508e:	f108 0201 	add.w	r2, r8, #1
 8005092:	4631      	mov	r1, r6
 8005094:	4628      	mov	r0, r5
 8005096:	47b8      	blx	r7
 8005098:	3001      	adds	r0, #1
 800509a:	d10e      	bne.n	80050ba <_printf_float+0x42a>
 800509c:	e657      	b.n	8004d4e <_printf_float+0xbe>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	f43f ae50 	beq.w	8004d4e <_printf_float+0xbe>
 80050ae:	f108 0801 	add.w	r8, r8, #1
 80050b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	4543      	cmp	r3, r8
 80050b8:	dcf1      	bgt.n	800509e <_printf_float+0x40e>
 80050ba:	464b      	mov	r3, r9
 80050bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050c0:	e6da      	b.n	8004e78 <_printf_float+0x1e8>
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	f104 0a1a 	add.w	sl, r4, #26
 80050ca:	e7f2      	b.n	80050b2 <_printf_float+0x422>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4642      	mov	r2, r8
 80050d0:	e7df      	b.n	8005092 <_printf_float+0x402>
 80050d2:	2301      	movs	r3, #1
 80050d4:	464a      	mov	r2, r9
 80050d6:	4631      	mov	r1, r6
 80050d8:	4628      	mov	r0, r5
 80050da:	47b8      	blx	r7
 80050dc:	3001      	adds	r0, #1
 80050de:	f43f ae36 	beq.w	8004d4e <_printf_float+0xbe>
 80050e2:	f108 0801 	add.w	r8, r8, #1
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050ea:	1a5b      	subs	r3, r3, r1
 80050ec:	4543      	cmp	r3, r8
 80050ee:	dcf0      	bgt.n	80050d2 <_printf_float+0x442>
 80050f0:	e6f8      	b.n	8004ee4 <_printf_float+0x254>
 80050f2:	f04f 0800 	mov.w	r8, #0
 80050f6:	f104 0919 	add.w	r9, r4, #25
 80050fa:	e7f4      	b.n	80050e6 <_printf_float+0x456>

080050fc <malloc>:
 80050fc:	4b02      	ldr	r3, [pc, #8]	; (8005108 <malloc+0xc>)
 80050fe:	4601      	mov	r1, r0
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	f000 b823 	b.w	800514c <_malloc_r>
 8005106:	bf00      	nop
 8005108:	20000204 	.word	0x20000204

0800510c <sbrk_aligned>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0e      	ldr	r6, [pc, #56]	; (8005148 <sbrk_aligned+0x3c>)
 8005110:	460c      	mov	r4, r1
 8005112:	6831      	ldr	r1, [r6, #0]
 8005114:	4605      	mov	r5, r0
 8005116:	b911      	cbnz	r1, 800511e <sbrk_aligned+0x12>
 8005118:	f001 fd26 	bl	8006b68 <_sbrk_r>
 800511c:	6030      	str	r0, [r6, #0]
 800511e:	4621      	mov	r1, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f001 fd21 	bl	8006b68 <_sbrk_r>
 8005126:	1c43      	adds	r3, r0, #1
 8005128:	d00a      	beq.n	8005140 <sbrk_aligned+0x34>
 800512a:	1cc4      	adds	r4, r0, #3
 800512c:	f024 0403 	bic.w	r4, r4, #3
 8005130:	42a0      	cmp	r0, r4
 8005132:	d007      	beq.n	8005144 <sbrk_aligned+0x38>
 8005134:	1a21      	subs	r1, r4, r0
 8005136:	4628      	mov	r0, r5
 8005138:	f001 fd16 	bl	8006b68 <_sbrk_r>
 800513c:	3001      	adds	r0, #1
 800513e:	d101      	bne.n	8005144 <sbrk_aligned+0x38>
 8005140:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005144:	4620      	mov	r0, r4
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	2000038c 	.word	0x2000038c

0800514c <_malloc_r>:
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	1ccd      	adds	r5, r1, #3
 8005152:	f025 0503 	bic.w	r5, r5, #3
 8005156:	3508      	adds	r5, #8
 8005158:	2d0c      	cmp	r5, #12
 800515a:	bf38      	it	cc
 800515c:	250c      	movcc	r5, #12
 800515e:	2d00      	cmp	r5, #0
 8005160:	4607      	mov	r7, r0
 8005162:	db01      	blt.n	8005168 <_malloc_r+0x1c>
 8005164:	42a9      	cmp	r1, r5
 8005166:	d905      	bls.n	8005174 <_malloc_r+0x28>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	2600      	movs	r6, #0
 800516e:	4630      	mov	r0, r6
 8005170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005248 <_malloc_r+0xfc>
 8005178:	f000 fcbe 	bl	8005af8 <__malloc_lock>
 800517c:	f8d8 3000 	ldr.w	r3, [r8]
 8005180:	461c      	mov	r4, r3
 8005182:	bb5c      	cbnz	r4, 80051dc <_malloc_r+0x90>
 8005184:	4629      	mov	r1, r5
 8005186:	4638      	mov	r0, r7
 8005188:	f7ff ffc0 	bl	800510c <sbrk_aligned>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	4604      	mov	r4, r0
 8005190:	d155      	bne.n	800523e <_malloc_r+0xf2>
 8005192:	f8d8 4000 	ldr.w	r4, [r8]
 8005196:	4626      	mov	r6, r4
 8005198:	2e00      	cmp	r6, #0
 800519a:	d145      	bne.n	8005228 <_malloc_r+0xdc>
 800519c:	2c00      	cmp	r4, #0
 800519e:	d048      	beq.n	8005232 <_malloc_r+0xe6>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	4631      	mov	r1, r6
 80051a4:	4638      	mov	r0, r7
 80051a6:	eb04 0903 	add.w	r9, r4, r3
 80051aa:	f001 fcdd 	bl	8006b68 <_sbrk_r>
 80051ae:	4581      	cmp	r9, r0
 80051b0:	d13f      	bne.n	8005232 <_malloc_r+0xe6>
 80051b2:	6821      	ldr	r1, [r4, #0]
 80051b4:	1a6d      	subs	r5, r5, r1
 80051b6:	4629      	mov	r1, r5
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ffa7 	bl	800510c <sbrk_aligned>
 80051be:	3001      	adds	r0, #1
 80051c0:	d037      	beq.n	8005232 <_malloc_r+0xe6>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	442b      	add	r3, r5
 80051c6:	6023      	str	r3, [r4, #0]
 80051c8:	f8d8 3000 	ldr.w	r3, [r8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d038      	beq.n	8005242 <_malloc_r+0xf6>
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	42a2      	cmp	r2, r4
 80051d4:	d12b      	bne.n	800522e <_malloc_r+0xe2>
 80051d6:	2200      	movs	r2, #0
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	e00f      	b.n	80051fc <_malloc_r+0xb0>
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	1b52      	subs	r2, r2, r5
 80051e0:	d41f      	bmi.n	8005222 <_malloc_r+0xd6>
 80051e2:	2a0b      	cmp	r2, #11
 80051e4:	d917      	bls.n	8005216 <_malloc_r+0xca>
 80051e6:	1961      	adds	r1, r4, r5
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	6025      	str	r5, [r4, #0]
 80051ec:	bf18      	it	ne
 80051ee:	6059      	strne	r1, [r3, #4]
 80051f0:	6863      	ldr	r3, [r4, #4]
 80051f2:	bf08      	it	eq
 80051f4:	f8c8 1000 	streq.w	r1, [r8]
 80051f8:	5162      	str	r2, [r4, r5]
 80051fa:	604b      	str	r3, [r1, #4]
 80051fc:	4638      	mov	r0, r7
 80051fe:	f104 060b 	add.w	r6, r4, #11
 8005202:	f000 fc7f 	bl	8005b04 <__malloc_unlock>
 8005206:	f026 0607 	bic.w	r6, r6, #7
 800520a:	1d23      	adds	r3, r4, #4
 800520c:	1af2      	subs	r2, r6, r3
 800520e:	d0ae      	beq.n	800516e <_malloc_r+0x22>
 8005210:	1b9b      	subs	r3, r3, r6
 8005212:	50a3      	str	r3, [r4, r2]
 8005214:	e7ab      	b.n	800516e <_malloc_r+0x22>
 8005216:	42a3      	cmp	r3, r4
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	d1dd      	bne.n	80051d8 <_malloc_r+0x8c>
 800521c:	f8c8 2000 	str.w	r2, [r8]
 8005220:	e7ec      	b.n	80051fc <_malloc_r+0xb0>
 8005222:	4623      	mov	r3, r4
 8005224:	6864      	ldr	r4, [r4, #4]
 8005226:	e7ac      	b.n	8005182 <_malloc_r+0x36>
 8005228:	4634      	mov	r4, r6
 800522a:	6876      	ldr	r6, [r6, #4]
 800522c:	e7b4      	b.n	8005198 <_malloc_r+0x4c>
 800522e:	4613      	mov	r3, r2
 8005230:	e7cc      	b.n	80051cc <_malloc_r+0x80>
 8005232:	230c      	movs	r3, #12
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4638      	mov	r0, r7
 8005238:	f000 fc64 	bl	8005b04 <__malloc_unlock>
 800523c:	e797      	b.n	800516e <_malloc_r+0x22>
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	e7dc      	b.n	80051fc <_malloc_r+0xb0>
 8005242:	605b      	str	r3, [r3, #4]
 8005244:	deff      	udf	#255	; 0xff
 8005246:	bf00      	nop
 8005248:	20000388 	.word	0x20000388

0800524c <_printf_common>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	4616      	mov	r6, r2
 8005252:	4699      	mov	r9, r3
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	690b      	ldr	r3, [r1, #16]
 8005258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800525c:	4293      	cmp	r3, r2
 800525e:	bfb8      	it	lt
 8005260:	4613      	movlt	r3, r2
 8005262:	6033      	str	r3, [r6, #0]
 8005264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005268:	4607      	mov	r7, r0
 800526a:	460c      	mov	r4, r1
 800526c:	b10a      	cbz	r2, 8005272 <_printf_common+0x26>
 800526e:	3301      	adds	r3, #1
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	6833      	ldrmi	r3, [r6, #0]
 800527a:	3302      	addmi	r3, #2
 800527c:	6033      	strmi	r3, [r6, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	f015 0506 	ands.w	r5, r5, #6
 8005284:	d106      	bne.n	8005294 <_printf_common+0x48>
 8005286:	f104 0a19 	add.w	sl, r4, #25
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	6832      	ldr	r2, [r6, #0]
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	42ab      	cmp	r3, r5
 8005292:	dc26      	bgt.n	80052e2 <_printf_common+0x96>
 8005294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005298:	1e13      	subs	r3, r2, #0
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	bf18      	it	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	0692      	lsls	r2, r2, #26
 80052a2:	d42b      	bmi.n	80052fc <_printf_common+0xb0>
 80052a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a8:	4649      	mov	r1, r9
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c0      	blx	r8
 80052ae:	3001      	adds	r0, #1
 80052b0:	d01e      	beq.n	80052f0 <_printf_common+0xa4>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	6922      	ldr	r2, [r4, #16]
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	bf02      	ittt	eq
 80052be:	68e5      	ldreq	r5, [r4, #12]
 80052c0:	6833      	ldreq	r3, [r6, #0]
 80052c2:	1aed      	subeq	r5, r5, r3
 80052c4:	68a3      	ldr	r3, [r4, #8]
 80052c6:	bf0c      	ite	eq
 80052c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052cc:	2500      	movne	r5, #0
 80052ce:	4293      	cmp	r3, r2
 80052d0:	bfc4      	itt	gt
 80052d2:	1a9b      	subgt	r3, r3, r2
 80052d4:	18ed      	addgt	r5, r5, r3
 80052d6:	2600      	movs	r6, #0
 80052d8:	341a      	adds	r4, #26
 80052da:	42b5      	cmp	r5, r6
 80052dc:	d11a      	bne.n	8005314 <_printf_common+0xc8>
 80052de:	2000      	movs	r0, #0
 80052e0:	e008      	b.n	80052f4 <_printf_common+0xa8>
 80052e2:	2301      	movs	r3, #1
 80052e4:	4652      	mov	r2, sl
 80052e6:	4649      	mov	r1, r9
 80052e8:	4638      	mov	r0, r7
 80052ea:	47c0      	blx	r8
 80052ec:	3001      	adds	r0, #1
 80052ee:	d103      	bne.n	80052f8 <_printf_common+0xac>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7c6      	b.n	800528a <_printf_common+0x3e>
 80052fc:	18e1      	adds	r1, r4, r3
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	2030      	movs	r0, #48	; 0x30
 8005302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005306:	4422      	add	r2, r4
 8005308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800530c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005310:	3302      	adds	r3, #2
 8005312:	e7c7      	b.n	80052a4 <_printf_common+0x58>
 8005314:	2301      	movs	r3, #1
 8005316:	4622      	mov	r2, r4
 8005318:	4649      	mov	r1, r9
 800531a:	4638      	mov	r0, r7
 800531c:	47c0      	blx	r8
 800531e:	3001      	adds	r0, #1
 8005320:	d0e6      	beq.n	80052f0 <_printf_common+0xa4>
 8005322:	3601      	adds	r6, #1
 8005324:	e7d9      	b.n	80052da <_printf_common+0x8e>
	...

08005328 <_printf_i>:
 8005328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	7e0f      	ldrb	r7, [r1, #24]
 800532e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005330:	2f78      	cmp	r7, #120	; 0x78
 8005332:	4691      	mov	r9, r2
 8005334:	4680      	mov	r8, r0
 8005336:	460c      	mov	r4, r1
 8005338:	469a      	mov	sl, r3
 800533a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800533e:	d807      	bhi.n	8005350 <_printf_i+0x28>
 8005340:	2f62      	cmp	r7, #98	; 0x62
 8005342:	d80a      	bhi.n	800535a <_printf_i+0x32>
 8005344:	2f00      	cmp	r7, #0
 8005346:	f000 80d4 	beq.w	80054f2 <_printf_i+0x1ca>
 800534a:	2f58      	cmp	r7, #88	; 0x58
 800534c:	f000 80c0 	beq.w	80054d0 <_printf_i+0x1a8>
 8005350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005358:	e03a      	b.n	80053d0 <_printf_i+0xa8>
 800535a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800535e:	2b15      	cmp	r3, #21
 8005360:	d8f6      	bhi.n	8005350 <_printf_i+0x28>
 8005362:	a101      	add	r1, pc, #4	; (adr r1, 8005368 <_printf_i+0x40>)
 8005364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005368:	080053c1 	.word	0x080053c1
 800536c:	080053d5 	.word	0x080053d5
 8005370:	08005351 	.word	0x08005351
 8005374:	08005351 	.word	0x08005351
 8005378:	08005351 	.word	0x08005351
 800537c:	08005351 	.word	0x08005351
 8005380:	080053d5 	.word	0x080053d5
 8005384:	08005351 	.word	0x08005351
 8005388:	08005351 	.word	0x08005351
 800538c:	08005351 	.word	0x08005351
 8005390:	08005351 	.word	0x08005351
 8005394:	080054d9 	.word	0x080054d9
 8005398:	08005401 	.word	0x08005401
 800539c:	08005493 	.word	0x08005493
 80053a0:	08005351 	.word	0x08005351
 80053a4:	08005351 	.word	0x08005351
 80053a8:	080054fb 	.word	0x080054fb
 80053ac:	08005351 	.word	0x08005351
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005351 	.word	0x08005351
 80053b8:	08005351 	.word	0x08005351
 80053bc:	0800549b 	.word	0x0800549b
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d0:	2301      	movs	r3, #1
 80053d2:	e09f      	b.n	8005514 <_printf_i+0x1ec>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	0607      	lsls	r7, r0, #24
 80053da:	f103 0104 	add.w	r1, r3, #4
 80053de:	6029      	str	r1, [r5, #0]
 80053e0:	d501      	bpl.n	80053e6 <_printf_i+0xbe>
 80053e2:	681e      	ldr	r6, [r3, #0]
 80053e4:	e003      	b.n	80053ee <_printf_i+0xc6>
 80053e6:	0646      	lsls	r6, r0, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0xba>
 80053ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	da03      	bge.n	80053fa <_printf_i+0xd2>
 80053f2:	232d      	movs	r3, #45	; 0x2d
 80053f4:	4276      	negs	r6, r6
 80053f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fa:	485a      	ldr	r0, [pc, #360]	; (8005564 <_printf_i+0x23c>)
 80053fc:	230a      	movs	r3, #10
 80053fe:	e012      	b.n	8005426 <_printf_i+0xfe>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	1d19      	adds	r1, r3, #4
 8005406:	6029      	str	r1, [r5, #0]
 8005408:	0605      	lsls	r5, r0, #24
 800540a:	d501      	bpl.n	8005410 <_printf_i+0xe8>
 800540c:	681e      	ldr	r6, [r3, #0]
 800540e:	e002      	b.n	8005416 <_printf_i+0xee>
 8005410:	0641      	lsls	r1, r0, #25
 8005412:	d5fb      	bpl.n	800540c <_printf_i+0xe4>
 8005414:	881e      	ldrh	r6, [r3, #0]
 8005416:	4853      	ldr	r0, [pc, #332]	; (8005564 <_printf_i+0x23c>)
 8005418:	2f6f      	cmp	r7, #111	; 0x6f
 800541a:	bf0c      	ite	eq
 800541c:	2308      	moveq	r3, #8
 800541e:	230a      	movne	r3, #10
 8005420:	2100      	movs	r1, #0
 8005422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005426:	6865      	ldr	r5, [r4, #4]
 8005428:	60a5      	str	r5, [r4, #8]
 800542a:	2d00      	cmp	r5, #0
 800542c:	bfa2      	ittt	ge
 800542e:	6821      	ldrge	r1, [r4, #0]
 8005430:	f021 0104 	bicge.w	r1, r1, #4
 8005434:	6021      	strge	r1, [r4, #0]
 8005436:	b90e      	cbnz	r6, 800543c <_printf_i+0x114>
 8005438:	2d00      	cmp	r5, #0
 800543a:	d04b      	beq.n	80054d4 <_printf_i+0x1ac>
 800543c:	4615      	mov	r5, r2
 800543e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005442:	fb03 6711 	mls	r7, r3, r1, r6
 8005446:	5dc7      	ldrb	r7, [r0, r7]
 8005448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800544c:	4637      	mov	r7, r6
 800544e:	42bb      	cmp	r3, r7
 8005450:	460e      	mov	r6, r1
 8005452:	d9f4      	bls.n	800543e <_printf_i+0x116>
 8005454:	2b08      	cmp	r3, #8
 8005456:	d10b      	bne.n	8005470 <_printf_i+0x148>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07de      	lsls	r6, r3, #31
 800545c:	d508      	bpl.n	8005470 <_printf_i+0x148>
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	6861      	ldr	r1, [r4, #4]
 8005462:	4299      	cmp	r1, r3
 8005464:	bfde      	ittt	le
 8005466:	2330      	movle	r3, #48	; 0x30
 8005468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800546c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005470:	1b52      	subs	r2, r2, r5
 8005472:	6122      	str	r2, [r4, #16]
 8005474:	f8cd a000 	str.w	sl, [sp]
 8005478:	464b      	mov	r3, r9
 800547a:	aa03      	add	r2, sp, #12
 800547c:	4621      	mov	r1, r4
 800547e:	4640      	mov	r0, r8
 8005480:	f7ff fee4 	bl	800524c <_printf_common>
 8005484:	3001      	adds	r0, #1
 8005486:	d14a      	bne.n	800551e <_printf_i+0x1f6>
 8005488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800548c:	b004      	add	sp, #16
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f043 0320 	orr.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	4833      	ldr	r0, [pc, #204]	; (8005568 <_printf_i+0x240>)
 800549c:	2778      	movs	r7, #120	; 0x78
 800549e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	6829      	ldr	r1, [r5, #0]
 80054a6:	061f      	lsls	r7, r3, #24
 80054a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80054ac:	d402      	bmi.n	80054b4 <_printf_i+0x18c>
 80054ae:	065f      	lsls	r7, r3, #25
 80054b0:	bf48      	it	mi
 80054b2:	b2b6      	uxthmi	r6, r6
 80054b4:	07df      	lsls	r7, r3, #31
 80054b6:	bf48      	it	mi
 80054b8:	f043 0320 	orrmi.w	r3, r3, #32
 80054bc:	6029      	str	r1, [r5, #0]
 80054be:	bf48      	it	mi
 80054c0:	6023      	strmi	r3, [r4, #0]
 80054c2:	b91e      	cbnz	r6, 80054cc <_printf_i+0x1a4>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f023 0320 	bic.w	r3, r3, #32
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	2310      	movs	r3, #16
 80054ce:	e7a7      	b.n	8005420 <_printf_i+0xf8>
 80054d0:	4824      	ldr	r0, [pc, #144]	; (8005564 <_printf_i+0x23c>)
 80054d2:	e7e4      	b.n	800549e <_printf_i+0x176>
 80054d4:	4615      	mov	r5, r2
 80054d6:	e7bd      	b.n	8005454 <_printf_i+0x12c>
 80054d8:	682b      	ldr	r3, [r5, #0]
 80054da:	6826      	ldr	r6, [r4, #0]
 80054dc:	6961      	ldr	r1, [r4, #20]
 80054de:	1d18      	adds	r0, r3, #4
 80054e0:	6028      	str	r0, [r5, #0]
 80054e2:	0635      	lsls	r5, r6, #24
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0x1c4>
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	e002      	b.n	80054f2 <_printf_i+0x1ca>
 80054ec:	0670      	lsls	r0, r6, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0x1c0>
 80054f0:	8019      	strh	r1, [r3, #0]
 80054f2:	2300      	movs	r3, #0
 80054f4:	6123      	str	r3, [r4, #16]
 80054f6:	4615      	mov	r5, r2
 80054f8:	e7bc      	b.n	8005474 <_printf_i+0x14c>
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	602a      	str	r2, [r5, #0]
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	2100      	movs	r1, #0
 8005506:	4628      	mov	r0, r5
 8005508:	f7fa fe8a 	bl	8000220 <memchr>
 800550c:	b108      	cbz	r0, 8005512 <_printf_i+0x1ea>
 800550e:	1b40      	subs	r0, r0, r5
 8005510:	6060      	str	r0, [r4, #4]
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	6123      	str	r3, [r4, #16]
 8005516:	2300      	movs	r3, #0
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800551c:	e7aa      	b.n	8005474 <_printf_i+0x14c>
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	462a      	mov	r2, r5
 8005522:	4649      	mov	r1, r9
 8005524:	4640      	mov	r0, r8
 8005526:	47d0      	blx	sl
 8005528:	3001      	adds	r0, #1
 800552a:	d0ad      	beq.n	8005488 <_printf_i+0x160>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d413      	bmi.n	800555a <_printf_i+0x232>
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	4298      	cmp	r0, r3
 8005538:	bfb8      	it	lt
 800553a:	4618      	movlt	r0, r3
 800553c:	e7a6      	b.n	800548c <_printf_i+0x164>
 800553e:	2301      	movs	r3, #1
 8005540:	4632      	mov	r2, r6
 8005542:	4649      	mov	r1, r9
 8005544:	4640      	mov	r0, r8
 8005546:	47d0      	blx	sl
 8005548:	3001      	adds	r0, #1
 800554a:	d09d      	beq.n	8005488 <_printf_i+0x160>
 800554c:	3501      	adds	r5, #1
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	9903      	ldr	r1, [sp, #12]
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	42ab      	cmp	r3, r5
 8005556:	dcf2      	bgt.n	800553e <_printf_i+0x216>
 8005558:	e7eb      	b.n	8005532 <_printf_i+0x20a>
 800555a:	2500      	movs	r5, #0
 800555c:	f104 0619 	add.w	r6, r4, #25
 8005560:	e7f5      	b.n	800554e <_printf_i+0x226>
 8005562:	bf00      	nop
 8005564:	08009542 	.word	0x08009542
 8005568:	08009553 	.word	0x08009553

0800556c <_scanf_float>:
 800556c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005570:	b087      	sub	sp, #28
 8005572:	4617      	mov	r7, r2
 8005574:	9303      	str	r3, [sp, #12]
 8005576:	688b      	ldr	r3, [r1, #8]
 8005578:	1e5a      	subs	r2, r3, #1
 800557a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800557e:	bf83      	ittte	hi
 8005580:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005584:	195b      	addhi	r3, r3, r5
 8005586:	9302      	strhi	r3, [sp, #8]
 8005588:	2300      	movls	r3, #0
 800558a:	bf86      	itte	hi
 800558c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005590:	608b      	strhi	r3, [r1, #8]
 8005592:	9302      	strls	r3, [sp, #8]
 8005594:	680b      	ldr	r3, [r1, #0]
 8005596:	468b      	mov	fp, r1
 8005598:	2500      	movs	r5, #0
 800559a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800559e:	f84b 3b1c 	str.w	r3, [fp], #28
 80055a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055a6:	4680      	mov	r8, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	465e      	mov	r6, fp
 80055ac:	46aa      	mov	sl, r5
 80055ae:	46a9      	mov	r9, r5
 80055b0:	9501      	str	r5, [sp, #4]
 80055b2:	68a2      	ldr	r2, [r4, #8]
 80055b4:	b152      	cbz	r2, 80055cc <_scanf_float+0x60>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b4e      	cmp	r3, #78	; 0x4e
 80055bc:	d864      	bhi.n	8005688 <_scanf_float+0x11c>
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d83c      	bhi.n	800563c <_scanf_float+0xd0>
 80055c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055c6:	b2c8      	uxtb	r0, r1
 80055c8:	280e      	cmp	r0, #14
 80055ca:	d93a      	bls.n	8005642 <_scanf_float+0xd6>
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	d003      	beq.n	80055da <_scanf_float+0x6e>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80055de:	f1ba 0f01 	cmp.w	sl, #1
 80055e2:	f200 8113 	bhi.w	800580c <_scanf_float+0x2a0>
 80055e6:	455e      	cmp	r6, fp
 80055e8:	f200 8105 	bhi.w	80057f6 <_scanf_float+0x28a>
 80055ec:	2501      	movs	r5, #1
 80055ee:	4628      	mov	r0, r5
 80055f0:	b007      	add	sp, #28
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055fa:	2a0d      	cmp	r2, #13
 80055fc:	d8e6      	bhi.n	80055cc <_scanf_float+0x60>
 80055fe:	a101      	add	r1, pc, #4	; (adr r1, 8005604 <_scanf_float+0x98>)
 8005600:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005604:	08005743 	.word	0x08005743
 8005608:	080055cd 	.word	0x080055cd
 800560c:	080055cd 	.word	0x080055cd
 8005610:	080055cd 	.word	0x080055cd
 8005614:	080057a3 	.word	0x080057a3
 8005618:	0800577b 	.word	0x0800577b
 800561c:	080055cd 	.word	0x080055cd
 8005620:	080055cd 	.word	0x080055cd
 8005624:	08005751 	.word	0x08005751
 8005628:	080055cd 	.word	0x080055cd
 800562c:	080055cd 	.word	0x080055cd
 8005630:	080055cd 	.word	0x080055cd
 8005634:	080055cd 	.word	0x080055cd
 8005638:	08005709 	.word	0x08005709
 800563c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005640:	e7db      	b.n	80055fa <_scanf_float+0x8e>
 8005642:	290e      	cmp	r1, #14
 8005644:	d8c2      	bhi.n	80055cc <_scanf_float+0x60>
 8005646:	a001      	add	r0, pc, #4	; (adr r0, 800564c <_scanf_float+0xe0>)
 8005648:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800564c:	080056fb 	.word	0x080056fb
 8005650:	080055cd 	.word	0x080055cd
 8005654:	080056fb 	.word	0x080056fb
 8005658:	0800578f 	.word	0x0800578f
 800565c:	080055cd 	.word	0x080055cd
 8005660:	080056a9 	.word	0x080056a9
 8005664:	080056e5 	.word	0x080056e5
 8005668:	080056e5 	.word	0x080056e5
 800566c:	080056e5 	.word	0x080056e5
 8005670:	080056e5 	.word	0x080056e5
 8005674:	080056e5 	.word	0x080056e5
 8005678:	080056e5 	.word	0x080056e5
 800567c:	080056e5 	.word	0x080056e5
 8005680:	080056e5 	.word	0x080056e5
 8005684:	080056e5 	.word	0x080056e5
 8005688:	2b6e      	cmp	r3, #110	; 0x6e
 800568a:	d809      	bhi.n	80056a0 <_scanf_float+0x134>
 800568c:	2b60      	cmp	r3, #96	; 0x60
 800568e:	d8b2      	bhi.n	80055f6 <_scanf_float+0x8a>
 8005690:	2b54      	cmp	r3, #84	; 0x54
 8005692:	d077      	beq.n	8005784 <_scanf_float+0x218>
 8005694:	2b59      	cmp	r3, #89	; 0x59
 8005696:	d199      	bne.n	80055cc <_scanf_float+0x60>
 8005698:	2d07      	cmp	r5, #7
 800569a:	d197      	bne.n	80055cc <_scanf_float+0x60>
 800569c:	2508      	movs	r5, #8
 800569e:	e029      	b.n	80056f4 <_scanf_float+0x188>
 80056a0:	2b74      	cmp	r3, #116	; 0x74
 80056a2:	d06f      	beq.n	8005784 <_scanf_float+0x218>
 80056a4:	2b79      	cmp	r3, #121	; 0x79
 80056a6:	e7f6      	b.n	8005696 <_scanf_float+0x12a>
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	05c8      	lsls	r0, r1, #23
 80056ac:	d51a      	bpl.n	80056e4 <_scanf_float+0x178>
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056b4:	6021      	str	r1, [r4, #0]
 80056b6:	f109 0901 	add.w	r9, r9, #1
 80056ba:	b11b      	cbz	r3, 80056c4 <_scanf_float+0x158>
 80056bc:	3b01      	subs	r3, #1
 80056be:	3201      	adds	r2, #1
 80056c0:	9302      	str	r3, [sp, #8]
 80056c2:	60a2      	str	r2, [r4, #8]
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	f340 8084 	ble.w	80057e4 <_scanf_float+0x278>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	e766      	b.n	80055b2 <_scanf_float+0x46>
 80056e4:	eb1a 0f05 	cmn.w	sl, r5
 80056e8:	f47f af70 	bne.w	80055cc <_scanf_float+0x60>
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056f2:	6022      	str	r2, [r4, #0]
 80056f4:	f806 3b01 	strb.w	r3, [r6], #1
 80056f8:	e7e4      	b.n	80056c4 <_scanf_float+0x158>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	0610      	lsls	r0, r2, #24
 80056fe:	f57f af65 	bpl.w	80055cc <_scanf_float+0x60>
 8005702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005706:	e7f4      	b.n	80056f2 <_scanf_float+0x186>
 8005708:	f1ba 0f00 	cmp.w	sl, #0
 800570c:	d10e      	bne.n	800572c <_scanf_float+0x1c0>
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	d10e      	bne.n	8005732 <_scanf_float+0x1c6>
 8005714:	6822      	ldr	r2, [r4, #0]
 8005716:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800571a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800571e:	d108      	bne.n	8005732 <_scanf_float+0x1c6>
 8005720:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	f04f 0a01 	mov.w	sl, #1
 800572a:	e7e3      	b.n	80056f4 <_scanf_float+0x188>
 800572c:	f1ba 0f02 	cmp.w	sl, #2
 8005730:	d055      	beq.n	80057de <_scanf_float+0x272>
 8005732:	2d01      	cmp	r5, #1
 8005734:	d002      	beq.n	800573c <_scanf_float+0x1d0>
 8005736:	2d04      	cmp	r5, #4
 8005738:	f47f af48 	bne.w	80055cc <_scanf_float+0x60>
 800573c:	3501      	adds	r5, #1
 800573e:	b2ed      	uxtb	r5, r5
 8005740:	e7d8      	b.n	80056f4 <_scanf_float+0x188>
 8005742:	f1ba 0f01 	cmp.w	sl, #1
 8005746:	f47f af41 	bne.w	80055cc <_scanf_float+0x60>
 800574a:	f04f 0a02 	mov.w	sl, #2
 800574e:	e7d1      	b.n	80056f4 <_scanf_float+0x188>
 8005750:	b97d      	cbnz	r5, 8005772 <_scanf_float+0x206>
 8005752:	f1b9 0f00 	cmp.w	r9, #0
 8005756:	f47f af3c 	bne.w	80055d2 <_scanf_float+0x66>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005760:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005764:	f47f af39 	bne.w	80055da <_scanf_float+0x6e>
 8005768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	2501      	movs	r5, #1
 8005770:	e7c0      	b.n	80056f4 <_scanf_float+0x188>
 8005772:	2d03      	cmp	r5, #3
 8005774:	d0e2      	beq.n	800573c <_scanf_float+0x1d0>
 8005776:	2d05      	cmp	r5, #5
 8005778:	e7de      	b.n	8005738 <_scanf_float+0x1cc>
 800577a:	2d02      	cmp	r5, #2
 800577c:	f47f af26 	bne.w	80055cc <_scanf_float+0x60>
 8005780:	2503      	movs	r5, #3
 8005782:	e7b7      	b.n	80056f4 <_scanf_float+0x188>
 8005784:	2d06      	cmp	r5, #6
 8005786:	f47f af21 	bne.w	80055cc <_scanf_float+0x60>
 800578a:	2507      	movs	r5, #7
 800578c:	e7b2      	b.n	80056f4 <_scanf_float+0x188>
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	0591      	lsls	r1, r2, #22
 8005792:	f57f af1b 	bpl.w	80055cc <_scanf_float+0x60>
 8005796:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	f8cd 9004 	str.w	r9, [sp, #4]
 80057a0:	e7a8      	b.n	80056f4 <_scanf_float+0x188>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057ac:	d006      	beq.n	80057bc <_scanf_float+0x250>
 80057ae:	0550      	lsls	r0, r2, #21
 80057b0:	f57f af0c 	bpl.w	80055cc <_scanf_float+0x60>
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	f43f af0f 	beq.w	80055da <_scanf_float+0x6e>
 80057bc:	0591      	lsls	r1, r2, #22
 80057be:	bf58      	it	pl
 80057c0:	9901      	ldrpl	r1, [sp, #4]
 80057c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057c6:	bf58      	it	pl
 80057c8:	eba9 0101 	subpl.w	r1, r9, r1
 80057cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057d0:	bf58      	it	pl
 80057d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	f04f 0900 	mov.w	r9, #0
 80057dc:	e78a      	b.n	80056f4 <_scanf_float+0x188>
 80057de:	f04f 0a03 	mov.w	sl, #3
 80057e2:	e787      	b.n	80056f4 <_scanf_float+0x188>
 80057e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057e8:	4639      	mov	r1, r7
 80057ea:	4640      	mov	r0, r8
 80057ec:	4798      	blx	r3
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f43f aedf 	beq.w	80055b2 <_scanf_float+0x46>
 80057f4:	e6ea      	b.n	80055cc <_scanf_float+0x60>
 80057f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057fe:	463a      	mov	r2, r7
 8005800:	4640      	mov	r0, r8
 8005802:	4798      	blx	r3
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	3b01      	subs	r3, #1
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	e6ec      	b.n	80055e6 <_scanf_float+0x7a>
 800580c:	1e6b      	subs	r3, r5, #1
 800580e:	2b06      	cmp	r3, #6
 8005810:	d825      	bhi.n	800585e <_scanf_float+0x2f2>
 8005812:	2d02      	cmp	r5, #2
 8005814:	d836      	bhi.n	8005884 <_scanf_float+0x318>
 8005816:	455e      	cmp	r6, fp
 8005818:	f67f aee8 	bls.w	80055ec <_scanf_float+0x80>
 800581c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005820:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005824:	463a      	mov	r2, r7
 8005826:	4640      	mov	r0, r8
 8005828:	4798      	blx	r3
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	3b01      	subs	r3, #1
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	e7f1      	b.n	8005816 <_scanf_float+0x2aa>
 8005832:	9802      	ldr	r0, [sp, #8]
 8005834:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005838:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800583c:	9002      	str	r0, [sp, #8]
 800583e:	463a      	mov	r2, r7
 8005840:	4640      	mov	r0, r8
 8005842:	4798      	blx	r3
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	3b01      	subs	r3, #1
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800584e:	fa5f fa8a 	uxtb.w	sl, sl
 8005852:	f1ba 0f02 	cmp.w	sl, #2
 8005856:	d1ec      	bne.n	8005832 <_scanf_float+0x2c6>
 8005858:	3d03      	subs	r5, #3
 800585a:	b2ed      	uxtb	r5, r5
 800585c:	1b76      	subs	r6, r6, r5
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	05da      	lsls	r2, r3, #23
 8005862:	d52f      	bpl.n	80058c4 <_scanf_float+0x358>
 8005864:	055b      	lsls	r3, r3, #21
 8005866:	d510      	bpl.n	800588a <_scanf_float+0x31e>
 8005868:	455e      	cmp	r6, fp
 800586a:	f67f aebf 	bls.w	80055ec <_scanf_float+0x80>
 800586e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005876:	463a      	mov	r2, r7
 8005878:	4640      	mov	r0, r8
 800587a:	4798      	blx	r3
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	3b01      	subs	r3, #1
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	e7f1      	b.n	8005868 <_scanf_float+0x2fc>
 8005884:	46aa      	mov	sl, r5
 8005886:	9602      	str	r6, [sp, #8]
 8005888:	e7df      	b.n	800584a <_scanf_float+0x2de>
 800588a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800588e:	6923      	ldr	r3, [r4, #16]
 8005890:	2965      	cmp	r1, #101	; 0x65
 8005892:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005896:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	d00c      	beq.n	80058b8 <_scanf_float+0x34c>
 800589e:	2945      	cmp	r1, #69	; 0x45
 80058a0:	d00a      	beq.n	80058b8 <_scanf_float+0x34c>
 80058a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058a6:	463a      	mov	r2, r7
 80058a8:	4640      	mov	r0, r8
 80058aa:	4798      	blx	r3
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	1eb5      	subs	r5, r6, #2
 80058b6:	6123      	str	r3, [r4, #16]
 80058b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058bc:	463a      	mov	r2, r7
 80058be:	4640      	mov	r0, r8
 80058c0:	4798      	blx	r3
 80058c2:	462e      	mov	r6, r5
 80058c4:	6825      	ldr	r5, [r4, #0]
 80058c6:	f015 0510 	ands.w	r5, r5, #16
 80058ca:	d158      	bne.n	800597e <_scanf_float+0x412>
 80058cc:	7035      	strb	r5, [r6, #0]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d8:	d11c      	bne.n	8005914 <_scanf_float+0x3a8>
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	454b      	cmp	r3, r9
 80058de:	eba3 0209 	sub.w	r2, r3, r9
 80058e2:	d124      	bne.n	800592e <_scanf_float+0x3c2>
 80058e4:	2200      	movs	r2, #0
 80058e6:	4659      	mov	r1, fp
 80058e8:	4640      	mov	r0, r8
 80058ea:	f000 ffe1 	bl	80068b0 <_strtod_r>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	6821      	ldr	r1, [r4, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f011 0f02 	tst.w	r1, #2
 80058f8:	ec57 6b10 	vmov	r6, r7, d0
 80058fc:	f103 0204 	add.w	r2, r3, #4
 8005900:	d020      	beq.n	8005944 <_scanf_float+0x3d8>
 8005902:	9903      	ldr	r1, [sp, #12]
 8005904:	600a      	str	r2, [r1, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	e9c3 6700 	strd	r6, r7, [r3]
 800590c:	68e3      	ldr	r3, [r4, #12]
 800590e:	3301      	adds	r3, #1
 8005910:	60e3      	str	r3, [r4, #12]
 8005912:	e66c      	b.n	80055ee <_scanf_float+0x82>
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0e4      	beq.n	80058e4 <_scanf_float+0x378>
 800591a:	9905      	ldr	r1, [sp, #20]
 800591c:	230a      	movs	r3, #10
 800591e:	462a      	mov	r2, r5
 8005920:	3101      	adds	r1, #1
 8005922:	4640      	mov	r0, r8
 8005924:	f001 f84c 	bl	80069c0 <_strtol_r>
 8005928:	9b04      	ldr	r3, [sp, #16]
 800592a:	9e05      	ldr	r6, [sp, #20]
 800592c:	1ac2      	subs	r2, r0, r3
 800592e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005932:	429e      	cmp	r6, r3
 8005934:	bf28      	it	cs
 8005936:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800593a:	4912      	ldr	r1, [pc, #72]	; (8005984 <_scanf_float+0x418>)
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f8e7 	bl	8005b10 <siprintf>
 8005942:	e7cf      	b.n	80058e4 <_scanf_float+0x378>
 8005944:	f011 0f04 	tst.w	r1, #4
 8005948:	9903      	ldr	r1, [sp, #12]
 800594a:	600a      	str	r2, [r1, #0]
 800594c:	d1db      	bne.n	8005906 <_scanf_float+0x39a>
 800594e:	f8d3 8000 	ldr.w	r8, [r3]
 8005952:	ee10 2a10 	vmov	r2, s0
 8005956:	ee10 0a10 	vmov	r0, s0
 800595a:	463b      	mov	r3, r7
 800595c:	4639      	mov	r1, r7
 800595e:	f7fb f90d 	bl	8000b7c <__aeabi_dcmpun>
 8005962:	b128      	cbz	r0, 8005970 <_scanf_float+0x404>
 8005964:	4808      	ldr	r0, [pc, #32]	; (8005988 <_scanf_float+0x41c>)
 8005966:	f001 f953 	bl	8006c10 <nanf>
 800596a:	ed88 0a00 	vstr	s0, [r8]
 800596e:	e7cd      	b.n	800590c <_scanf_float+0x3a0>
 8005970:	4630      	mov	r0, r6
 8005972:	4639      	mov	r1, r7
 8005974:	f7fb f960 	bl	8000c38 <__aeabi_d2f>
 8005978:	f8c8 0000 	str.w	r0, [r8]
 800597c:	e7c6      	b.n	800590c <_scanf_float+0x3a0>
 800597e:	2500      	movs	r5, #0
 8005980:	e635      	b.n	80055ee <_scanf_float+0x82>
 8005982:	bf00      	nop
 8005984:	08009564 	.word	0x08009564
 8005988:	08009957 	.word	0x08009957

0800598c <setbuf>:
 800598c:	fab1 f281 	clz	r2, r1
 8005990:	0952      	lsrs	r2, r2, #5
 8005992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005996:	0052      	lsls	r2, r2, #1
 8005998:	f000 b800 	b.w	800599c <setvbuf>

0800599c <setvbuf>:
 800599c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059a0:	461d      	mov	r5, r3
 80059a2:	4b54      	ldr	r3, [pc, #336]	; (8005af4 <setvbuf+0x158>)
 80059a4:	681f      	ldr	r7, [r3, #0]
 80059a6:	4604      	mov	r4, r0
 80059a8:	460e      	mov	r6, r1
 80059aa:	4690      	mov	r8, r2
 80059ac:	b127      	cbz	r7, 80059b8 <setvbuf+0x1c>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	b913      	cbnz	r3, 80059b8 <setvbuf+0x1c>
 80059b2:	4638      	mov	r0, r7
 80059b4:	f000 f958 	bl	8005c68 <__sinit>
 80059b8:	f1b8 0f02 	cmp.w	r8, #2
 80059bc:	d006      	beq.n	80059cc <setvbuf+0x30>
 80059be:	f1b8 0f01 	cmp.w	r8, #1
 80059c2:	f200 8094 	bhi.w	8005aee <setvbuf+0x152>
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	f2c0 8091 	blt.w	8005aee <setvbuf+0x152>
 80059cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ce:	07da      	lsls	r2, r3, #31
 80059d0:	d405      	bmi.n	80059de <setvbuf+0x42>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	059b      	lsls	r3, r3, #22
 80059d6:	d402      	bmi.n	80059de <setvbuf+0x42>
 80059d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059da:	f001 f900 	bl	8006bde <__retarget_lock_acquire_recursive>
 80059de:	4621      	mov	r1, r4
 80059e0:	4638      	mov	r0, r7
 80059e2:	f002 fe6f 	bl	80086c4 <_fflush_r>
 80059e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059e8:	b141      	cbz	r1, 80059fc <setvbuf+0x60>
 80059ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d002      	beq.n	80059f8 <setvbuf+0x5c>
 80059f2:	4638      	mov	r0, r7
 80059f4:	f001 ff8e 	bl	8007914 <_free_r>
 80059f8:	2300      	movs	r3, #0
 80059fa:	6363      	str	r3, [r4, #52]	; 0x34
 80059fc:	2300      	movs	r3, #0
 80059fe:	61a3      	str	r3, [r4, #24]
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	0618      	lsls	r0, r3, #24
 8005a06:	d503      	bpl.n	8005a10 <setvbuf+0x74>
 8005a08:	6921      	ldr	r1, [r4, #16]
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	f001 ff82 	bl	8007914 <_free_r>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	f1b8 0f02 	cmp.w	r8, #2
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	d05f      	beq.n	8005ae2 <setvbuf+0x146>
 8005a22:	ab01      	add	r3, sp, #4
 8005a24:	466a      	mov	r2, sp
 8005a26:	4621      	mov	r1, r4
 8005a28:	4638      	mov	r0, r7
 8005a2a:	f000 ffe9 	bl	8006a00 <__swhatbuf_r>
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	4318      	orrs	r0, r3
 8005a32:	81a0      	strh	r0, [r4, #12]
 8005a34:	bb2d      	cbnz	r5, 8005a82 <setvbuf+0xe6>
 8005a36:	9d00      	ldr	r5, [sp, #0]
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f7ff fb5f 	bl	80050fc <malloc>
 8005a3e:	4606      	mov	r6, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d150      	bne.n	8005ae6 <setvbuf+0x14a>
 8005a44:	f8dd 9000 	ldr.w	r9, [sp]
 8005a48:	45a9      	cmp	r9, r5
 8005a4a:	d13e      	bne.n	8005aca <setvbuf+0x12e>
 8005a4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a50:	2200      	movs	r2, #0
 8005a52:	60a2      	str	r2, [r4, #8]
 8005a54:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005a58:	6022      	str	r2, [r4, #0]
 8005a5a:	6122      	str	r2, [r4, #16]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a62:	6162      	str	r2, [r4, #20]
 8005a64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a66:	f043 0302 	orr.w	r3, r3, #2
 8005a6a:	07d1      	lsls	r1, r2, #31
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	d404      	bmi.n	8005a7a <setvbuf+0xde>
 8005a70:	059b      	lsls	r3, r3, #22
 8005a72:	d402      	bmi.n	8005a7a <setvbuf+0xde>
 8005a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a76:	f001 f8b3 	bl	8006be0 <__retarget_lock_release_recursive>
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	b003      	add	sp, #12
 8005a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d0d8      	beq.n	8005a38 <setvbuf+0x9c>
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	b913      	cbnz	r3, 8005a90 <setvbuf+0xf4>
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f000 f8ec 	bl	8005c68 <__sinit>
 8005a90:	f1b8 0f01 	cmp.w	r8, #1
 8005a94:	bf08      	it	eq
 8005a96:	89a3      	ldrheq	r3, [r4, #12]
 8005a98:	6026      	str	r6, [r4, #0]
 8005a9a:	bf04      	itt	eq
 8005a9c:	f043 0301 	orreq.w	r3, r3, #1
 8005aa0:	81a3      	strheq	r3, [r4, #12]
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f013 0208 	ands.w	r2, r3, #8
 8005aa8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005aac:	d01d      	beq.n	8005aea <setvbuf+0x14e>
 8005aae:	07da      	lsls	r2, r3, #31
 8005ab0:	bf41      	itttt	mi
 8005ab2:	2200      	movmi	r2, #0
 8005ab4:	426d      	negmi	r5, r5
 8005ab6:	60a2      	strmi	r2, [r4, #8]
 8005ab8:	61a5      	strmi	r5, [r4, #24]
 8005aba:	bf58      	it	pl
 8005abc:	60a5      	strpl	r5, [r4, #8]
 8005abe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005ac0:	f015 0501 	ands.w	r5, r5, #1
 8005ac4:	d0d4      	beq.n	8005a70 <setvbuf+0xd4>
 8005ac6:	2500      	movs	r5, #0
 8005ac8:	e7d7      	b.n	8005a7a <setvbuf+0xde>
 8005aca:	4648      	mov	r0, r9
 8005acc:	f7ff fb16 	bl	80050fc <malloc>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d0ba      	beq.n	8005a4c <setvbuf+0xb0>
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	464d      	mov	r5, r9
 8005ae0:	e7d1      	b.n	8005a86 <setvbuf+0xea>
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	e7b4      	b.n	8005a50 <setvbuf+0xb4>
 8005ae6:	46a9      	mov	r9, r5
 8005ae8:	e7f5      	b.n	8005ad6 <setvbuf+0x13a>
 8005aea:	60a2      	str	r2, [r4, #8]
 8005aec:	e7e7      	b.n	8005abe <setvbuf+0x122>
 8005aee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005af2:	e7c2      	b.n	8005a7a <setvbuf+0xde>
 8005af4:	20000204 	.word	0x20000204

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f001 b870 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	200004cc 	.word	0x200004cc

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f001 b86b 	b.w	8006be0 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200004cc 	.word	0x200004cc

08005b10 <siprintf>:
 8005b10:	b40e      	push	{r1, r2, r3}
 8005b12:	b500      	push	{lr}
 8005b14:	b09c      	sub	sp, #112	; 0x70
 8005b16:	ab1d      	add	r3, sp, #116	; 0x74
 8005b18:	9002      	str	r0, [sp, #8]
 8005b1a:	9006      	str	r0, [sp, #24]
 8005b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b20:	4809      	ldr	r0, [pc, #36]	; (8005b48 <siprintf+0x38>)
 8005b22:	9107      	str	r1, [sp, #28]
 8005b24:	9104      	str	r1, [sp, #16]
 8005b26:	4909      	ldr	r1, [pc, #36]	; (8005b4c <siprintf+0x3c>)
 8005b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2c:	9105      	str	r1, [sp, #20]
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	a902      	add	r1, sp, #8
 8005b34:	f002 faec 	bl	8008110 <_svfiprintf_r>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	b01c      	add	sp, #112	; 0x70
 8005b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b44:	b003      	add	sp, #12
 8005b46:	4770      	bx	lr
 8005b48:	20000204 	.word	0x20000204
 8005b4c:	ffff0208 	.word	0xffff0208

08005b50 <std>:
 8005b50:	2300      	movs	r3, #0
 8005b52:	b510      	push	{r4, lr}
 8005b54:	4604      	mov	r4, r0
 8005b56:	e9c0 3300 	strd	r3, r3, [r0]
 8005b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b5e:	6083      	str	r3, [r0, #8]
 8005b60:	8181      	strh	r1, [r0, #12]
 8005b62:	6643      	str	r3, [r0, #100]	; 0x64
 8005b64:	81c2      	strh	r2, [r0, #14]
 8005b66:	6183      	str	r3, [r0, #24]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	2208      	movs	r2, #8
 8005b6c:	305c      	adds	r0, #92	; 0x5c
 8005b6e:	f000 ffcd 	bl	8006b0c <memset>
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <std+0x58>)
 8005b74:	6263      	str	r3, [r4, #36]	; 0x24
 8005b76:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <std+0x5c>)
 8005b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <std+0x60>)
 8005b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <std+0x64>)
 8005b80:	6323      	str	r3, [r4, #48]	; 0x30
 8005b82:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <std+0x68>)
 8005b84:	6224      	str	r4, [r4, #32]
 8005b86:	429c      	cmp	r4, r3
 8005b88:	d006      	beq.n	8005b98 <std+0x48>
 8005b8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005b8e:	4294      	cmp	r4, r2
 8005b90:	d002      	beq.n	8005b98 <std+0x48>
 8005b92:	33d0      	adds	r3, #208	; 0xd0
 8005b94:	429c      	cmp	r4, r3
 8005b96:	d105      	bne.n	8005ba4 <std+0x54>
 8005b98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba0:	f001 b81c 	b.w	8006bdc <__retarget_lock_init_recursive>
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	0800906f 	.word	0x0800906f
 8005bac:	08009091 	.word	0x08009091
 8005bb0:	080090c9 	.word	0x080090c9
 8005bb4:	080090ed 	.word	0x080090ed
 8005bb8:	20000390 	.word	0x20000390

08005bbc <stdio_exit_handler>:
 8005bbc:	4a02      	ldr	r2, [pc, #8]	; (8005bc8 <stdio_exit_handler+0xc>)
 8005bbe:	4903      	ldr	r1, [pc, #12]	; (8005bcc <stdio_exit_handler+0x10>)
 8005bc0:	4803      	ldr	r0, [pc, #12]	; (8005bd0 <stdio_exit_handler+0x14>)
 8005bc2:	f000 beff 	b.w	80069c4 <_fwalk_sglue>
 8005bc6:	bf00      	nop
 8005bc8:	20000040 	.word	0x20000040
 8005bcc:	080086c5 	.word	0x080086c5
 8005bd0:	200001b8 	.word	0x200001b8

08005bd4 <cleanup_stdio>:
 8005bd4:	6841      	ldr	r1, [r0, #4]
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <cleanup_stdio+0x34>)
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	d001      	beq.n	8005be4 <cleanup_stdio+0x10>
 8005be0:	f002 fd70 	bl	80086c4 <_fflush_r>
 8005be4:	68a1      	ldr	r1, [r4, #8]
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <cleanup_stdio+0x38>)
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <cleanup_stdio+0x1e>
 8005bec:	4620      	mov	r0, r4
 8005bee:	f002 fd69 	bl	80086c4 <_fflush_r>
 8005bf2:	68e1      	ldr	r1, [r4, #12]
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <cleanup_stdio+0x3c>)
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	d004      	beq.n	8005c04 <cleanup_stdio+0x30>
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c00:	f002 bd60 	b.w	80086c4 <_fflush_r>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	bf00      	nop
 8005c08:	20000390 	.word	0x20000390
 8005c0c:	200003f8 	.word	0x200003f8
 8005c10:	20000460 	.word	0x20000460

08005c14 <global_stdio_init.part.0>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <global_stdio_init.part.0+0x30>)
 8005c18:	4c0b      	ldr	r4, [pc, #44]	; (8005c48 <global_stdio_init.part.0+0x34>)
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <global_stdio_init.part.0+0x38>)
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	2200      	movs	r2, #0
 8005c22:	2104      	movs	r1, #4
 8005c24:	f7ff ff94 	bl	8005b50 <std>
 8005c28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	2109      	movs	r1, #9
 8005c30:	f7ff ff8e 	bl	8005b50 <std>
 8005c34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c38:	2202      	movs	r2, #2
 8005c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c3e:	2112      	movs	r1, #18
 8005c40:	f7ff bf86 	b.w	8005b50 <std>
 8005c44:	200004c8 	.word	0x200004c8
 8005c48:	20000390 	.word	0x20000390
 8005c4c:	08005bbd 	.word	0x08005bbd

08005c50 <__sfp_lock_acquire>:
 8005c50:	4801      	ldr	r0, [pc, #4]	; (8005c58 <__sfp_lock_acquire+0x8>)
 8005c52:	f000 bfc4 	b.w	8006bde <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	200004cd 	.word	0x200004cd

08005c5c <__sfp_lock_release>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__sfp_lock_release+0x8>)
 8005c5e:	f000 bfbf 	b.w	8006be0 <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	200004cd 	.word	0x200004cd

08005c68 <__sinit>:
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	f7ff fff0 	bl	8005c50 <__sfp_lock_acquire>
 8005c70:	6a23      	ldr	r3, [r4, #32]
 8005c72:	b11b      	cbz	r3, 8005c7c <__sinit+0x14>
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f7ff bff0 	b.w	8005c5c <__sfp_lock_release>
 8005c7c:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <__sinit+0x28>)
 8005c7e:	6223      	str	r3, [r4, #32]
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__sinit+0x2c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f5      	bne.n	8005c74 <__sinit+0xc>
 8005c88:	f7ff ffc4 	bl	8005c14 <global_stdio_init.part.0>
 8005c8c:	e7f2      	b.n	8005c74 <__sinit+0xc>
 8005c8e:	bf00      	nop
 8005c90:	08005bd5 	.word	0x08005bd5
 8005c94:	200004c8 	.word	0x200004c8

08005c98 <sulp>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	ec45 4b10 	vmov	d0, r4, r5
 8005ca2:	4616      	mov	r6, r2
 8005ca4:	f003 f8a2 	bl	8008dec <__ulp>
 8005ca8:	ec51 0b10 	vmov	r0, r1, d0
 8005cac:	b17e      	cbz	r6, 8005cce <sulp+0x36>
 8005cae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005cb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dd09      	ble.n	8005cce <sulp+0x36>
 8005cba:	051b      	lsls	r3, r3, #20
 8005cbc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005cc0:	2400      	movs	r4, #0
 8005cc2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	f7fa fcbd 	bl	8000648 <__aeabi_dmul>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}

08005cd0 <_strtod_l>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	ed2d 8b02 	vpush	{d8}
 8005cd8:	b09b      	sub	sp, #108	; 0x6c
 8005cda:	4604      	mov	r4, r0
 8005cdc:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cde:	2200      	movs	r2, #0
 8005ce0:	9216      	str	r2, [sp, #88]	; 0x58
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	f04f 0800 	mov.w	r8, #0
 8005ce8:	f04f 0900 	mov.w	r9, #0
 8005cec:	460a      	mov	r2, r1
 8005cee:	9215      	str	r2, [sp, #84]	; 0x54
 8005cf0:	7811      	ldrb	r1, [r2, #0]
 8005cf2:	292b      	cmp	r1, #43	; 0x2b
 8005cf4:	d04c      	beq.n	8005d90 <_strtod_l+0xc0>
 8005cf6:	d83a      	bhi.n	8005d6e <_strtod_l+0x9e>
 8005cf8:	290d      	cmp	r1, #13
 8005cfa:	d834      	bhi.n	8005d66 <_strtod_l+0x96>
 8005cfc:	2908      	cmp	r1, #8
 8005cfe:	d834      	bhi.n	8005d6a <_strtod_l+0x9a>
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d03d      	beq.n	8005d80 <_strtod_l+0xb0>
 8005d04:	2200      	movs	r2, #0
 8005d06:	920a      	str	r2, [sp, #40]	; 0x28
 8005d08:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005d0a:	7832      	ldrb	r2, [r6, #0]
 8005d0c:	2a30      	cmp	r2, #48	; 0x30
 8005d0e:	f040 80b4 	bne.w	8005e7a <_strtod_l+0x1aa>
 8005d12:	7872      	ldrb	r2, [r6, #1]
 8005d14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005d18:	2a58      	cmp	r2, #88	; 0x58
 8005d1a:	d170      	bne.n	8005dfe <_strtod_l+0x12e>
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	ab16      	add	r3, sp, #88	; 0x58
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4a8e      	ldr	r2, [pc, #568]	; (8005f60 <_strtod_l+0x290>)
 8005d28:	ab17      	add	r3, sp, #92	; 0x5c
 8005d2a:	a915      	add	r1, sp, #84	; 0x54
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f001 fea5 	bl	8007a7c <__gethex>
 8005d32:	f010 070f 	ands.w	r7, r0, #15
 8005d36:	4605      	mov	r5, r0
 8005d38:	d005      	beq.n	8005d46 <_strtod_l+0x76>
 8005d3a:	2f06      	cmp	r7, #6
 8005d3c:	d12a      	bne.n	8005d94 <_strtod_l+0xc4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	2300      	movs	r3, #0
 8005d42:	9615      	str	r6, [sp, #84]	; 0x54
 8005d44:	930a      	str	r3, [sp, #40]	; 0x28
 8005d46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 857f 	bne.w	800684c <_strtod_l+0xb7c>
 8005d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d50:	b1db      	cbz	r3, 8005d8a <_strtod_l+0xba>
 8005d52:	4642      	mov	r2, r8
 8005d54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d58:	ec43 2b10 	vmov	d0, r2, r3
 8005d5c:	b01b      	add	sp, #108	; 0x6c
 8005d5e:	ecbd 8b02 	vpop	{d8}
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	2920      	cmp	r1, #32
 8005d68:	d1cc      	bne.n	8005d04 <_strtod_l+0x34>
 8005d6a:	3201      	adds	r2, #1
 8005d6c:	e7bf      	b.n	8005cee <_strtod_l+0x1e>
 8005d6e:	292d      	cmp	r1, #45	; 0x2d
 8005d70:	d1c8      	bne.n	8005d04 <_strtod_l+0x34>
 8005d72:	2101      	movs	r1, #1
 8005d74:	910a      	str	r1, [sp, #40]	; 0x28
 8005d76:	1c51      	adds	r1, r2, #1
 8005d78:	9115      	str	r1, [sp, #84]	; 0x54
 8005d7a:	7852      	ldrb	r2, [r2, #1]
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	d1c3      	bne.n	8005d08 <_strtod_l+0x38>
 8005d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d82:	9515      	str	r5, [sp, #84]	; 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 855f 	bne.w	8006848 <_strtod_l+0xb78>
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	e7e3      	b.n	8005d58 <_strtod_l+0x88>
 8005d90:	2100      	movs	r1, #0
 8005d92:	e7ef      	b.n	8005d74 <_strtod_l+0xa4>
 8005d94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d96:	b13a      	cbz	r2, 8005da8 <_strtod_l+0xd8>
 8005d98:	2135      	movs	r1, #53	; 0x35
 8005d9a:	a818      	add	r0, sp, #96	; 0x60
 8005d9c:	f003 f923 	bl	8008fe6 <__copybits>
 8005da0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005da2:	4620      	mov	r0, r4
 8005da4:	f002 fcf6 	bl	8008794 <_Bfree>
 8005da8:	3f01      	subs	r7, #1
 8005daa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dac:	2f04      	cmp	r7, #4
 8005dae:	d806      	bhi.n	8005dbe <_strtod_l+0xee>
 8005db0:	e8df f007 	tbb	[pc, r7]
 8005db4:	201d0314 	.word	0x201d0314
 8005db8:	14          	.byte	0x14
 8005db9:	00          	.byte	0x00
 8005dba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8005dbe:	05e9      	lsls	r1, r5, #23
 8005dc0:	bf48      	it	mi
 8005dc2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005dc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dca:	0d1b      	lsrs	r3, r3, #20
 8005dcc:	051b      	lsls	r3, r3, #20
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1b9      	bne.n	8005d46 <_strtod_l+0x76>
 8005dd2:	f000 fed9 	bl	8006b88 <__errno>
 8005dd6:	2322      	movs	r3, #34	; 0x22
 8005dd8:	6003      	str	r3, [r0, #0]
 8005dda:	e7b4      	b.n	8005d46 <_strtod_l+0x76>
 8005ddc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8005de0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005de4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005de8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005dec:	e7e7      	b.n	8005dbe <_strtod_l+0xee>
 8005dee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005f68 <_strtod_l+0x298>
 8005df2:	e7e4      	b.n	8005dbe <_strtod_l+0xee>
 8005df4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005df8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005dfc:	e7df      	b.n	8005dbe <_strtod_l+0xee>
 8005dfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	9215      	str	r2, [sp, #84]	; 0x54
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	2b30      	cmp	r3, #48	; 0x30
 8005e08:	d0f9      	beq.n	8005dfe <_strtod_l+0x12e>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d09b      	beq.n	8005d46 <_strtod_l+0x76>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f04f 0a00 	mov.w	sl, #0
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e1a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005e1e:	46d3      	mov	fp, sl
 8005e20:	220a      	movs	r2, #10
 8005e22:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005e24:	7806      	ldrb	r6, [r0, #0]
 8005e26:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e2a:	b2d9      	uxtb	r1, r3
 8005e2c:	2909      	cmp	r1, #9
 8005e2e:	d926      	bls.n	8005e7e <_strtod_l+0x1ae>
 8005e30:	494c      	ldr	r1, [pc, #304]	; (8005f64 <_strtod_l+0x294>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	f000 fe58 	bl	8006ae8 <strncmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d030      	beq.n	8005e9e <_strtod_l+0x1ce>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	4632      	mov	r2, r6
 8005e40:	9005      	str	r0, [sp, #20]
 8005e42:	465e      	mov	r6, fp
 8005e44:	4603      	mov	r3, r0
 8005e46:	2a65      	cmp	r2, #101	; 0x65
 8005e48:	d001      	beq.n	8005e4e <_strtod_l+0x17e>
 8005e4a:	2a45      	cmp	r2, #69	; 0x45
 8005e4c:	d113      	bne.n	8005e76 <_strtod_l+0x1a6>
 8005e4e:	b91e      	cbnz	r6, 8005e58 <_strtod_l+0x188>
 8005e50:	9a04      	ldr	r2, [sp, #16]
 8005e52:	4302      	orrs	r2, r0
 8005e54:	d094      	beq.n	8005d80 <_strtod_l+0xb0>
 8005e56:	2600      	movs	r6, #0
 8005e58:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005e5a:	1c6a      	adds	r2, r5, #1
 8005e5c:	9215      	str	r2, [sp, #84]	; 0x54
 8005e5e:	786a      	ldrb	r2, [r5, #1]
 8005e60:	2a2b      	cmp	r2, #43	; 0x2b
 8005e62:	d074      	beq.n	8005f4e <_strtod_l+0x27e>
 8005e64:	2a2d      	cmp	r2, #45	; 0x2d
 8005e66:	d078      	beq.n	8005f5a <_strtod_l+0x28a>
 8005e68:	f04f 0c00 	mov.w	ip, #0
 8005e6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e70:	2909      	cmp	r1, #9
 8005e72:	d97f      	bls.n	8005f74 <_strtod_l+0x2a4>
 8005e74:	9515      	str	r5, [sp, #84]	; 0x54
 8005e76:	2700      	movs	r7, #0
 8005e78:	e09e      	b.n	8005fb8 <_strtod_l+0x2e8>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e7c8      	b.n	8005e10 <_strtod_l+0x140>
 8005e7e:	f1bb 0f08 	cmp.w	fp, #8
 8005e82:	bfd8      	it	le
 8005e84:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005e86:	f100 0001 	add.w	r0, r0, #1
 8005e8a:	bfda      	itte	le
 8005e8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e90:	9309      	strle	r3, [sp, #36]	; 0x24
 8005e92:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005e96:	f10b 0b01 	add.w	fp, fp, #1
 8005e9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005e9c:	e7c1      	b.n	8005e22 <_strtod_l+0x152>
 8005e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	9215      	str	r2, [sp, #84]	; 0x54
 8005ea4:	785a      	ldrb	r2, [r3, #1]
 8005ea6:	f1bb 0f00 	cmp.w	fp, #0
 8005eaa:	d037      	beq.n	8005f1c <_strtod_l+0x24c>
 8005eac:	9005      	str	r0, [sp, #20]
 8005eae:	465e      	mov	r6, fp
 8005eb0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005eb4:	2b09      	cmp	r3, #9
 8005eb6:	d912      	bls.n	8005ede <_strtod_l+0x20e>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7c4      	b.n	8005e46 <_strtod_l+0x176>
 8005ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	9215      	str	r2, [sp, #84]	; 0x54
 8005ec2:	785a      	ldrb	r2, [r3, #1]
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	2a30      	cmp	r2, #48	; 0x30
 8005ec8:	d0f8      	beq.n	8005ebc <_strtod_l+0x1ec>
 8005eca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	f200 84c1 	bhi.w	8006856 <_strtod_l+0xb86>
 8005ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ed6:	9005      	str	r0, [sp, #20]
 8005ed8:	2000      	movs	r0, #0
 8005eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8005edc:	4606      	mov	r6, r0
 8005ede:	3a30      	subs	r2, #48	; 0x30
 8005ee0:	f100 0301 	add.w	r3, r0, #1
 8005ee4:	d014      	beq.n	8005f10 <_strtod_l+0x240>
 8005ee6:	9905      	ldr	r1, [sp, #20]
 8005ee8:	4419      	add	r1, r3
 8005eea:	9105      	str	r1, [sp, #20]
 8005eec:	4633      	mov	r3, r6
 8005eee:	eb00 0c06 	add.w	ip, r0, r6
 8005ef2:	210a      	movs	r1, #10
 8005ef4:	4563      	cmp	r3, ip
 8005ef6:	d113      	bne.n	8005f20 <_strtod_l+0x250>
 8005ef8:	1833      	adds	r3, r6, r0
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	f106 0601 	add.w	r6, r6, #1
 8005f00:	4406      	add	r6, r0
 8005f02:	dc1a      	bgt.n	8005f3a <_strtod_l+0x26a>
 8005f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f06:	230a      	movs	r3, #10
 8005f08:	fb03 2301 	mla	r3, r3, r1, r2
 8005f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f12:	1c51      	adds	r1, r2, #1
 8005f14:	9115      	str	r1, [sp, #84]	; 0x54
 8005f16:	7852      	ldrb	r2, [r2, #1]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	e7c9      	b.n	8005eb0 <_strtod_l+0x1e0>
 8005f1c:	4658      	mov	r0, fp
 8005f1e:	e7d2      	b.n	8005ec6 <_strtod_l+0x1f6>
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	f103 0301 	add.w	r3, r3, #1
 8005f26:	dc03      	bgt.n	8005f30 <_strtod_l+0x260>
 8005f28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f2a:	434f      	muls	r7, r1
 8005f2c:	9709      	str	r7, [sp, #36]	; 0x24
 8005f2e:	e7e1      	b.n	8005ef4 <_strtod_l+0x224>
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	bfd8      	it	le
 8005f34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005f38:	e7dc      	b.n	8005ef4 <_strtod_l+0x224>
 8005f3a:	2e10      	cmp	r6, #16
 8005f3c:	bfdc      	itt	le
 8005f3e:	230a      	movle	r3, #10
 8005f40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005f44:	e7e3      	b.n	8005f0e <_strtod_l+0x23e>
 8005f46:	2300      	movs	r3, #0
 8005f48:	9305      	str	r3, [sp, #20]
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e780      	b.n	8005e50 <_strtod_l+0x180>
 8005f4e:	f04f 0c00 	mov.w	ip, #0
 8005f52:	1caa      	adds	r2, r5, #2
 8005f54:	9215      	str	r2, [sp, #84]	; 0x54
 8005f56:	78aa      	ldrb	r2, [r5, #2]
 8005f58:	e788      	b.n	8005e6c <_strtod_l+0x19c>
 8005f5a:	f04f 0c01 	mov.w	ip, #1
 8005f5e:	e7f8      	b.n	8005f52 <_strtod_l+0x282>
 8005f60:	0800956c 	.word	0x0800956c
 8005f64:	08009569 	.word	0x08009569
 8005f68:	7ff00000 	.word	0x7ff00000
 8005f6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f6e:	1c51      	adds	r1, r2, #1
 8005f70:	9115      	str	r1, [sp, #84]	; 0x54
 8005f72:	7852      	ldrb	r2, [r2, #1]
 8005f74:	2a30      	cmp	r2, #48	; 0x30
 8005f76:	d0f9      	beq.n	8005f6c <_strtod_l+0x29c>
 8005f78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f7c:	2908      	cmp	r1, #8
 8005f7e:	f63f af7a 	bhi.w	8005e76 <_strtod_l+0x1a6>
 8005f82:	3a30      	subs	r2, #48	; 0x30
 8005f84:	9208      	str	r2, [sp, #32]
 8005f86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f88:	920c      	str	r2, [sp, #48]	; 0x30
 8005f8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005f8c:	1c57      	adds	r7, r2, #1
 8005f8e:	9715      	str	r7, [sp, #84]	; 0x54
 8005f90:	7852      	ldrb	r2, [r2, #1]
 8005f92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005f96:	f1be 0f09 	cmp.w	lr, #9
 8005f9a:	d938      	bls.n	800600e <_strtod_l+0x33e>
 8005f9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f9e:	1a7f      	subs	r7, r7, r1
 8005fa0:	2f08      	cmp	r7, #8
 8005fa2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005fa6:	dc03      	bgt.n	8005fb0 <_strtod_l+0x2e0>
 8005fa8:	9908      	ldr	r1, [sp, #32]
 8005faa:	428f      	cmp	r7, r1
 8005fac:	bfa8      	it	ge
 8005fae:	460f      	movge	r7, r1
 8005fb0:	f1bc 0f00 	cmp.w	ip, #0
 8005fb4:	d000      	beq.n	8005fb8 <_strtod_l+0x2e8>
 8005fb6:	427f      	negs	r7, r7
 8005fb8:	2e00      	cmp	r6, #0
 8005fba:	d14f      	bne.n	800605c <_strtod_l+0x38c>
 8005fbc:	9904      	ldr	r1, [sp, #16]
 8005fbe:	4301      	orrs	r1, r0
 8005fc0:	f47f aec1 	bne.w	8005d46 <_strtod_l+0x76>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f47f aedb 	bne.w	8005d80 <_strtod_l+0xb0>
 8005fca:	2a69      	cmp	r2, #105	; 0x69
 8005fcc:	d029      	beq.n	8006022 <_strtod_l+0x352>
 8005fce:	dc26      	bgt.n	800601e <_strtod_l+0x34e>
 8005fd0:	2a49      	cmp	r2, #73	; 0x49
 8005fd2:	d026      	beq.n	8006022 <_strtod_l+0x352>
 8005fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8005fd6:	f47f aed3 	bne.w	8005d80 <_strtod_l+0xb0>
 8005fda:	499b      	ldr	r1, [pc, #620]	; (8006248 <_strtod_l+0x578>)
 8005fdc:	a815      	add	r0, sp, #84	; 0x54
 8005fde:	f001 ff8d 	bl	8007efc <__match>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	f43f aecc 	beq.w	8005d80 <_strtod_l+0xb0>
 8005fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b28      	cmp	r3, #40	; 0x28
 8005fee:	d12f      	bne.n	8006050 <_strtod_l+0x380>
 8005ff0:	4996      	ldr	r1, [pc, #600]	; (800624c <_strtod_l+0x57c>)
 8005ff2:	aa18      	add	r2, sp, #96	; 0x60
 8005ff4:	a815      	add	r0, sp, #84	; 0x54
 8005ff6:	f001 ff95 	bl	8007f24 <__hexnan>
 8005ffa:	2805      	cmp	r0, #5
 8005ffc:	d128      	bne.n	8006050 <_strtod_l+0x380>
 8005ffe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006000:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006004:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006008:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800600c:	e69b      	b.n	8005d46 <_strtod_l+0x76>
 800600e:	9f08      	ldr	r7, [sp, #32]
 8006010:	210a      	movs	r1, #10
 8006012:	fb01 2107 	mla	r1, r1, r7, r2
 8006016:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800601a:	9208      	str	r2, [sp, #32]
 800601c:	e7b5      	b.n	8005f8a <_strtod_l+0x2ba>
 800601e:	2a6e      	cmp	r2, #110	; 0x6e
 8006020:	e7d9      	b.n	8005fd6 <_strtod_l+0x306>
 8006022:	498b      	ldr	r1, [pc, #556]	; (8006250 <_strtod_l+0x580>)
 8006024:	a815      	add	r0, sp, #84	; 0x54
 8006026:	f001 ff69 	bl	8007efc <__match>
 800602a:	2800      	cmp	r0, #0
 800602c:	f43f aea8 	beq.w	8005d80 <_strtod_l+0xb0>
 8006030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006032:	4988      	ldr	r1, [pc, #544]	; (8006254 <_strtod_l+0x584>)
 8006034:	3b01      	subs	r3, #1
 8006036:	a815      	add	r0, sp, #84	; 0x54
 8006038:	9315      	str	r3, [sp, #84]	; 0x54
 800603a:	f001 ff5f 	bl	8007efc <__match>
 800603e:	b910      	cbnz	r0, 8006046 <_strtod_l+0x376>
 8006040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006042:	3301      	adds	r3, #1
 8006044:	9315      	str	r3, [sp, #84]	; 0x54
 8006046:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006264 <_strtod_l+0x594>
 800604a:	f04f 0800 	mov.w	r8, #0
 800604e:	e67a      	b.n	8005d46 <_strtod_l+0x76>
 8006050:	4881      	ldr	r0, [pc, #516]	; (8006258 <_strtod_l+0x588>)
 8006052:	f000 fdd5 	bl	8006c00 <nan>
 8006056:	ec59 8b10 	vmov	r8, r9, d0
 800605a:	e674      	b.n	8005d46 <_strtod_l+0x76>
 800605c:	9b05      	ldr	r3, [sp, #20]
 800605e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006060:	1afb      	subs	r3, r7, r3
 8006062:	f1bb 0f00 	cmp.w	fp, #0
 8006066:	bf08      	it	eq
 8006068:	46b3      	moveq	fp, r6
 800606a:	2e10      	cmp	r6, #16
 800606c:	9308      	str	r3, [sp, #32]
 800606e:	4635      	mov	r5, r6
 8006070:	bfa8      	it	ge
 8006072:	2510      	movge	r5, #16
 8006074:	f7fa fa6e 	bl	8000554 <__aeabi_ui2d>
 8006078:	2e09      	cmp	r6, #9
 800607a:	4680      	mov	r8, r0
 800607c:	4689      	mov	r9, r1
 800607e:	dd13      	ble.n	80060a8 <_strtod_l+0x3d8>
 8006080:	4b76      	ldr	r3, [pc, #472]	; (800625c <_strtod_l+0x58c>)
 8006082:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006086:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800608a:	f7fa fadd 	bl	8000648 <__aeabi_dmul>
 800608e:	4680      	mov	r8, r0
 8006090:	4650      	mov	r0, sl
 8006092:	4689      	mov	r9, r1
 8006094:	f7fa fa5e 	bl	8000554 <__aeabi_ui2d>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa f91c 	bl	80002dc <__adddf3>
 80060a4:	4680      	mov	r8, r0
 80060a6:	4689      	mov	r9, r1
 80060a8:	2e0f      	cmp	r6, #15
 80060aa:	dc38      	bgt.n	800611e <_strtod_l+0x44e>
 80060ac:	9b08      	ldr	r3, [sp, #32]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f43f ae49 	beq.w	8005d46 <_strtod_l+0x76>
 80060b4:	dd24      	ble.n	8006100 <_strtod_l+0x430>
 80060b6:	2b16      	cmp	r3, #22
 80060b8:	dc0b      	bgt.n	80060d2 <_strtod_l+0x402>
 80060ba:	4968      	ldr	r1, [pc, #416]	; (800625c <_strtod_l+0x58c>)
 80060bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	f7fa fabe 	bl	8000648 <__aeabi_dmul>
 80060cc:	4680      	mov	r8, r0
 80060ce:	4689      	mov	r9, r1
 80060d0:	e639      	b.n	8005d46 <_strtod_l+0x76>
 80060d2:	9a08      	ldr	r2, [sp, #32]
 80060d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80060d8:	4293      	cmp	r3, r2
 80060da:	db20      	blt.n	800611e <_strtod_l+0x44e>
 80060dc:	4c5f      	ldr	r4, [pc, #380]	; (800625c <_strtod_l+0x58c>)
 80060de:	f1c6 060f 	rsb	r6, r6, #15
 80060e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80060e6:	4642      	mov	r2, r8
 80060e8:	464b      	mov	r3, r9
 80060ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ee:	f7fa faab 	bl	8000648 <__aeabi_dmul>
 80060f2:	9b08      	ldr	r3, [sp, #32]
 80060f4:	1b9e      	subs	r6, r3, r6
 80060f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80060fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060fe:	e7e3      	b.n	80060c8 <_strtod_l+0x3f8>
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	3316      	adds	r3, #22
 8006104:	db0b      	blt.n	800611e <_strtod_l+0x44e>
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	1bdf      	subs	r7, r3, r7
 800610a:	4b54      	ldr	r3, [pc, #336]	; (800625c <_strtod_l+0x58c>)
 800610c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006114:	4640      	mov	r0, r8
 8006116:	4649      	mov	r1, r9
 8006118:	f7fa fbc0 	bl	800089c <__aeabi_ddiv>
 800611c:	e7d6      	b.n	80060cc <_strtod_l+0x3fc>
 800611e:	9b08      	ldr	r3, [sp, #32]
 8006120:	1b75      	subs	r5, r6, r5
 8006122:	441d      	add	r5, r3
 8006124:	2d00      	cmp	r5, #0
 8006126:	dd70      	ble.n	800620a <_strtod_l+0x53a>
 8006128:	f015 030f 	ands.w	r3, r5, #15
 800612c:	d00a      	beq.n	8006144 <_strtod_l+0x474>
 800612e:	494b      	ldr	r1, [pc, #300]	; (800625c <_strtod_l+0x58c>)
 8006130:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800613c:	f7fa fa84 	bl	8000648 <__aeabi_dmul>
 8006140:	4680      	mov	r8, r0
 8006142:	4689      	mov	r9, r1
 8006144:	f035 050f 	bics.w	r5, r5, #15
 8006148:	d04d      	beq.n	80061e6 <_strtod_l+0x516>
 800614a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800614e:	dd22      	ble.n	8006196 <_strtod_l+0x4c6>
 8006150:	2500      	movs	r5, #0
 8006152:	46ab      	mov	fp, r5
 8006154:	9509      	str	r5, [sp, #36]	; 0x24
 8006156:	9505      	str	r5, [sp, #20]
 8006158:	2322      	movs	r3, #34	; 0x22
 800615a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006264 <_strtod_l+0x594>
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	f04f 0800 	mov.w	r8, #0
 8006164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	f43f aded 	beq.w	8005d46 <_strtod_l+0x76>
 800616c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800616e:	4620      	mov	r0, r4
 8006170:	f002 fb10 	bl	8008794 <_Bfree>
 8006174:	9905      	ldr	r1, [sp, #20]
 8006176:	4620      	mov	r0, r4
 8006178:	f002 fb0c 	bl	8008794 <_Bfree>
 800617c:	4659      	mov	r1, fp
 800617e:	4620      	mov	r0, r4
 8006180:	f002 fb08 	bl	8008794 <_Bfree>
 8006184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006186:	4620      	mov	r0, r4
 8006188:	f002 fb04 	bl	8008794 <_Bfree>
 800618c:	4629      	mov	r1, r5
 800618e:	4620      	mov	r0, r4
 8006190:	f002 fb00 	bl	8008794 <_Bfree>
 8006194:	e5d7      	b.n	8005d46 <_strtod_l+0x76>
 8006196:	4b32      	ldr	r3, [pc, #200]	; (8006260 <_strtod_l+0x590>)
 8006198:	9304      	str	r3, [sp, #16]
 800619a:	2300      	movs	r3, #0
 800619c:	112d      	asrs	r5, r5, #4
 800619e:	4640      	mov	r0, r8
 80061a0:	4649      	mov	r1, r9
 80061a2:	469a      	mov	sl, r3
 80061a4:	2d01      	cmp	r5, #1
 80061a6:	dc21      	bgt.n	80061ec <_strtod_l+0x51c>
 80061a8:	b10b      	cbz	r3, 80061ae <_strtod_l+0x4de>
 80061aa:	4680      	mov	r8, r0
 80061ac:	4689      	mov	r9, r1
 80061ae:	492c      	ldr	r1, [pc, #176]	; (8006260 <_strtod_l+0x590>)
 80061b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80061b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c0:	f7fa fa42 	bl	8000648 <__aeabi_dmul>
 80061c4:	4b27      	ldr	r3, [pc, #156]	; (8006264 <_strtod_l+0x594>)
 80061c6:	460a      	mov	r2, r1
 80061c8:	400b      	ands	r3, r1
 80061ca:	4927      	ldr	r1, [pc, #156]	; (8006268 <_strtod_l+0x598>)
 80061cc:	428b      	cmp	r3, r1
 80061ce:	4680      	mov	r8, r0
 80061d0:	d8be      	bhi.n	8006150 <_strtod_l+0x480>
 80061d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061d6:	428b      	cmp	r3, r1
 80061d8:	bf86      	itte	hi
 80061da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800626c <_strtod_l+0x59c>
 80061de:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80061e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80061e6:	2300      	movs	r3, #0
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	e07b      	b.n	80062e4 <_strtod_l+0x614>
 80061ec:	07ea      	lsls	r2, r5, #31
 80061ee:	d505      	bpl.n	80061fc <_strtod_l+0x52c>
 80061f0:	9b04      	ldr	r3, [sp, #16]
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7fa fa27 	bl	8000648 <__aeabi_dmul>
 80061fa:	2301      	movs	r3, #1
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	3208      	adds	r2, #8
 8006200:	f10a 0a01 	add.w	sl, sl, #1
 8006204:	106d      	asrs	r5, r5, #1
 8006206:	9204      	str	r2, [sp, #16]
 8006208:	e7cc      	b.n	80061a4 <_strtod_l+0x4d4>
 800620a:	d0ec      	beq.n	80061e6 <_strtod_l+0x516>
 800620c:	426d      	negs	r5, r5
 800620e:	f015 020f 	ands.w	r2, r5, #15
 8006212:	d00a      	beq.n	800622a <_strtod_l+0x55a>
 8006214:	4b11      	ldr	r3, [pc, #68]	; (800625c <_strtod_l+0x58c>)
 8006216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800621a:	4640      	mov	r0, r8
 800621c:	4649      	mov	r1, r9
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa fb3b 	bl	800089c <__aeabi_ddiv>
 8006226:	4680      	mov	r8, r0
 8006228:	4689      	mov	r9, r1
 800622a:	112d      	asrs	r5, r5, #4
 800622c:	d0db      	beq.n	80061e6 <_strtod_l+0x516>
 800622e:	2d1f      	cmp	r5, #31
 8006230:	dd1e      	ble.n	8006270 <_strtod_l+0x5a0>
 8006232:	2500      	movs	r5, #0
 8006234:	46ab      	mov	fp, r5
 8006236:	9509      	str	r5, [sp, #36]	; 0x24
 8006238:	9505      	str	r5, [sp, #20]
 800623a:	2322      	movs	r3, #34	; 0x22
 800623c:	f04f 0800 	mov.w	r8, #0
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	e78d      	b.n	8006164 <_strtod_l+0x494>
 8006248:	0800953d 	.word	0x0800953d
 800624c:	08009580 	.word	0x08009580
 8006250:	08009535 	.word	0x08009535
 8006254:	080096cc 	.word	0x080096cc
 8006258:	08009957 	.word	0x08009957
 800625c:	08009848 	.word	0x08009848
 8006260:	08009820 	.word	0x08009820
 8006264:	7ff00000 	.word	0x7ff00000
 8006268:	7ca00000 	.word	0x7ca00000
 800626c:	7fefffff 	.word	0x7fefffff
 8006270:	f015 0310 	ands.w	r3, r5, #16
 8006274:	bf18      	it	ne
 8006276:	236a      	movne	r3, #106	; 0x6a
 8006278:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800661c <_strtod_l+0x94c>
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	4640      	mov	r0, r8
 8006280:	4649      	mov	r1, r9
 8006282:	2300      	movs	r3, #0
 8006284:	07ea      	lsls	r2, r5, #31
 8006286:	d504      	bpl.n	8006292 <_strtod_l+0x5c2>
 8006288:	e9da 2300 	ldrd	r2, r3, [sl]
 800628c:	f7fa f9dc 	bl	8000648 <__aeabi_dmul>
 8006290:	2301      	movs	r3, #1
 8006292:	106d      	asrs	r5, r5, #1
 8006294:	f10a 0a08 	add.w	sl, sl, #8
 8006298:	d1f4      	bne.n	8006284 <_strtod_l+0x5b4>
 800629a:	b10b      	cbz	r3, 80062a0 <_strtod_l+0x5d0>
 800629c:	4680      	mov	r8, r0
 800629e:	4689      	mov	r9, r1
 80062a0:	9b04      	ldr	r3, [sp, #16]
 80062a2:	b1bb      	cbz	r3, 80062d4 <_strtod_l+0x604>
 80062a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80062a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	4649      	mov	r1, r9
 80062b0:	dd10      	ble.n	80062d4 <_strtod_l+0x604>
 80062b2:	2b1f      	cmp	r3, #31
 80062b4:	f340 811e 	ble.w	80064f4 <_strtod_l+0x824>
 80062b8:	2b34      	cmp	r3, #52	; 0x34
 80062ba:	bfde      	ittt	le
 80062bc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80062c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062c4:	4093      	lslle	r3, r2
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	bfcc      	ite	gt
 80062cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80062d0:	ea03 0901 	andle.w	r9, r3, r1
 80062d4:	2200      	movs	r2, #0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4640      	mov	r0, r8
 80062da:	4649      	mov	r1, r9
 80062dc:	f7fa fc1c 	bl	8000b18 <__aeabi_dcmpeq>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d1a6      	bne.n	8006232 <_strtod_l+0x562>
 80062e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062ea:	4633      	mov	r3, r6
 80062ec:	465a      	mov	r2, fp
 80062ee:	4620      	mov	r0, r4
 80062f0:	f002 fab8 	bl	8008864 <__s2b>
 80062f4:	9009      	str	r0, [sp, #36]	; 0x24
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f43f af2a 	beq.w	8006150 <_strtod_l+0x480>
 80062fc:	9a08      	ldr	r2, [sp, #32]
 80062fe:	9b05      	ldr	r3, [sp, #20]
 8006300:	2a00      	cmp	r2, #0
 8006302:	eba3 0307 	sub.w	r3, r3, r7
 8006306:	bfa8      	it	ge
 8006308:	2300      	movge	r3, #0
 800630a:	930c      	str	r3, [sp, #48]	; 0x30
 800630c:	2500      	movs	r5, #0
 800630e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006312:	9312      	str	r3, [sp, #72]	; 0x48
 8006314:	46ab      	mov	fp, r5
 8006316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006318:	4620      	mov	r0, r4
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	f002 f9fa 	bl	8008714 <_Balloc>
 8006320:	9005      	str	r0, [sp, #20]
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f af18 	beq.w	8006158 <_strtod_l+0x488>
 8006328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	3202      	adds	r2, #2
 800632e:	f103 010c 	add.w	r1, r3, #12
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	300c      	adds	r0, #12
 8006336:	f000 fc54 	bl	8006be2 <memcpy>
 800633a:	ec49 8b10 	vmov	d0, r8, r9
 800633e:	aa18      	add	r2, sp, #96	; 0x60
 8006340:	a917      	add	r1, sp, #92	; 0x5c
 8006342:	4620      	mov	r0, r4
 8006344:	f002 fdc2 	bl	8008ecc <__d2b>
 8006348:	ec49 8b18 	vmov	d8, r8, r9
 800634c:	9016      	str	r0, [sp, #88]	; 0x58
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f af02 	beq.w	8006158 <_strtod_l+0x488>
 8006354:	2101      	movs	r1, #1
 8006356:	4620      	mov	r0, r4
 8006358:	f002 fb1c 	bl	8008994 <__i2b>
 800635c:	4683      	mov	fp, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	f43f aefa 	beq.w	8006158 <_strtod_l+0x488>
 8006364:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006366:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006368:	2e00      	cmp	r6, #0
 800636a:	bfab      	itete	ge
 800636c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800636e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006372:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006376:	bfac      	ite	ge
 8006378:	eb06 0a03 	addge.w	sl, r6, r3
 800637c:	1b9f      	sublt	r7, r3, r6
 800637e:	9b04      	ldr	r3, [sp, #16]
 8006380:	1af6      	subs	r6, r6, r3
 8006382:	4416      	add	r6, r2
 8006384:	4ba0      	ldr	r3, [pc, #640]	; (8006608 <_strtod_l+0x938>)
 8006386:	3e01      	subs	r6, #1
 8006388:	429e      	cmp	r6, r3
 800638a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800638e:	f280 80c4 	bge.w	800651a <_strtod_l+0x84a>
 8006392:	1b9b      	subs	r3, r3, r6
 8006394:	2b1f      	cmp	r3, #31
 8006396:	eba2 0203 	sub.w	r2, r2, r3
 800639a:	f04f 0101 	mov.w	r1, #1
 800639e:	f300 80b0 	bgt.w	8006502 <_strtod_l+0x832>
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	930e      	str	r3, [sp, #56]	; 0x38
 80063a8:	2300      	movs	r3, #0
 80063aa:	930d      	str	r3, [sp, #52]	; 0x34
 80063ac:	eb0a 0602 	add.w	r6, sl, r2
 80063b0:	9b04      	ldr	r3, [sp, #16]
 80063b2:	45b2      	cmp	sl, r6
 80063b4:	4417      	add	r7, r2
 80063b6:	441f      	add	r7, r3
 80063b8:	4653      	mov	r3, sl
 80063ba:	bfa8      	it	ge
 80063bc:	4633      	movge	r3, r6
 80063be:	42bb      	cmp	r3, r7
 80063c0:	bfa8      	it	ge
 80063c2:	463b      	movge	r3, r7
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bfc2      	ittt	gt
 80063c8:	1af6      	subgt	r6, r6, r3
 80063ca:	1aff      	subgt	r7, r7, r3
 80063cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80063d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dd17      	ble.n	8006406 <_strtod_l+0x736>
 80063d6:	4659      	mov	r1, fp
 80063d8:	461a      	mov	r2, r3
 80063da:	4620      	mov	r0, r4
 80063dc:	f002 fb9a 	bl	8008b14 <__pow5mult>
 80063e0:	4683      	mov	fp, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f aeb8 	beq.w	8006158 <_strtod_l+0x488>
 80063e8:	4601      	mov	r1, r0
 80063ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063ec:	4620      	mov	r0, r4
 80063ee:	f002 fae7 	bl	80089c0 <__multiply>
 80063f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f43f aeaf 	beq.w	8006158 <_strtod_l+0x488>
 80063fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80063fc:	4620      	mov	r0, r4
 80063fe:	f002 f9c9 	bl	8008794 <_Bfree>
 8006402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006404:	9316      	str	r3, [sp, #88]	; 0x58
 8006406:	2e00      	cmp	r6, #0
 8006408:	f300 808c 	bgt.w	8006524 <_strtod_l+0x854>
 800640c:	9b08      	ldr	r3, [sp, #32]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dd08      	ble.n	8006424 <_strtod_l+0x754>
 8006412:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006414:	9905      	ldr	r1, [sp, #20]
 8006416:	4620      	mov	r0, r4
 8006418:	f002 fb7c 	bl	8008b14 <__pow5mult>
 800641c:	9005      	str	r0, [sp, #20]
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f ae9a 	beq.w	8006158 <_strtod_l+0x488>
 8006424:	2f00      	cmp	r7, #0
 8006426:	dd08      	ble.n	800643a <_strtod_l+0x76a>
 8006428:	9905      	ldr	r1, [sp, #20]
 800642a:	463a      	mov	r2, r7
 800642c:	4620      	mov	r0, r4
 800642e:	f002 fbcb 	bl	8008bc8 <__lshift>
 8006432:	9005      	str	r0, [sp, #20]
 8006434:	2800      	cmp	r0, #0
 8006436:	f43f ae8f 	beq.w	8006158 <_strtod_l+0x488>
 800643a:	f1ba 0f00 	cmp.w	sl, #0
 800643e:	dd08      	ble.n	8006452 <_strtod_l+0x782>
 8006440:	4659      	mov	r1, fp
 8006442:	4652      	mov	r2, sl
 8006444:	4620      	mov	r0, r4
 8006446:	f002 fbbf 	bl	8008bc8 <__lshift>
 800644a:	4683      	mov	fp, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	f43f ae83 	beq.w	8006158 <_strtod_l+0x488>
 8006452:	9a05      	ldr	r2, [sp, #20]
 8006454:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006456:	4620      	mov	r0, r4
 8006458:	f002 fc3e 	bl	8008cd8 <__mdiff>
 800645c:	4605      	mov	r5, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	f43f ae7a 	beq.w	8006158 <_strtod_l+0x488>
 8006464:	68c3      	ldr	r3, [r0, #12]
 8006466:	930b      	str	r3, [sp, #44]	; 0x2c
 8006468:	2300      	movs	r3, #0
 800646a:	60c3      	str	r3, [r0, #12]
 800646c:	4659      	mov	r1, fp
 800646e:	f002 fc17 	bl	8008ca0 <__mcmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	da60      	bge.n	8006538 <_strtod_l+0x868>
 8006476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006478:	ea53 0308 	orrs.w	r3, r3, r8
 800647c:	f040 8084 	bne.w	8006588 <_strtod_l+0x8b8>
 8006480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006484:	2b00      	cmp	r3, #0
 8006486:	d17f      	bne.n	8006588 <_strtod_l+0x8b8>
 8006488:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800648c:	0d1b      	lsrs	r3, r3, #20
 800648e:	051b      	lsls	r3, r3, #20
 8006490:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006494:	d978      	bls.n	8006588 <_strtod_l+0x8b8>
 8006496:	696b      	ldr	r3, [r5, #20]
 8006498:	b913      	cbnz	r3, 80064a0 <_strtod_l+0x7d0>
 800649a:	692b      	ldr	r3, [r5, #16]
 800649c:	2b01      	cmp	r3, #1
 800649e:	dd73      	ble.n	8006588 <_strtod_l+0x8b8>
 80064a0:	4629      	mov	r1, r5
 80064a2:	2201      	movs	r2, #1
 80064a4:	4620      	mov	r0, r4
 80064a6:	f002 fb8f 	bl	8008bc8 <__lshift>
 80064aa:	4659      	mov	r1, fp
 80064ac:	4605      	mov	r5, r0
 80064ae:	f002 fbf7 	bl	8008ca0 <__mcmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	dd68      	ble.n	8006588 <_strtod_l+0x8b8>
 80064b6:	9904      	ldr	r1, [sp, #16]
 80064b8:	4a54      	ldr	r2, [pc, #336]	; (800660c <_strtod_l+0x93c>)
 80064ba:	464b      	mov	r3, r9
 80064bc:	2900      	cmp	r1, #0
 80064be:	f000 8084 	beq.w	80065ca <_strtod_l+0x8fa>
 80064c2:	ea02 0109 	and.w	r1, r2, r9
 80064c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064ca:	dc7e      	bgt.n	80065ca <_strtod_l+0x8fa>
 80064cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064d0:	f77f aeb3 	ble.w	800623a <_strtod_l+0x56a>
 80064d4:	4b4e      	ldr	r3, [pc, #312]	; (8006610 <_strtod_l+0x940>)
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	2200      	movs	r2, #0
 80064dc:	f7fa f8b4 	bl	8000648 <__aeabi_dmul>
 80064e0:	4b4a      	ldr	r3, [pc, #296]	; (800660c <_strtod_l+0x93c>)
 80064e2:	400b      	ands	r3, r1
 80064e4:	4680      	mov	r8, r0
 80064e6:	4689      	mov	r9, r1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f47f ae3f 	bne.w	800616c <_strtod_l+0x49c>
 80064ee:	2322      	movs	r3, #34	; 0x22
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	e63b      	b.n	800616c <_strtod_l+0x49c>
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	ea03 0808 	and.w	r8, r3, r8
 8006500:	e6e8      	b.n	80062d4 <_strtod_l+0x604>
 8006502:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006506:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800650a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800650e:	36e2      	adds	r6, #226	; 0xe2
 8006510:	fa01 f306 	lsl.w	r3, r1, r6
 8006514:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006518:	e748      	b.n	80063ac <_strtod_l+0x6dc>
 800651a:	2100      	movs	r1, #0
 800651c:	2301      	movs	r3, #1
 800651e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006522:	e743      	b.n	80063ac <_strtod_l+0x6dc>
 8006524:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006526:	4632      	mov	r2, r6
 8006528:	4620      	mov	r0, r4
 800652a:	f002 fb4d 	bl	8008bc8 <__lshift>
 800652e:	9016      	str	r0, [sp, #88]	; 0x58
 8006530:	2800      	cmp	r0, #0
 8006532:	f47f af6b 	bne.w	800640c <_strtod_l+0x73c>
 8006536:	e60f      	b.n	8006158 <_strtod_l+0x488>
 8006538:	46ca      	mov	sl, r9
 800653a:	d171      	bne.n	8006620 <_strtod_l+0x950>
 800653c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800653e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006542:	b352      	cbz	r2, 800659a <_strtod_l+0x8ca>
 8006544:	4a33      	ldr	r2, [pc, #204]	; (8006614 <_strtod_l+0x944>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d12a      	bne.n	80065a0 <_strtod_l+0x8d0>
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	4641      	mov	r1, r8
 800654e:	b1fb      	cbz	r3, 8006590 <_strtod_l+0x8c0>
 8006550:	4b2e      	ldr	r3, [pc, #184]	; (800660c <_strtod_l+0x93c>)
 8006552:	ea09 0303 	and.w	r3, r9, r3
 8006556:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800655a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800655e:	d81a      	bhi.n	8006596 <_strtod_l+0x8c6>
 8006560:	0d1b      	lsrs	r3, r3, #20
 8006562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	4299      	cmp	r1, r3
 800656c:	d118      	bne.n	80065a0 <_strtod_l+0x8d0>
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <_strtod_l+0x948>)
 8006570:	459a      	cmp	sl, r3
 8006572:	d102      	bne.n	800657a <_strtod_l+0x8aa>
 8006574:	3101      	adds	r1, #1
 8006576:	f43f adef 	beq.w	8006158 <_strtod_l+0x488>
 800657a:	4b24      	ldr	r3, [pc, #144]	; (800660c <_strtod_l+0x93c>)
 800657c:	ea0a 0303 	and.w	r3, sl, r3
 8006580:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006584:	f04f 0800 	mov.w	r8, #0
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1a2      	bne.n	80064d4 <_strtod_l+0x804>
 800658e:	e5ed      	b.n	800616c <_strtod_l+0x49c>
 8006590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006594:	e7e9      	b.n	800656a <_strtod_l+0x89a>
 8006596:	4613      	mov	r3, r2
 8006598:	e7e7      	b.n	800656a <_strtod_l+0x89a>
 800659a:	ea53 0308 	orrs.w	r3, r3, r8
 800659e:	d08a      	beq.n	80064b6 <_strtod_l+0x7e6>
 80065a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a2:	b1e3      	cbz	r3, 80065de <_strtod_l+0x90e>
 80065a4:	ea13 0f0a 	tst.w	r3, sl
 80065a8:	d0ee      	beq.n	8006588 <_strtod_l+0x8b8>
 80065aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ac:	9a04      	ldr	r2, [sp, #16]
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	b1c3      	cbz	r3, 80065e6 <_strtod_l+0x916>
 80065b4:	f7ff fb70 	bl	8005c98 <sulp>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	ec51 0b18 	vmov	r0, r1, d8
 80065c0:	f7f9 fe8c 	bl	80002dc <__adddf3>
 80065c4:	4680      	mov	r8, r0
 80065c6:	4689      	mov	r9, r1
 80065c8:	e7de      	b.n	8006588 <_strtod_l+0x8b8>
 80065ca:	4013      	ands	r3, r2
 80065cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80065d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80065d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80065dc:	e7d4      	b.n	8006588 <_strtod_l+0x8b8>
 80065de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e0:	ea13 0f08 	tst.w	r3, r8
 80065e4:	e7e0      	b.n	80065a8 <_strtod_l+0x8d8>
 80065e6:	f7ff fb57 	bl	8005c98 <sulp>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	ec51 0b18 	vmov	r0, r1, d8
 80065f2:	f7f9 fe71 	bl	80002d8 <__aeabi_dsub>
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
 80065fa:	4680      	mov	r8, r0
 80065fc:	4689      	mov	r9, r1
 80065fe:	f7fa fa8b 	bl	8000b18 <__aeabi_dcmpeq>
 8006602:	2800      	cmp	r0, #0
 8006604:	d0c0      	beq.n	8006588 <_strtod_l+0x8b8>
 8006606:	e618      	b.n	800623a <_strtod_l+0x56a>
 8006608:	fffffc02 	.word	0xfffffc02
 800660c:	7ff00000 	.word	0x7ff00000
 8006610:	39500000 	.word	0x39500000
 8006614:	000fffff 	.word	0x000fffff
 8006618:	7fefffff 	.word	0x7fefffff
 800661c:	08009598 	.word	0x08009598
 8006620:	4659      	mov	r1, fp
 8006622:	4628      	mov	r0, r5
 8006624:	f002 fcac 	bl	8008f80 <__ratio>
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	ee10 0a10 	vmov	r0, s0
 8006630:	2200      	movs	r2, #0
 8006632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006636:	4639      	mov	r1, r7
 8006638:	f7fa fa82 	bl	8000b40 <__aeabi_dcmple>
 800663c:	2800      	cmp	r0, #0
 800663e:	d071      	beq.n	8006724 <_strtod_l+0xa54>
 8006640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d17c      	bne.n	8006740 <_strtod_l+0xa70>
 8006646:	f1b8 0f00 	cmp.w	r8, #0
 800664a:	d15a      	bne.n	8006702 <_strtod_l+0xa32>
 800664c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006650:	2b00      	cmp	r3, #0
 8006652:	d15d      	bne.n	8006710 <_strtod_l+0xa40>
 8006654:	4b90      	ldr	r3, [pc, #576]	; (8006898 <_strtod_l+0xbc8>)
 8006656:	2200      	movs	r2, #0
 8006658:	4630      	mov	r0, r6
 800665a:	4639      	mov	r1, r7
 800665c:	f7fa fa66 	bl	8000b2c <__aeabi_dcmplt>
 8006660:	2800      	cmp	r0, #0
 8006662:	d15c      	bne.n	800671e <_strtod_l+0xa4e>
 8006664:	4630      	mov	r0, r6
 8006666:	4639      	mov	r1, r7
 8006668:	4b8c      	ldr	r3, [pc, #560]	; (800689c <_strtod_l+0xbcc>)
 800666a:	2200      	movs	r2, #0
 800666c:	f7f9 ffec 	bl	8000648 <__aeabi_dmul>
 8006670:	4606      	mov	r6, r0
 8006672:	460f      	mov	r7, r1
 8006674:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006678:	9606      	str	r6, [sp, #24]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006680:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006684:	4b86      	ldr	r3, [pc, #536]	; (80068a0 <_strtod_l+0xbd0>)
 8006686:	ea0a 0303 	and.w	r3, sl, r3
 800668a:	930d      	str	r3, [sp, #52]	; 0x34
 800668c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800668e:	4b85      	ldr	r3, [pc, #532]	; (80068a4 <_strtod_l+0xbd4>)
 8006690:	429a      	cmp	r2, r3
 8006692:	f040 8090 	bne.w	80067b6 <_strtod_l+0xae6>
 8006696:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800669a:	ec49 8b10 	vmov	d0, r8, r9
 800669e:	f002 fba5 	bl	8008dec <__ulp>
 80066a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066a6:	ec51 0b10 	vmov	r0, r1, d0
 80066aa:	f7f9 ffcd 	bl	8000648 <__aeabi_dmul>
 80066ae:	4642      	mov	r2, r8
 80066b0:	464b      	mov	r3, r9
 80066b2:	f7f9 fe13 	bl	80002dc <__adddf3>
 80066b6:	460b      	mov	r3, r1
 80066b8:	4979      	ldr	r1, [pc, #484]	; (80068a0 <_strtod_l+0xbd0>)
 80066ba:	4a7b      	ldr	r2, [pc, #492]	; (80068a8 <_strtod_l+0xbd8>)
 80066bc:	4019      	ands	r1, r3
 80066be:	4291      	cmp	r1, r2
 80066c0:	4680      	mov	r8, r0
 80066c2:	d944      	bls.n	800674e <_strtod_l+0xa7e>
 80066c4:	ee18 2a90 	vmov	r2, s17
 80066c8:	4b78      	ldr	r3, [pc, #480]	; (80068ac <_strtod_l+0xbdc>)
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d104      	bne.n	80066d8 <_strtod_l+0xa08>
 80066ce:	ee18 3a10 	vmov	r3, s16
 80066d2:	3301      	adds	r3, #1
 80066d4:	f43f ad40 	beq.w	8006158 <_strtod_l+0x488>
 80066d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80068ac <_strtod_l+0xbdc>
 80066dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80066e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066e2:	4620      	mov	r0, r4
 80066e4:	f002 f856 	bl	8008794 <_Bfree>
 80066e8:	9905      	ldr	r1, [sp, #20]
 80066ea:	4620      	mov	r0, r4
 80066ec:	f002 f852 	bl	8008794 <_Bfree>
 80066f0:	4659      	mov	r1, fp
 80066f2:	4620      	mov	r0, r4
 80066f4:	f002 f84e 	bl	8008794 <_Bfree>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4620      	mov	r0, r4
 80066fc:	f002 f84a 	bl	8008794 <_Bfree>
 8006700:	e609      	b.n	8006316 <_strtod_l+0x646>
 8006702:	f1b8 0f01 	cmp.w	r8, #1
 8006706:	d103      	bne.n	8006710 <_strtod_l+0xa40>
 8006708:	f1b9 0f00 	cmp.w	r9, #0
 800670c:	f43f ad95 	beq.w	800623a <_strtod_l+0x56a>
 8006710:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006868 <_strtod_l+0xb98>
 8006714:	4f60      	ldr	r7, [pc, #384]	; (8006898 <_strtod_l+0xbc8>)
 8006716:	ed8d 7b06 	vstr	d7, [sp, #24]
 800671a:	2600      	movs	r6, #0
 800671c:	e7ae      	b.n	800667c <_strtod_l+0x9ac>
 800671e:	4f5f      	ldr	r7, [pc, #380]	; (800689c <_strtod_l+0xbcc>)
 8006720:	2600      	movs	r6, #0
 8006722:	e7a7      	b.n	8006674 <_strtod_l+0x9a4>
 8006724:	4b5d      	ldr	r3, [pc, #372]	; (800689c <_strtod_l+0xbcc>)
 8006726:	4630      	mov	r0, r6
 8006728:	4639      	mov	r1, r7
 800672a:	2200      	movs	r2, #0
 800672c:	f7f9 ff8c 	bl	8000648 <__aeabi_dmul>
 8006730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006732:	4606      	mov	r6, r0
 8006734:	460f      	mov	r7, r1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d09c      	beq.n	8006674 <_strtod_l+0x9a4>
 800673a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800673e:	e79d      	b.n	800667c <_strtod_l+0x9ac>
 8006740:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006870 <_strtod_l+0xba0>
 8006744:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006748:	ec57 6b17 	vmov	r6, r7, d7
 800674c:	e796      	b.n	800667c <_strtod_l+0x9ac>
 800674e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006752:	9b04      	ldr	r3, [sp, #16]
 8006754:	46ca      	mov	sl, r9
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1c2      	bne.n	80066e0 <_strtod_l+0xa10>
 800675a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800675e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006760:	0d1b      	lsrs	r3, r3, #20
 8006762:	051b      	lsls	r3, r3, #20
 8006764:	429a      	cmp	r2, r3
 8006766:	d1bb      	bne.n	80066e0 <_strtod_l+0xa10>
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7fa facc 	bl	8000d08 <__aeabi_d2lz>
 8006770:	f7f9 ff3c 	bl	80005ec <__aeabi_l2d>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4630      	mov	r0, r6
 800677a:	4639      	mov	r1, r7
 800677c:	f7f9 fdac 	bl	80002d8 <__aeabi_dsub>
 8006780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006782:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006786:	ea43 0308 	orr.w	r3, r3, r8
 800678a:	4313      	orrs	r3, r2
 800678c:	4606      	mov	r6, r0
 800678e:	460f      	mov	r7, r1
 8006790:	d054      	beq.n	800683c <_strtod_l+0xb6c>
 8006792:	a339      	add	r3, pc, #228	; (adr r3, 8006878 <_strtod_l+0xba8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7fa f9c8 	bl	8000b2c <__aeabi_dcmplt>
 800679c:	2800      	cmp	r0, #0
 800679e:	f47f ace5 	bne.w	800616c <_strtod_l+0x49c>
 80067a2:	a337      	add	r3, pc, #220	; (adr r3, 8006880 <_strtod_l+0xbb0>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7fa f9dc 	bl	8000b68 <__aeabi_dcmpgt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d095      	beq.n	80066e0 <_strtod_l+0xa10>
 80067b4:	e4da      	b.n	800616c <_strtod_l+0x49c>
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	b333      	cbz	r3, 8006808 <_strtod_l+0xb38>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067c0:	d822      	bhi.n	8006808 <_strtod_l+0xb38>
 80067c2:	a331      	add	r3, pc, #196	; (adr r3, 8006888 <_strtod_l+0xbb8>)
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	4630      	mov	r0, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	f7fa f9b8 	bl	8000b40 <__aeabi_dcmple>
 80067d0:	b1a0      	cbz	r0, 80067fc <_strtod_l+0xb2c>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7fa fa0f 	bl	8000bf8 <__aeabi_d2uiz>
 80067da:	2801      	cmp	r0, #1
 80067dc:	bf38      	it	cc
 80067de:	2001      	movcc	r0, #1
 80067e0:	f7f9 feb8 	bl	8000554 <__aeabi_ui2d>
 80067e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067e6:	4606      	mov	r6, r0
 80067e8:	460f      	mov	r7, r1
 80067ea:	bb23      	cbnz	r3, 8006836 <_strtod_l+0xb66>
 80067ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067f0:	9010      	str	r0, [sp, #64]	; 0x40
 80067f2:	9311      	str	r3, [sp, #68]	; 0x44
 80067f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80067fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006800:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	930f      	str	r3, [sp, #60]	; 0x3c
 8006808:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800680c:	eeb0 0a48 	vmov.f32	s0, s16
 8006810:	eef0 0a68 	vmov.f32	s1, s17
 8006814:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006818:	f002 fae8 	bl	8008dec <__ulp>
 800681c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006820:	ec53 2b10 	vmov	r2, r3, d0
 8006824:	f7f9 ff10 	bl	8000648 <__aeabi_dmul>
 8006828:	ec53 2b18 	vmov	r2, r3, d8
 800682c:	f7f9 fd56 	bl	80002dc <__adddf3>
 8006830:	4680      	mov	r8, r0
 8006832:	4689      	mov	r9, r1
 8006834:	e78d      	b.n	8006752 <_strtod_l+0xa82>
 8006836:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800683a:	e7db      	b.n	80067f4 <_strtod_l+0xb24>
 800683c:	a314      	add	r3, pc, #80	; (adr r3, 8006890 <_strtod_l+0xbc0>)
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f7fa f973 	bl	8000b2c <__aeabi_dcmplt>
 8006846:	e7b3      	b.n	80067b0 <_strtod_l+0xae0>
 8006848:	2300      	movs	r3, #0
 800684a:	930a      	str	r3, [sp, #40]	; 0x28
 800684c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800684e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	f7ff ba7c 	b.w	8005d4e <_strtod_l+0x7e>
 8006856:	2a65      	cmp	r2, #101	; 0x65
 8006858:	f43f ab75 	beq.w	8005f46 <_strtod_l+0x276>
 800685c:	2a45      	cmp	r2, #69	; 0x45
 800685e:	f43f ab72 	beq.w	8005f46 <_strtod_l+0x276>
 8006862:	2301      	movs	r3, #1
 8006864:	f7ff bbaa 	b.w	8005fbc <_strtod_l+0x2ec>
 8006868:	00000000 	.word	0x00000000
 800686c:	bff00000 	.word	0xbff00000
 8006870:	00000000 	.word	0x00000000
 8006874:	3ff00000 	.word	0x3ff00000
 8006878:	94a03595 	.word	0x94a03595
 800687c:	3fdfffff 	.word	0x3fdfffff
 8006880:	35afe535 	.word	0x35afe535
 8006884:	3fe00000 	.word	0x3fe00000
 8006888:	ffc00000 	.word	0xffc00000
 800688c:	41dfffff 	.word	0x41dfffff
 8006890:	94a03595 	.word	0x94a03595
 8006894:	3fcfffff 	.word	0x3fcfffff
 8006898:	3ff00000 	.word	0x3ff00000
 800689c:	3fe00000 	.word	0x3fe00000
 80068a0:	7ff00000 	.word	0x7ff00000
 80068a4:	7fe00000 	.word	0x7fe00000
 80068a8:	7c9fffff 	.word	0x7c9fffff
 80068ac:	7fefffff 	.word	0x7fefffff

080068b0 <_strtod_r>:
 80068b0:	4b01      	ldr	r3, [pc, #4]	; (80068b8 <_strtod_r+0x8>)
 80068b2:	f7ff ba0d 	b.w	8005cd0 <_strtod_l>
 80068b6:	bf00      	nop
 80068b8:	2000004c 	.word	0x2000004c

080068bc <_strtol_l.constprop.0>:
 80068bc:	2b01      	cmp	r3, #1
 80068be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c2:	d001      	beq.n	80068c8 <_strtol_l.constprop.0+0xc>
 80068c4:	2b24      	cmp	r3, #36	; 0x24
 80068c6:	d906      	bls.n	80068d6 <_strtol_l.constprop.0+0x1a>
 80068c8:	f000 f95e 	bl	8006b88 <__errno>
 80068cc:	2316      	movs	r3, #22
 80068ce:	6003      	str	r3, [r0, #0]
 80068d0:	2000      	movs	r0, #0
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80069bc <_strtol_l.constprop.0+0x100>
 80068da:	460d      	mov	r5, r1
 80068dc:	462e      	mov	r6, r5
 80068de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80068e6:	f017 0708 	ands.w	r7, r7, #8
 80068ea:	d1f7      	bne.n	80068dc <_strtol_l.constprop.0+0x20>
 80068ec:	2c2d      	cmp	r4, #45	; 0x2d
 80068ee:	d132      	bne.n	8006956 <_strtol_l.constprop.0+0x9a>
 80068f0:	782c      	ldrb	r4, [r5, #0]
 80068f2:	2701      	movs	r7, #1
 80068f4:	1cb5      	adds	r5, r6, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d05b      	beq.n	80069b2 <_strtol_l.constprop.0+0xf6>
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d109      	bne.n	8006912 <_strtol_l.constprop.0+0x56>
 80068fe:	2c30      	cmp	r4, #48	; 0x30
 8006900:	d107      	bne.n	8006912 <_strtol_l.constprop.0+0x56>
 8006902:	782c      	ldrb	r4, [r5, #0]
 8006904:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006908:	2c58      	cmp	r4, #88	; 0x58
 800690a:	d14d      	bne.n	80069a8 <_strtol_l.constprop.0+0xec>
 800690c:	786c      	ldrb	r4, [r5, #1]
 800690e:	2310      	movs	r3, #16
 8006910:	3502      	adds	r5, #2
 8006912:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006916:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800691a:	f04f 0e00 	mov.w	lr, #0
 800691e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006922:	4676      	mov	r6, lr
 8006924:	fb03 8a19 	mls	sl, r3, r9, r8
 8006928:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800692c:	f1bc 0f09 	cmp.w	ip, #9
 8006930:	d816      	bhi.n	8006960 <_strtol_l.constprop.0+0xa4>
 8006932:	4664      	mov	r4, ip
 8006934:	42a3      	cmp	r3, r4
 8006936:	dd24      	ble.n	8006982 <_strtol_l.constprop.0+0xc6>
 8006938:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800693c:	d008      	beq.n	8006950 <_strtol_l.constprop.0+0x94>
 800693e:	45b1      	cmp	r9, r6
 8006940:	d31c      	bcc.n	800697c <_strtol_l.constprop.0+0xc0>
 8006942:	d101      	bne.n	8006948 <_strtol_l.constprop.0+0x8c>
 8006944:	45a2      	cmp	sl, r4
 8006946:	db19      	blt.n	800697c <_strtol_l.constprop.0+0xc0>
 8006948:	fb06 4603 	mla	r6, r6, r3, r4
 800694c:	f04f 0e01 	mov.w	lr, #1
 8006950:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006954:	e7e8      	b.n	8006928 <_strtol_l.constprop.0+0x6c>
 8006956:	2c2b      	cmp	r4, #43	; 0x2b
 8006958:	bf04      	itt	eq
 800695a:	782c      	ldrbeq	r4, [r5, #0]
 800695c:	1cb5      	addeq	r5, r6, #2
 800695e:	e7ca      	b.n	80068f6 <_strtol_l.constprop.0+0x3a>
 8006960:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006964:	f1bc 0f19 	cmp.w	ip, #25
 8006968:	d801      	bhi.n	800696e <_strtol_l.constprop.0+0xb2>
 800696a:	3c37      	subs	r4, #55	; 0x37
 800696c:	e7e2      	b.n	8006934 <_strtol_l.constprop.0+0x78>
 800696e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006972:	f1bc 0f19 	cmp.w	ip, #25
 8006976:	d804      	bhi.n	8006982 <_strtol_l.constprop.0+0xc6>
 8006978:	3c57      	subs	r4, #87	; 0x57
 800697a:	e7db      	b.n	8006934 <_strtol_l.constprop.0+0x78>
 800697c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8006980:	e7e6      	b.n	8006950 <_strtol_l.constprop.0+0x94>
 8006982:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8006986:	d105      	bne.n	8006994 <_strtol_l.constprop.0+0xd8>
 8006988:	2322      	movs	r3, #34	; 0x22
 800698a:	6003      	str	r3, [r0, #0]
 800698c:	4646      	mov	r6, r8
 800698e:	b942      	cbnz	r2, 80069a2 <_strtol_l.constprop.0+0xe6>
 8006990:	4630      	mov	r0, r6
 8006992:	e79e      	b.n	80068d2 <_strtol_l.constprop.0+0x16>
 8006994:	b107      	cbz	r7, 8006998 <_strtol_l.constprop.0+0xdc>
 8006996:	4276      	negs	r6, r6
 8006998:	2a00      	cmp	r2, #0
 800699a:	d0f9      	beq.n	8006990 <_strtol_l.constprop.0+0xd4>
 800699c:	f1be 0f00 	cmp.w	lr, #0
 80069a0:	d000      	beq.n	80069a4 <_strtol_l.constprop.0+0xe8>
 80069a2:	1e69      	subs	r1, r5, #1
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	e7f3      	b.n	8006990 <_strtol_l.constprop.0+0xd4>
 80069a8:	2430      	movs	r4, #48	; 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1b1      	bne.n	8006912 <_strtol_l.constprop.0+0x56>
 80069ae:	2308      	movs	r3, #8
 80069b0:	e7af      	b.n	8006912 <_strtol_l.constprop.0+0x56>
 80069b2:	2c30      	cmp	r4, #48	; 0x30
 80069b4:	d0a5      	beq.n	8006902 <_strtol_l.constprop.0+0x46>
 80069b6:	230a      	movs	r3, #10
 80069b8:	e7ab      	b.n	8006912 <_strtol_l.constprop.0+0x56>
 80069ba:	bf00      	nop
 80069bc:	080095c9 	.word	0x080095c9

080069c0 <_strtol_r>:
 80069c0:	f7ff bf7c 	b.w	80068bc <_strtol_l.constprop.0>

080069c4 <_fwalk_sglue>:
 80069c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c8:	4607      	mov	r7, r0
 80069ca:	4688      	mov	r8, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	2600      	movs	r6, #0
 80069d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069d4:	f1b9 0901 	subs.w	r9, r9, #1
 80069d8:	d505      	bpl.n	80069e6 <_fwalk_sglue+0x22>
 80069da:	6824      	ldr	r4, [r4, #0]
 80069dc:	2c00      	cmp	r4, #0
 80069de:	d1f7      	bne.n	80069d0 <_fwalk_sglue+0xc>
 80069e0:	4630      	mov	r0, r6
 80069e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e6:	89ab      	ldrh	r3, [r5, #12]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d907      	bls.n	80069fc <_fwalk_sglue+0x38>
 80069ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069f0:	3301      	adds	r3, #1
 80069f2:	d003      	beq.n	80069fc <_fwalk_sglue+0x38>
 80069f4:	4629      	mov	r1, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	47c0      	blx	r8
 80069fa:	4306      	orrs	r6, r0
 80069fc:	3568      	adds	r5, #104	; 0x68
 80069fe:	e7e9      	b.n	80069d4 <_fwalk_sglue+0x10>

08006a00 <__swhatbuf_r>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	460c      	mov	r4, r1
 8006a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	b096      	sub	sp, #88	; 0x58
 8006a0c:	4615      	mov	r5, r2
 8006a0e:	461e      	mov	r6, r3
 8006a10:	da0d      	bge.n	8006a2e <__swhatbuf_r+0x2e>
 8006a12:	89a3      	ldrh	r3, [r4, #12]
 8006a14:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a18:	f04f 0100 	mov.w	r1, #0
 8006a1c:	bf0c      	ite	eq
 8006a1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a22:	2340      	movne	r3, #64	; 0x40
 8006a24:	2000      	movs	r0, #0
 8006a26:	6031      	str	r1, [r6, #0]
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	b016      	add	sp, #88	; 0x58
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	466a      	mov	r2, sp
 8006a30:	f000 f878 	bl	8006b24 <_fstat_r>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	dbec      	blt.n	8006a12 <__swhatbuf_r+0x12>
 8006a38:	9901      	ldr	r1, [sp, #4]
 8006a3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a42:	4259      	negs	r1, r3
 8006a44:	4159      	adcs	r1, r3
 8006a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4a:	e7eb      	b.n	8006a24 <__swhatbuf_r+0x24>

08006a4c <__smakebuf_r>:
 8006a4c:	898b      	ldrh	r3, [r1, #12]
 8006a4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a50:	079d      	lsls	r5, r3, #30
 8006a52:	4606      	mov	r6, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	d507      	bpl.n	8006a68 <__smakebuf_r+0x1c>
 8006a58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	6123      	str	r3, [r4, #16]
 8006a60:	2301      	movs	r3, #1
 8006a62:	6163      	str	r3, [r4, #20]
 8006a64:	b002      	add	sp, #8
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	ab01      	add	r3, sp, #4
 8006a6a:	466a      	mov	r2, sp
 8006a6c:	f7ff ffc8 	bl	8006a00 <__swhatbuf_r>
 8006a70:	9900      	ldr	r1, [sp, #0]
 8006a72:	4605      	mov	r5, r0
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7fe fb69 	bl	800514c <_malloc_r>
 8006a7a:	b948      	cbnz	r0, 8006a90 <__smakebuf_r+0x44>
 8006a7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a80:	059a      	lsls	r2, r3, #22
 8006a82:	d4ef      	bmi.n	8006a64 <__smakebuf_r+0x18>
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	e7e3      	b.n	8006a58 <__smakebuf_r+0xc>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	6020      	str	r0, [r4, #0]
 8006a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a98:	81a3      	strh	r3, [r4, #12]
 8006a9a:	9b00      	ldr	r3, [sp, #0]
 8006a9c:	6163      	str	r3, [r4, #20]
 8006a9e:	9b01      	ldr	r3, [sp, #4]
 8006aa0:	6120      	str	r0, [r4, #16]
 8006aa2:	b15b      	cbz	r3, 8006abc <__smakebuf_r+0x70>
 8006aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f84d 	bl	8006b48 <_isatty_r>
 8006aae:	b128      	cbz	r0, 8006abc <__smakebuf_r+0x70>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	81a3      	strh	r3, [r4, #12]
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	431d      	orrs	r5, r3
 8006ac0:	81a5      	strh	r5, [r4, #12]
 8006ac2:	e7cf      	b.n	8006a64 <__smakebuf_r+0x18>

08006ac4 <iprintf>:
 8006ac4:	b40f      	push	{r0, r1, r2, r3}
 8006ac6:	b507      	push	{r0, r1, r2, lr}
 8006ac8:	4906      	ldr	r1, [pc, #24]	; (8006ae4 <iprintf+0x20>)
 8006aca:	ab04      	add	r3, sp, #16
 8006acc:	6808      	ldr	r0, [r1, #0]
 8006ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ad2:	6881      	ldr	r1, [r0, #8]
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	f001 fc43 	bl	8008360 <_vfiprintf_r>
 8006ada:	b003      	add	sp, #12
 8006adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae0:	b004      	add	sp, #16
 8006ae2:	4770      	bx	lr
 8006ae4:	20000204 	.word	0x20000204

08006ae8 <strncmp>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	b16a      	cbz	r2, 8006b08 <strncmp+0x20>
 8006aec:	3901      	subs	r1, #1
 8006aee:	1884      	adds	r4, r0, r2
 8006af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d103      	bne.n	8006b04 <strncmp+0x1c>
 8006afc:	42a0      	cmp	r0, r4
 8006afe:	d001      	beq.n	8006b04 <strncmp+0x1c>
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	d1f5      	bne.n	8006af0 <strncmp+0x8>
 8006b04:	1ad0      	subs	r0, r2, r3
 8006b06:	bd10      	pop	{r4, pc}
 8006b08:	4610      	mov	r0, r2
 8006b0a:	e7fc      	b.n	8006b06 <strncmp+0x1e>

08006b0c <memset>:
 8006b0c:	4402      	add	r2, r0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d100      	bne.n	8006b16 <memset+0xa>
 8006b14:	4770      	bx	lr
 8006b16:	f803 1b01 	strb.w	r1, [r3], #1
 8006b1a:	e7f9      	b.n	8006b10 <memset+0x4>

08006b1c <_localeconv_r>:
 8006b1c:	4800      	ldr	r0, [pc, #0]	; (8006b20 <_localeconv_r+0x4>)
 8006b1e:	4770      	bx	lr
 8006b20:	2000013c 	.word	0x2000013c

08006b24 <_fstat_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	; (8006b44 <_fstat_r+0x20>)
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f7fa ffc0 	bl	8001ab6 <_fstat>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d102      	bne.n	8006b40 <_fstat_r+0x1c>
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	b103      	cbz	r3, 8006b40 <_fstat_r+0x1c>
 8006b3e:	6023      	str	r3, [r4, #0]
 8006b40:	bd38      	pop	{r3, r4, r5, pc}
 8006b42:	bf00      	nop
 8006b44:	200004d0 	.word	0x200004d0

08006b48 <_isatty_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d06      	ldr	r5, [pc, #24]	; (8006b64 <_isatty_r+0x1c>)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4608      	mov	r0, r1
 8006b52:	602b      	str	r3, [r5, #0]
 8006b54:	f7fa ffbf 	bl	8001ad6 <_isatty>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_isatty_r+0x1a>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_isatty_r+0x1a>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	200004d0 	.word	0x200004d0

08006b68 <_sbrk_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d06      	ldr	r5, [pc, #24]	; (8006b84 <_sbrk_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	f7fa ffc8 	bl	8001b08 <_sbrk>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_sbrk_r+0x1a>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_sbrk_r+0x1a>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	200004d0 	.word	0x200004d0

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000204 	.word	0x20000204

08006b94 <__libc_init_array>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4d0d      	ldr	r5, [pc, #52]	; (8006bcc <__libc_init_array+0x38>)
 8006b98:	4c0d      	ldr	r4, [pc, #52]	; (8006bd0 <__libc_init_array+0x3c>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	42a6      	cmp	r6, r4
 8006ba2:	d109      	bne.n	8006bb8 <__libc_init_array+0x24>
 8006ba4:	4d0b      	ldr	r5, [pc, #44]	; (8006bd4 <__libc_init_array+0x40>)
 8006ba6:	4c0c      	ldr	r4, [pc, #48]	; (8006bd8 <__libc_init_array+0x44>)
 8006ba8:	f002 fc70 	bl	800948c <_init>
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	42a6      	cmp	r6, r4
 8006bb4:	d105      	bne.n	8006bc2 <__libc_init_array+0x2e>
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbc:	4798      	blx	r3
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7ee      	b.n	8006ba0 <__libc_init_array+0xc>
 8006bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc6:	4798      	blx	r3
 8006bc8:	3601      	adds	r6, #1
 8006bca:	e7f2      	b.n	8006bb2 <__libc_init_array+0x1e>
 8006bcc:	08009960 	.word	0x08009960
 8006bd0:	08009960 	.word	0x08009960
 8006bd4:	08009960 	.word	0x08009960
 8006bd8:	08009964 	.word	0x08009964

08006bdc <__retarget_lock_init_recursive>:
 8006bdc:	4770      	bx	lr

08006bde <__retarget_lock_acquire_recursive>:
 8006bde:	4770      	bx	lr

08006be0 <__retarget_lock_release_recursive>:
 8006be0:	4770      	bx	lr

08006be2 <memcpy>:
 8006be2:	440a      	add	r2, r1
 8006be4:	4291      	cmp	r1, r2
 8006be6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006bea:	d100      	bne.n	8006bee <memcpy+0xc>
 8006bec:	4770      	bx	lr
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf8:	4291      	cmp	r1, r2
 8006bfa:	d1f9      	bne.n	8006bf0 <memcpy+0xe>
 8006bfc:	bd10      	pop	{r4, pc}
	...

08006c00 <nan>:
 8006c00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006c08 <nan+0x8>
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	00000000 	.word	0x00000000
 8006c0c:	7ff80000 	.word	0x7ff80000

08006c10 <nanf>:
 8006c10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c18 <nanf+0x8>
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	7fc00000 	.word	0x7fc00000

08006c1c <quorem>:
 8006c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	6903      	ldr	r3, [r0, #16]
 8006c22:	690c      	ldr	r4, [r1, #16]
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	4607      	mov	r7, r0
 8006c28:	db7e      	blt.n	8006d28 <quorem+0x10c>
 8006c2a:	3c01      	subs	r4, #1
 8006c2c:	f101 0814 	add.w	r8, r1, #20
 8006c30:	f100 0514 	add.w	r5, r0, #20
 8006c34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c42:	3301      	adds	r3, #1
 8006c44:	429a      	cmp	r2, r3
 8006c46:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c52:	d331      	bcc.n	8006cb8 <quorem+0x9c>
 8006c54:	f04f 0e00 	mov.w	lr, #0
 8006c58:	4640      	mov	r0, r8
 8006c5a:	46ac      	mov	ip, r5
 8006c5c:	46f2      	mov	sl, lr
 8006c5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c62:	b293      	uxth	r3, r2
 8006c64:	fb06 e303 	mla	r3, r6, r3, lr
 8006c68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c6c:	0c1a      	lsrs	r2, r3, #16
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ebaa 0303 	sub.w	r3, sl, r3
 8006c74:	f8dc a000 	ldr.w	sl, [ip]
 8006c78:	fa13 f38a 	uxtah	r3, r3, sl
 8006c7c:	fb06 220e 	mla	r2, r6, lr, r2
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	9b00      	ldr	r3, [sp, #0]
 8006c84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c92:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c96:	4581      	cmp	r9, r0
 8006c98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9c:	f84c 3b04 	str.w	r3, [ip], #4
 8006ca0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ca4:	d2db      	bcs.n	8006c5e <quorem+0x42>
 8006ca6:	f855 300b 	ldr.w	r3, [r5, fp]
 8006caa:	b92b      	cbnz	r3, 8006cb8 <quorem+0x9c>
 8006cac:	9b01      	ldr	r3, [sp, #4]
 8006cae:	3b04      	subs	r3, #4
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	d32c      	bcc.n	8006d10 <quorem+0xf4>
 8006cb6:	613c      	str	r4, [r7, #16]
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f001 fff1 	bl	8008ca0 <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	db22      	blt.n	8006d08 <quorem+0xec>
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ccc:	f8d1 c000 	ldr.w	ip, [r1]
 8006cd0:	b293      	uxth	r3, r2
 8006cd2:	1ac3      	subs	r3, r0, r3
 8006cd4:	0c12      	lsrs	r2, r2, #16
 8006cd6:	fa13 f38c 	uxtah	r3, r3, ip
 8006cda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce8:	45c1      	cmp	r9, r8
 8006cea:	f841 3b04 	str.w	r3, [r1], #4
 8006cee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cf2:	d2e9      	bcs.n	8006cc8 <quorem+0xac>
 8006cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cfc:	b922      	cbnz	r2, 8006d08 <quorem+0xec>
 8006cfe:	3b04      	subs	r3, #4
 8006d00:	429d      	cmp	r5, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	d30a      	bcc.n	8006d1c <quorem+0x100>
 8006d06:	613c      	str	r4, [r7, #16]
 8006d08:	4630      	mov	r0, r6
 8006d0a:	b003      	add	sp, #12
 8006d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	3b04      	subs	r3, #4
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	d1ce      	bne.n	8006cb6 <quorem+0x9a>
 8006d18:	3c01      	subs	r4, #1
 8006d1a:	e7c9      	b.n	8006cb0 <quorem+0x94>
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d1f0      	bne.n	8006d06 <quorem+0xea>
 8006d24:	3c01      	subs	r4, #1
 8006d26:	e7eb      	b.n	8006d00 <quorem+0xe4>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7ee      	b.n	8006d0a <quorem+0xee>
 8006d2c:	0000      	movs	r0, r0
	...

08006d30 <_dtoa_r>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b04 	vpush	{d8-d9}
 8006d38:	69c5      	ldr	r5, [r0, #28]
 8006d3a:	b093      	sub	sp, #76	; 0x4c
 8006d3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d40:	ec57 6b10 	vmov	r6, r7, d0
 8006d44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d48:	9107      	str	r1, [sp, #28]
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d50:	b975      	cbnz	r5, 8006d70 <_dtoa_r+0x40>
 8006d52:	2010      	movs	r0, #16
 8006d54:	f7fe f9d2 	bl	80050fc <malloc>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	61e0      	str	r0, [r4, #28]
 8006d5c:	b920      	cbnz	r0, 8006d68 <_dtoa_r+0x38>
 8006d5e:	4bae      	ldr	r3, [pc, #696]	; (8007018 <_dtoa_r+0x2e8>)
 8006d60:	21ef      	movs	r1, #239	; 0xef
 8006d62:	48ae      	ldr	r0, [pc, #696]	; (800701c <_dtoa_r+0x2ec>)
 8006d64:	f002 faf8 	bl	8009358 <__assert_func>
 8006d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d6c:	6005      	str	r5, [r0, #0]
 8006d6e:	60c5      	str	r5, [r0, #12]
 8006d70:	69e3      	ldr	r3, [r4, #28]
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	b151      	cbz	r1, 8006d8c <_dtoa_r+0x5c>
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	604a      	str	r2, [r1, #4]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4093      	lsls	r3, r2
 8006d7e:	608b      	str	r3, [r1, #8]
 8006d80:	4620      	mov	r0, r4
 8006d82:	f001 fd07 	bl	8008794 <_Bfree>
 8006d86:	69e3      	ldr	r3, [r4, #28]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	1e3b      	subs	r3, r7, #0
 8006d8e:	bfbb      	ittet	lt
 8006d90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	9303      	strlt	r3, [sp, #12]
 8006d96:	2300      	movge	r3, #0
 8006d98:	2201      	movlt	r2, #1
 8006d9a:	bfac      	ite	ge
 8006d9c:	f8c8 3000 	strge.w	r3, [r8]
 8006da0:	f8c8 2000 	strlt.w	r2, [r8]
 8006da4:	4b9e      	ldr	r3, [pc, #632]	; (8007020 <_dtoa_r+0x2f0>)
 8006da6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006daa:	ea33 0308 	bics.w	r3, r3, r8
 8006dae:	d11b      	bne.n	8006de8 <_dtoa_r+0xb8>
 8006db0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006db2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006dbc:	4333      	orrs	r3, r6
 8006dbe:	f000 8593 	beq.w	80078e8 <_dtoa_r+0xbb8>
 8006dc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc4:	b963      	cbnz	r3, 8006de0 <_dtoa_r+0xb0>
 8006dc6:	4b97      	ldr	r3, [pc, #604]	; (8007024 <_dtoa_r+0x2f4>)
 8006dc8:	e027      	b.n	8006e1a <_dtoa_r+0xea>
 8006dca:	4b97      	ldr	r3, [pc, #604]	; (8007028 <_dtoa_r+0x2f8>)
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	9800      	ldr	r0, [sp, #0]
 8006dd6:	b013      	add	sp, #76	; 0x4c
 8006dd8:	ecbd 8b04 	vpop	{d8-d9}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	4b90      	ldr	r3, [pc, #576]	; (8007024 <_dtoa_r+0x2f4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	3303      	adds	r3, #3
 8006de6:	e7f3      	b.n	8006dd0 <_dtoa_r+0xa0>
 8006de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	ec51 0b17 	vmov	r0, r1, d7
 8006df2:	eeb0 8a47 	vmov.f32	s16, s14
 8006df6:	eef0 8a67 	vmov.f32	s17, s15
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f7f9 fe8c 	bl	8000b18 <__aeabi_dcmpeq>
 8006e00:	4681      	mov	r9, r0
 8006e02:	b160      	cbz	r0, 8006e1e <_dtoa_r+0xee>
 8006e04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e06:	2301      	movs	r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8568 	beq.w	80078e2 <_dtoa_r+0xbb2>
 8006e12:	4b86      	ldr	r3, [pc, #536]	; (800702c <_dtoa_r+0x2fc>)
 8006e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	e7da      	b.n	8006dd4 <_dtoa_r+0xa4>
 8006e1e:	aa10      	add	r2, sp, #64	; 0x40
 8006e20:	a911      	add	r1, sp, #68	; 0x44
 8006e22:	4620      	mov	r0, r4
 8006e24:	eeb0 0a48 	vmov.f32	s0, s16
 8006e28:	eef0 0a68 	vmov.f32	s1, s17
 8006e2c:	f002 f84e 	bl	8008ecc <__d2b>
 8006e30:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e34:	4682      	mov	sl, r0
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	d07f      	beq.n	8006f3a <_dtoa_r+0x20a>
 8006e3a:	ee18 3a90 	vmov	r3, s17
 8006e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e42:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e46:	ec51 0b18 	vmov	r0, r1, d8
 8006e4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e52:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e56:	4619      	mov	r1, r3
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4b75      	ldr	r3, [pc, #468]	; (8007030 <_dtoa_r+0x300>)
 8006e5c:	f7f9 fa3c 	bl	80002d8 <__aeabi_dsub>
 8006e60:	a367      	add	r3, pc, #412	; (adr r3, 8007000 <_dtoa_r+0x2d0>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	f7f9 fbef 	bl	8000648 <__aeabi_dmul>
 8006e6a:	a367      	add	r3, pc, #412	; (adr r3, 8007008 <_dtoa_r+0x2d8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa34 	bl	80002dc <__adddf3>
 8006e74:	4606      	mov	r6, r0
 8006e76:	4628      	mov	r0, r5
 8006e78:	460f      	mov	r7, r1
 8006e7a:	f7f9 fb7b 	bl	8000574 <__aeabi_i2d>
 8006e7e:	a364      	add	r3, pc, #400	; (adr r3, 8007010 <_dtoa_r+0x2e0>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 fbe0 	bl	8000648 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7f9 fa24 	bl	80002dc <__adddf3>
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	f7f9 fe86 	bl	8000ba8 <__aeabi_d2iz>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	f7f9 fe41 	bl	8000b2c <__aeabi_dcmplt>
 8006eaa:	b148      	cbz	r0, 8006ec0 <_dtoa_r+0x190>
 8006eac:	4658      	mov	r0, fp
 8006eae:	f7f9 fb61 	bl	8000574 <__aeabi_i2d>
 8006eb2:	4632      	mov	r2, r6
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	f7f9 fe2f 	bl	8000b18 <__aeabi_dcmpeq>
 8006eba:	b908      	cbnz	r0, 8006ec0 <_dtoa_r+0x190>
 8006ebc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006ec0:	f1bb 0f16 	cmp.w	fp, #22
 8006ec4:	d857      	bhi.n	8006f76 <_dtoa_r+0x246>
 8006ec6:	4b5b      	ldr	r3, [pc, #364]	; (8007034 <_dtoa_r+0x304>)
 8006ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	ec51 0b18 	vmov	r0, r1, d8
 8006ed4:	f7f9 fe2a 	bl	8000b2c <__aeabi_dcmplt>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d04e      	beq.n	8006f7a <_dtoa_r+0x24a>
 8006edc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ee6:	1b5b      	subs	r3, r3, r5
 8006ee8:	1e5a      	subs	r2, r3, #1
 8006eea:	bf45      	ittet	mi
 8006eec:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ef0:	9305      	strmi	r3, [sp, #20]
 8006ef2:	2300      	movpl	r3, #0
 8006ef4:	2300      	movmi	r3, #0
 8006ef6:	9206      	str	r2, [sp, #24]
 8006ef8:	bf54      	ite	pl
 8006efa:	9305      	strpl	r3, [sp, #20]
 8006efc:	9306      	strmi	r3, [sp, #24]
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	db3c      	blt.n	8006f7e <_dtoa_r+0x24e>
 8006f04:	9b06      	ldr	r3, [sp, #24]
 8006f06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006f0a:	445b      	add	r3, fp
 8006f0c:	9306      	str	r3, [sp, #24]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9308      	str	r3, [sp, #32]
 8006f12:	9b07      	ldr	r3, [sp, #28]
 8006f14:	2b09      	cmp	r3, #9
 8006f16:	d868      	bhi.n	8006fea <_dtoa_r+0x2ba>
 8006f18:	2b05      	cmp	r3, #5
 8006f1a:	bfc4      	itt	gt
 8006f1c:	3b04      	subgt	r3, #4
 8006f1e:	9307      	strgt	r3, [sp, #28]
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	f1a3 0302 	sub.w	r3, r3, #2
 8006f26:	bfcc      	ite	gt
 8006f28:	2500      	movgt	r5, #0
 8006f2a:	2501      	movle	r5, #1
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	f200 8085 	bhi.w	800703c <_dtoa_r+0x30c>
 8006f32:	e8df f003 	tbb	[pc, r3]
 8006f36:	3b2e      	.short	0x3b2e
 8006f38:	5839      	.short	0x5839
 8006f3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f3e:	441d      	add	r5, r3
 8006f40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	bfc1      	itttt	gt
 8006f48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f58:	bfd6      	itet	le
 8006f5a:	f1c3 0320 	rsble	r3, r3, #32
 8006f5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f62:	fa06 f003 	lslle.w	r0, r6, r3
 8006f66:	f7f9 faf5 	bl	8000554 <__aeabi_ui2d>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f70:	3d01      	subs	r5, #1
 8006f72:	920e      	str	r2, [sp, #56]	; 0x38
 8006f74:	e76f      	b.n	8006e56 <_dtoa_r+0x126>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7b3      	b.n	8006ee2 <_dtoa_r+0x1b2>
 8006f7a:	900c      	str	r0, [sp, #48]	; 0x30
 8006f7c:	e7b2      	b.n	8006ee4 <_dtoa_r+0x1b4>
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	eba3 030b 	sub.w	r3, r3, fp
 8006f84:	9305      	str	r3, [sp, #20]
 8006f86:	f1cb 0300 	rsb	r3, fp, #0
 8006f8a:	9308      	str	r3, [sp, #32]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f90:	e7bf      	b.n	8006f12 <_dtoa_r+0x1e2>
 8006f92:	2300      	movs	r3, #0
 8006f94:	9309      	str	r3, [sp, #36]	; 0x24
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	dc52      	bgt.n	8007042 <_dtoa_r+0x312>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9301      	str	r3, [sp, #4]
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8006fa6:	e00b      	b.n	8006fc0 <_dtoa_r+0x290>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e7f3      	b.n	8006f94 <_dtoa_r+0x264>
 8006fac:	2300      	movs	r3, #0
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	445b      	add	r3, fp
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	bfb8      	it	lt
 8006fbe:	2301      	movlt	r3, #1
 8006fc0:	69e0      	ldr	r0, [r4, #28]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f102 0614 	add.w	r6, r2, #20
 8006fca:	429e      	cmp	r6, r3
 8006fcc:	d93d      	bls.n	800704a <_dtoa_r+0x31a>
 8006fce:	6041      	str	r1, [r0, #4]
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f001 fb9f 	bl	8008714 <_Balloc>
 8006fd6:	9000      	str	r0, [sp, #0]
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d139      	bne.n	8007050 <_dtoa_r+0x320>
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <_dtoa_r+0x308>)
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f240 11af 	movw	r1, #431	; 0x1af
 8006fe4:	e6bd      	b.n	8006d62 <_dtoa_r+0x32>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e7e1      	b.n	8006fae <_dtoa_r+0x27e>
 8006fea:	2501      	movs	r5, #1
 8006fec:	2300      	movs	r3, #0
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	9509      	str	r5, [sp, #36]	; 0x24
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2312      	movs	r3, #18
 8006ffe:	e7d1      	b.n	8006fa4 <_dtoa_r+0x274>
 8007000:	636f4361 	.word	0x636f4361
 8007004:	3fd287a7 	.word	0x3fd287a7
 8007008:	8b60c8b3 	.word	0x8b60c8b3
 800700c:	3fc68a28 	.word	0x3fc68a28
 8007010:	509f79fb 	.word	0x509f79fb
 8007014:	3fd34413 	.word	0x3fd34413
 8007018:	080096d6 	.word	0x080096d6
 800701c:	080096ed 	.word	0x080096ed
 8007020:	7ff00000 	.word	0x7ff00000
 8007024:	080096d2 	.word	0x080096d2
 8007028:	080096c9 	.word	0x080096c9
 800702c:	08009541 	.word	0x08009541
 8007030:	3ff80000 	.word	0x3ff80000
 8007034:	08009848 	.word	0x08009848
 8007038:	08009745 	.word	0x08009745
 800703c:	2301      	movs	r3, #1
 800703e:	9309      	str	r3, [sp, #36]	; 0x24
 8007040:	e7d7      	b.n	8006ff2 <_dtoa_r+0x2c2>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	e7ba      	b.n	8006fc0 <_dtoa_r+0x290>
 800704a:	3101      	adds	r1, #1
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	e7ba      	b.n	8006fc6 <_dtoa_r+0x296>
 8007050:	69e3      	ldr	r3, [r4, #28]
 8007052:	9a00      	ldr	r2, [sp, #0]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b0e      	cmp	r3, #14
 800705a:	f200 80a8 	bhi.w	80071ae <_dtoa_r+0x47e>
 800705e:	2d00      	cmp	r5, #0
 8007060:	f000 80a5 	beq.w	80071ae <_dtoa_r+0x47e>
 8007064:	f1bb 0f00 	cmp.w	fp, #0
 8007068:	dd38      	ble.n	80070dc <_dtoa_r+0x3ac>
 800706a:	4bc0      	ldr	r3, [pc, #768]	; (800736c <_dtoa_r+0x63c>)
 800706c:	f00b 020f 	and.w	r2, fp, #15
 8007070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007074:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007078:	e9d3 6700 	ldrd	r6, r7, [r3]
 800707c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007080:	d019      	beq.n	80070b6 <_dtoa_r+0x386>
 8007082:	4bbb      	ldr	r3, [pc, #748]	; (8007370 <_dtoa_r+0x640>)
 8007084:	ec51 0b18 	vmov	r0, r1, d8
 8007088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800708c:	f7f9 fc06 	bl	800089c <__aeabi_ddiv>
 8007090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007094:	f008 080f 	and.w	r8, r8, #15
 8007098:	2503      	movs	r5, #3
 800709a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007370 <_dtoa_r+0x640>
 800709e:	f1b8 0f00 	cmp.w	r8, #0
 80070a2:	d10a      	bne.n	80070ba <_dtoa_r+0x38a>
 80070a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a8:	4632      	mov	r2, r6
 80070aa:	463b      	mov	r3, r7
 80070ac:	f7f9 fbf6 	bl	800089c <__aeabi_ddiv>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	e02b      	b.n	800710e <_dtoa_r+0x3de>
 80070b6:	2502      	movs	r5, #2
 80070b8:	e7ef      	b.n	800709a <_dtoa_r+0x36a>
 80070ba:	f018 0f01 	tst.w	r8, #1
 80070be:	d008      	beq.n	80070d2 <_dtoa_r+0x3a2>
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80070c8:	f7f9 fabe 	bl	8000648 <__aeabi_dmul>
 80070cc:	3501      	adds	r5, #1
 80070ce:	4606      	mov	r6, r0
 80070d0:	460f      	mov	r7, r1
 80070d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070d6:	f109 0908 	add.w	r9, r9, #8
 80070da:	e7e0      	b.n	800709e <_dtoa_r+0x36e>
 80070dc:	f000 809f 	beq.w	800721e <_dtoa_r+0x4ee>
 80070e0:	f1cb 0600 	rsb	r6, fp, #0
 80070e4:	4ba1      	ldr	r3, [pc, #644]	; (800736c <_dtoa_r+0x63c>)
 80070e6:	4fa2      	ldr	r7, [pc, #648]	; (8007370 <_dtoa_r+0x640>)
 80070e8:	f006 020f 	and.w	r2, r6, #15
 80070ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	ec51 0b18 	vmov	r0, r1, d8
 80070f8:	f7f9 faa6 	bl	8000648 <__aeabi_dmul>
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	1136      	asrs	r6, r6, #4
 8007102:	2300      	movs	r3, #0
 8007104:	2502      	movs	r5, #2
 8007106:	2e00      	cmp	r6, #0
 8007108:	d17e      	bne.n	8007208 <_dtoa_r+0x4d8>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1d0      	bne.n	80070b0 <_dtoa_r+0x380>
 800710e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007110:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8084 	beq.w	8007222 <_dtoa_r+0x4f2>
 800711a:	4b96      	ldr	r3, [pc, #600]	; (8007374 <_dtoa_r+0x644>)
 800711c:	2200      	movs	r2, #0
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fd03 	bl	8000b2c <__aeabi_dcmplt>
 8007126:	2800      	cmp	r0, #0
 8007128:	d07b      	beq.n	8007222 <_dtoa_r+0x4f2>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d078      	beq.n	8007222 <_dtoa_r+0x4f2>
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dd39      	ble.n	80071aa <_dtoa_r+0x47a>
 8007136:	4b90      	ldr	r3, [pc, #576]	; (8007378 <_dtoa_r+0x648>)
 8007138:	2200      	movs	r2, #0
 800713a:	4640      	mov	r0, r8
 800713c:	4649      	mov	r1, r9
 800713e:	f7f9 fa83 	bl	8000648 <__aeabi_dmul>
 8007142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007146:	9e01      	ldr	r6, [sp, #4]
 8007148:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800714c:	3501      	adds	r5, #1
 800714e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007152:	4628      	mov	r0, r5
 8007154:	f7f9 fa0e 	bl	8000574 <__aeabi_i2d>
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	f7f9 fa74 	bl	8000648 <__aeabi_dmul>
 8007160:	4b86      	ldr	r3, [pc, #536]	; (800737c <_dtoa_r+0x64c>)
 8007162:	2200      	movs	r2, #0
 8007164:	f7f9 f8ba 	bl	80002dc <__adddf3>
 8007168:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800716c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	2e00      	cmp	r6, #0
 8007174:	d158      	bne.n	8007228 <_dtoa_r+0x4f8>
 8007176:	4b82      	ldr	r3, [pc, #520]	; (8007380 <_dtoa_r+0x650>)
 8007178:	2200      	movs	r2, #0
 800717a:	4640      	mov	r0, r8
 800717c:	4649      	mov	r1, r9
 800717e:	f7f9 f8ab 	bl	80002d8 <__aeabi_dsub>
 8007182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007186:	4680      	mov	r8, r0
 8007188:	4689      	mov	r9, r1
 800718a:	f7f9 fced 	bl	8000b68 <__aeabi_dcmpgt>
 800718e:	2800      	cmp	r0, #0
 8007190:	f040 8296 	bne.w	80076c0 <_dtoa_r+0x990>
 8007194:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007198:	4640      	mov	r0, r8
 800719a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 fcc4 	bl	8000b2c <__aeabi_dcmplt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 8289 	bne.w	80076bc <_dtoa_r+0x98c>
 80071aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80071ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f2c0 814e 	blt.w	8007452 <_dtoa_r+0x722>
 80071b6:	f1bb 0f0e 	cmp.w	fp, #14
 80071ba:	f300 814a 	bgt.w	8007452 <_dtoa_r+0x722>
 80071be:	4b6b      	ldr	r3, [pc, #428]	; (800736c <_dtoa_r+0x63c>)
 80071c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80071c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f280 80dc 	bge.w	8007388 <_dtoa_r+0x658>
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f300 80d8 	bgt.w	8007388 <_dtoa_r+0x658>
 80071d8:	f040 826f 	bne.w	80076ba <_dtoa_r+0x98a>
 80071dc:	4b68      	ldr	r3, [pc, #416]	; (8007380 <_dtoa_r+0x650>)
 80071de:	2200      	movs	r2, #0
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 fa30 	bl	8000648 <__aeabi_dmul>
 80071e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ec:	f7f9 fcb2 	bl	8000b54 <__aeabi_dcmpge>
 80071f0:	9e04      	ldr	r6, [sp, #16]
 80071f2:	4637      	mov	r7, r6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f040 8245 	bne.w	8007684 <_dtoa_r+0x954>
 80071fa:	9d00      	ldr	r5, [sp, #0]
 80071fc:	2331      	movs	r3, #49	; 0x31
 80071fe:	f805 3b01 	strb.w	r3, [r5], #1
 8007202:	f10b 0b01 	add.w	fp, fp, #1
 8007206:	e241      	b.n	800768c <_dtoa_r+0x95c>
 8007208:	07f2      	lsls	r2, r6, #31
 800720a:	d505      	bpl.n	8007218 <_dtoa_r+0x4e8>
 800720c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007210:	f7f9 fa1a 	bl	8000648 <__aeabi_dmul>
 8007214:	3501      	adds	r5, #1
 8007216:	2301      	movs	r3, #1
 8007218:	1076      	asrs	r6, r6, #1
 800721a:	3708      	adds	r7, #8
 800721c:	e773      	b.n	8007106 <_dtoa_r+0x3d6>
 800721e:	2502      	movs	r5, #2
 8007220:	e775      	b.n	800710e <_dtoa_r+0x3de>
 8007222:	9e04      	ldr	r6, [sp, #16]
 8007224:	465f      	mov	r7, fp
 8007226:	e792      	b.n	800714e <_dtoa_r+0x41e>
 8007228:	9900      	ldr	r1, [sp, #0]
 800722a:	4b50      	ldr	r3, [pc, #320]	; (800736c <_dtoa_r+0x63c>)
 800722c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007230:	4431      	add	r1, r6
 8007232:	9102      	str	r1, [sp, #8]
 8007234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007236:	eeb0 9a47 	vmov.f32	s18, s14
 800723a:	eef0 9a67 	vmov.f32	s19, s15
 800723e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007242:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007246:	2900      	cmp	r1, #0
 8007248:	d044      	beq.n	80072d4 <_dtoa_r+0x5a4>
 800724a:	494e      	ldr	r1, [pc, #312]	; (8007384 <_dtoa_r+0x654>)
 800724c:	2000      	movs	r0, #0
 800724e:	f7f9 fb25 	bl	800089c <__aeabi_ddiv>
 8007252:	ec53 2b19 	vmov	r2, r3, d9
 8007256:	f7f9 f83f 	bl	80002d8 <__aeabi_dsub>
 800725a:	9d00      	ldr	r5, [sp, #0]
 800725c:	ec41 0b19 	vmov	d9, r0, r1
 8007260:	4649      	mov	r1, r9
 8007262:	4640      	mov	r0, r8
 8007264:	f7f9 fca0 	bl	8000ba8 <__aeabi_d2iz>
 8007268:	4606      	mov	r6, r0
 800726a:	f7f9 f983 	bl	8000574 <__aeabi_i2d>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 f82f 	bl	80002d8 <__aeabi_dsub>
 800727a:	3630      	adds	r6, #48	; 0x30
 800727c:	f805 6b01 	strb.w	r6, [r5], #1
 8007280:	ec53 2b19 	vmov	r2, r3, d9
 8007284:	4680      	mov	r8, r0
 8007286:	4689      	mov	r9, r1
 8007288:	f7f9 fc50 	bl	8000b2c <__aeabi_dcmplt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d164      	bne.n	800735a <_dtoa_r+0x62a>
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4937      	ldr	r1, [pc, #220]	; (8007374 <_dtoa_r+0x644>)
 8007296:	2000      	movs	r0, #0
 8007298:	f7f9 f81e 	bl	80002d8 <__aeabi_dsub>
 800729c:	ec53 2b19 	vmov	r2, r3, d9
 80072a0:	f7f9 fc44 	bl	8000b2c <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f040 80b6 	bne.w	8007416 <_dtoa_r+0x6e6>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	429d      	cmp	r5, r3
 80072ae:	f43f af7c 	beq.w	80071aa <_dtoa_r+0x47a>
 80072b2:	4b31      	ldr	r3, [pc, #196]	; (8007378 <_dtoa_r+0x648>)
 80072b4:	ec51 0b19 	vmov	r0, r1, d9
 80072b8:	2200      	movs	r2, #0
 80072ba:	f7f9 f9c5 	bl	8000648 <__aeabi_dmul>
 80072be:	4b2e      	ldr	r3, [pc, #184]	; (8007378 <_dtoa_r+0x648>)
 80072c0:	ec41 0b19 	vmov	d9, r0, r1
 80072c4:	2200      	movs	r2, #0
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 f9bd 	bl	8000648 <__aeabi_dmul>
 80072ce:	4680      	mov	r8, r0
 80072d0:	4689      	mov	r9, r1
 80072d2:	e7c5      	b.n	8007260 <_dtoa_r+0x530>
 80072d4:	ec51 0b17 	vmov	r0, r1, d7
 80072d8:	f7f9 f9b6 	bl	8000648 <__aeabi_dmul>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	9d00      	ldr	r5, [sp, #0]
 80072e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072e2:	ec41 0b19 	vmov	d9, r0, r1
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	f7f9 fc5d 	bl	8000ba8 <__aeabi_d2iz>
 80072ee:	4606      	mov	r6, r0
 80072f0:	f7f9 f940 	bl	8000574 <__aeabi_i2d>
 80072f4:	3630      	adds	r6, #48	; 0x30
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	4640      	mov	r0, r8
 80072fc:	4649      	mov	r1, r9
 80072fe:	f7f8 ffeb 	bl	80002d8 <__aeabi_dsub>
 8007302:	f805 6b01 	strb.w	r6, [r5], #1
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	429d      	cmp	r5, r3
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	d124      	bne.n	800735e <_dtoa_r+0x62e>
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <_dtoa_r+0x654>)
 8007316:	ec51 0b19 	vmov	r0, r1, d9
 800731a:	f7f8 ffdf 	bl	80002dc <__adddf3>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f9 fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800732a:	2800      	cmp	r0, #0
 800732c:	d173      	bne.n	8007416 <_dtoa_r+0x6e6>
 800732e:	ec53 2b19 	vmov	r2, r3, d9
 8007332:	4914      	ldr	r1, [pc, #80]	; (8007384 <_dtoa_r+0x654>)
 8007334:	2000      	movs	r0, #0
 8007336:	f7f8 ffcf 	bl	80002d8 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4640      	mov	r0, r8
 8007340:	4649      	mov	r1, r9
 8007342:	f7f9 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f af2f 	beq.w	80071aa <_dtoa_r+0x47a>
 800734c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800734e:	1e6b      	subs	r3, r5, #1
 8007350:	930f      	str	r3, [sp, #60]	; 0x3c
 8007352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007356:	2b30      	cmp	r3, #48	; 0x30
 8007358:	d0f8      	beq.n	800734c <_dtoa_r+0x61c>
 800735a:	46bb      	mov	fp, r7
 800735c:	e04a      	b.n	80073f4 <_dtoa_r+0x6c4>
 800735e:	4b06      	ldr	r3, [pc, #24]	; (8007378 <_dtoa_r+0x648>)
 8007360:	f7f9 f972 	bl	8000648 <__aeabi_dmul>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	e7bd      	b.n	80072e6 <_dtoa_r+0x5b6>
 800736a:	bf00      	nop
 800736c:	08009848 	.word	0x08009848
 8007370:	08009820 	.word	0x08009820
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	40140000 	.word	0x40140000
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738c:	9d00      	ldr	r5, [sp, #0]
 800738e:	4642      	mov	r2, r8
 8007390:	464b      	mov	r3, r9
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fa81 	bl	800089c <__aeabi_ddiv>
 800739a:	f7f9 fc05 	bl	8000ba8 <__aeabi_d2iz>
 800739e:	9001      	str	r0, [sp, #4]
 80073a0:	f7f9 f8e8 	bl	8000574 <__aeabi_i2d>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	f7f9 f94e 	bl	8000648 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f8 ff90 	bl	80002d8 <__aeabi_dsub>
 80073b8:	9e01      	ldr	r6, [sp, #4]
 80073ba:	9f04      	ldr	r7, [sp, #16]
 80073bc:	3630      	adds	r6, #48	; 0x30
 80073be:	f805 6b01 	strb.w	r6, [r5], #1
 80073c2:	9e00      	ldr	r6, [sp, #0]
 80073c4:	1bae      	subs	r6, r5, r6
 80073c6:	42b7      	cmp	r7, r6
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	d134      	bne.n	8007438 <_dtoa_r+0x708>
 80073ce:	f7f8 ff85 	bl	80002dc <__adddf3>
 80073d2:	4642      	mov	r2, r8
 80073d4:	464b      	mov	r3, r9
 80073d6:	4606      	mov	r6, r0
 80073d8:	460f      	mov	r7, r1
 80073da:	f7f9 fbc5 	bl	8000b68 <__aeabi_dcmpgt>
 80073de:	b9c8      	cbnz	r0, 8007414 <_dtoa_r+0x6e4>
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 fb96 	bl	8000b18 <__aeabi_dcmpeq>
 80073ec:	b110      	cbz	r0, 80073f4 <_dtoa_r+0x6c4>
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	07db      	lsls	r3, r3, #31
 80073f2:	d40f      	bmi.n	8007414 <_dtoa_r+0x6e4>
 80073f4:	4651      	mov	r1, sl
 80073f6:	4620      	mov	r0, r4
 80073f8:	f001 f9cc 	bl	8008794 <_Bfree>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007400:	702b      	strb	r3, [r5, #0]
 8007402:	f10b 0301 	add.w	r3, fp, #1
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800740a:	2b00      	cmp	r3, #0
 800740c:	f43f ace2 	beq.w	8006dd4 <_dtoa_r+0xa4>
 8007410:	601d      	str	r5, [r3, #0]
 8007412:	e4df      	b.n	8006dd4 <_dtoa_r+0xa4>
 8007414:	465f      	mov	r7, fp
 8007416:	462b      	mov	r3, r5
 8007418:	461d      	mov	r5, r3
 800741a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800741e:	2a39      	cmp	r2, #57	; 0x39
 8007420:	d106      	bne.n	8007430 <_dtoa_r+0x700>
 8007422:	9a00      	ldr	r2, [sp, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d1f7      	bne.n	8007418 <_dtoa_r+0x6e8>
 8007428:	9900      	ldr	r1, [sp, #0]
 800742a:	2230      	movs	r2, #48	; 0x30
 800742c:	3701      	adds	r7, #1
 800742e:	700a      	strb	r2, [r1, #0]
 8007430:	781a      	ldrb	r2, [r3, #0]
 8007432:	3201      	adds	r2, #1
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	e790      	b.n	800735a <_dtoa_r+0x62a>
 8007438:	4ba3      	ldr	r3, [pc, #652]	; (80076c8 <_dtoa_r+0x998>)
 800743a:	2200      	movs	r2, #0
 800743c:	f7f9 f904 	bl	8000648 <__aeabi_dmul>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	f7f9 fb66 	bl	8000b18 <__aeabi_dcmpeq>
 800744c:	2800      	cmp	r0, #0
 800744e:	d09e      	beq.n	800738e <_dtoa_r+0x65e>
 8007450:	e7d0      	b.n	80073f4 <_dtoa_r+0x6c4>
 8007452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007454:	2a00      	cmp	r2, #0
 8007456:	f000 80ca 	beq.w	80075ee <_dtoa_r+0x8be>
 800745a:	9a07      	ldr	r2, [sp, #28]
 800745c:	2a01      	cmp	r2, #1
 800745e:	f300 80ad 	bgt.w	80075bc <_dtoa_r+0x88c>
 8007462:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007464:	2a00      	cmp	r2, #0
 8007466:	f000 80a5 	beq.w	80075b4 <_dtoa_r+0x884>
 800746a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800746e:	9e08      	ldr	r6, [sp, #32]
 8007470:	9d05      	ldr	r5, [sp, #20]
 8007472:	9a05      	ldr	r2, [sp, #20]
 8007474:	441a      	add	r2, r3
 8007476:	9205      	str	r2, [sp, #20]
 8007478:	9a06      	ldr	r2, [sp, #24]
 800747a:	2101      	movs	r1, #1
 800747c:	441a      	add	r2, r3
 800747e:	4620      	mov	r0, r4
 8007480:	9206      	str	r2, [sp, #24]
 8007482:	f001 fa87 	bl	8008994 <__i2b>
 8007486:	4607      	mov	r7, r0
 8007488:	b165      	cbz	r5, 80074a4 <_dtoa_r+0x774>
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dd09      	ble.n	80074a4 <_dtoa_r+0x774>
 8007490:	42ab      	cmp	r3, r5
 8007492:	9a05      	ldr	r2, [sp, #20]
 8007494:	bfa8      	it	ge
 8007496:	462b      	movge	r3, r5
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	9205      	str	r2, [sp, #20]
 800749c:	9a06      	ldr	r2, [sp, #24]
 800749e:	1aed      	subs	r5, r5, r3
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	9306      	str	r3, [sp, #24]
 80074a4:	9b08      	ldr	r3, [sp, #32]
 80074a6:	b1f3      	cbz	r3, 80074e6 <_dtoa_r+0x7b6>
 80074a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80a3 	beq.w	80075f6 <_dtoa_r+0x8c6>
 80074b0:	2e00      	cmp	r6, #0
 80074b2:	dd10      	ble.n	80074d6 <_dtoa_r+0x7a6>
 80074b4:	4639      	mov	r1, r7
 80074b6:	4632      	mov	r2, r6
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 fb2b 	bl	8008b14 <__pow5mult>
 80074be:	4652      	mov	r2, sl
 80074c0:	4601      	mov	r1, r0
 80074c2:	4607      	mov	r7, r0
 80074c4:	4620      	mov	r0, r4
 80074c6:	f001 fa7b 	bl	80089c0 <__multiply>
 80074ca:	4651      	mov	r1, sl
 80074cc:	4680      	mov	r8, r0
 80074ce:	4620      	mov	r0, r4
 80074d0:	f001 f960 	bl	8008794 <_Bfree>
 80074d4:	46c2      	mov	sl, r8
 80074d6:	9b08      	ldr	r3, [sp, #32]
 80074d8:	1b9a      	subs	r2, r3, r6
 80074da:	d004      	beq.n	80074e6 <_dtoa_r+0x7b6>
 80074dc:	4651      	mov	r1, sl
 80074de:	4620      	mov	r0, r4
 80074e0:	f001 fb18 	bl	8008b14 <__pow5mult>
 80074e4:	4682      	mov	sl, r0
 80074e6:	2101      	movs	r1, #1
 80074e8:	4620      	mov	r0, r4
 80074ea:	f001 fa53 	bl	8008994 <__i2b>
 80074ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	4606      	mov	r6, r0
 80074f4:	f340 8081 	ble.w	80075fa <_dtoa_r+0x8ca>
 80074f8:	461a      	mov	r2, r3
 80074fa:	4601      	mov	r1, r0
 80074fc:	4620      	mov	r0, r4
 80074fe:	f001 fb09 	bl	8008b14 <__pow5mult>
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	2b01      	cmp	r3, #1
 8007506:	4606      	mov	r6, r0
 8007508:	dd7a      	ble.n	8007600 <_dtoa_r+0x8d0>
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	6933      	ldr	r3, [r6, #16]
 8007510:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007514:	6918      	ldr	r0, [r3, #16]
 8007516:	f001 f9ef 	bl	80088f8 <__hi0bits>
 800751a:	f1c0 0020 	rsb	r0, r0, #32
 800751e:	9b06      	ldr	r3, [sp, #24]
 8007520:	4418      	add	r0, r3
 8007522:	f010 001f 	ands.w	r0, r0, #31
 8007526:	f000 8094 	beq.w	8007652 <_dtoa_r+0x922>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	2b04      	cmp	r3, #4
 8007530:	f340 8085 	ble.w	800763e <_dtoa_r+0x90e>
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	f1c0 001c 	rsb	r0, r0, #28
 800753a:	4403      	add	r3, r0
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	4403      	add	r3, r0
 8007542:	4405      	add	r5, r0
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	dd05      	ble.n	8007558 <_dtoa_r+0x828>
 800754c:	4651      	mov	r1, sl
 800754e:	461a      	mov	r2, r3
 8007550:	4620      	mov	r0, r4
 8007552:	f001 fb39 	bl	8008bc8 <__lshift>
 8007556:	4682      	mov	sl, r0
 8007558:	9b06      	ldr	r3, [sp, #24]
 800755a:	2b00      	cmp	r3, #0
 800755c:	dd05      	ble.n	800756a <_dtoa_r+0x83a>
 800755e:	4631      	mov	r1, r6
 8007560:	461a      	mov	r2, r3
 8007562:	4620      	mov	r0, r4
 8007564:	f001 fb30 	bl	8008bc8 <__lshift>
 8007568:	4606      	mov	r6, r0
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d072      	beq.n	8007656 <_dtoa_r+0x926>
 8007570:	4631      	mov	r1, r6
 8007572:	4650      	mov	r0, sl
 8007574:	f001 fb94 	bl	8008ca0 <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	da6c      	bge.n	8007656 <_dtoa_r+0x926>
 800757c:	2300      	movs	r3, #0
 800757e:	4651      	mov	r1, sl
 8007580:	220a      	movs	r2, #10
 8007582:	4620      	mov	r0, r4
 8007584:	f001 f928 	bl	80087d8 <__multadd>
 8007588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800758a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800758e:	4682      	mov	sl, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 81b0 	beq.w	80078f6 <_dtoa_r+0xbc6>
 8007596:	2300      	movs	r3, #0
 8007598:	4639      	mov	r1, r7
 800759a:	220a      	movs	r2, #10
 800759c:	4620      	mov	r0, r4
 800759e:	f001 f91b 	bl	80087d8 <__multadd>
 80075a2:	9b01      	ldr	r3, [sp, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	4607      	mov	r7, r0
 80075a8:	f300 8096 	bgt.w	80076d8 <_dtoa_r+0x9a8>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	dc59      	bgt.n	8007666 <_dtoa_r+0x936>
 80075b2:	e091      	b.n	80076d8 <_dtoa_r+0x9a8>
 80075b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075ba:	e758      	b.n	800746e <_dtoa_r+0x73e>
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	1e5e      	subs	r6, r3, #1
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	42b3      	cmp	r3, r6
 80075c4:	bfbf      	itttt	lt
 80075c6:	9b08      	ldrlt	r3, [sp, #32]
 80075c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80075ca:	9608      	strlt	r6, [sp, #32]
 80075cc:	1af3      	sublt	r3, r6, r3
 80075ce:	bfb4      	ite	lt
 80075d0:	18d2      	addlt	r2, r2, r3
 80075d2:	1b9e      	subge	r6, r3, r6
 80075d4:	9b04      	ldr	r3, [sp, #16]
 80075d6:	bfbc      	itt	lt
 80075d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80075da:	2600      	movlt	r6, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	bfb7      	itett	lt
 80075e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80075e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80075e8:	1a9d      	sublt	r5, r3, r2
 80075ea:	2300      	movlt	r3, #0
 80075ec:	e741      	b.n	8007472 <_dtoa_r+0x742>
 80075ee:	9e08      	ldr	r6, [sp, #32]
 80075f0:	9d05      	ldr	r5, [sp, #20]
 80075f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075f4:	e748      	b.n	8007488 <_dtoa_r+0x758>
 80075f6:	9a08      	ldr	r2, [sp, #32]
 80075f8:	e770      	b.n	80074dc <_dtoa_r+0x7ac>
 80075fa:	9b07      	ldr	r3, [sp, #28]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	dc19      	bgt.n	8007634 <_dtoa_r+0x904>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	b9bb      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 8007604:	9b03      	ldr	r3, [sp, #12]
 8007606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760a:	b99b      	cbnz	r3, 8007634 <_dtoa_r+0x904>
 800760c:	9b03      	ldr	r3, [sp, #12]
 800760e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007612:	0d1b      	lsrs	r3, r3, #20
 8007614:	051b      	lsls	r3, r3, #20
 8007616:	b183      	cbz	r3, 800763a <_dtoa_r+0x90a>
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	9305      	str	r3, [sp, #20]
 800761e:	9b06      	ldr	r3, [sp, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	9306      	str	r3, [sp, #24]
 8007624:	f04f 0801 	mov.w	r8, #1
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	2b00      	cmp	r3, #0
 800762c:	f47f af6f 	bne.w	800750e <_dtoa_r+0x7de>
 8007630:	2001      	movs	r0, #1
 8007632:	e774      	b.n	800751e <_dtoa_r+0x7ee>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	e7f6      	b.n	8007628 <_dtoa_r+0x8f8>
 800763a:	4698      	mov	r8, r3
 800763c:	e7f4      	b.n	8007628 <_dtoa_r+0x8f8>
 800763e:	d082      	beq.n	8007546 <_dtoa_r+0x816>
 8007640:	9a05      	ldr	r2, [sp, #20]
 8007642:	331c      	adds	r3, #28
 8007644:	441a      	add	r2, r3
 8007646:	9205      	str	r2, [sp, #20]
 8007648:	9a06      	ldr	r2, [sp, #24]
 800764a:	441a      	add	r2, r3
 800764c:	441d      	add	r5, r3
 800764e:	9206      	str	r2, [sp, #24]
 8007650:	e779      	b.n	8007546 <_dtoa_r+0x816>
 8007652:	4603      	mov	r3, r0
 8007654:	e7f4      	b.n	8007640 <_dtoa_r+0x910>
 8007656:	9b04      	ldr	r3, [sp, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dc37      	bgt.n	80076cc <_dtoa_r+0x99c>
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	2b02      	cmp	r3, #2
 8007660:	dd34      	ble.n	80076cc <_dtoa_r+0x99c>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	b963      	cbnz	r3, 8007684 <_dtoa_r+0x954>
 800766a:	4631      	mov	r1, r6
 800766c:	2205      	movs	r2, #5
 800766e:	4620      	mov	r0, r4
 8007670:	f001 f8b2 	bl	80087d8 <__multadd>
 8007674:	4601      	mov	r1, r0
 8007676:	4606      	mov	r6, r0
 8007678:	4650      	mov	r0, sl
 800767a:	f001 fb11 	bl	8008ca0 <__mcmp>
 800767e:	2800      	cmp	r0, #0
 8007680:	f73f adbb 	bgt.w	80071fa <_dtoa_r+0x4ca>
 8007684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007686:	9d00      	ldr	r5, [sp, #0]
 8007688:	ea6f 0b03 	mvn.w	fp, r3
 800768c:	f04f 0800 	mov.w	r8, #0
 8007690:	4631      	mov	r1, r6
 8007692:	4620      	mov	r0, r4
 8007694:	f001 f87e 	bl	8008794 <_Bfree>
 8007698:	2f00      	cmp	r7, #0
 800769a:	f43f aeab 	beq.w	80073f4 <_dtoa_r+0x6c4>
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	d005      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a4:	45b8      	cmp	r8, r7
 80076a6:	d003      	beq.n	80076b0 <_dtoa_r+0x980>
 80076a8:	4641      	mov	r1, r8
 80076aa:	4620      	mov	r0, r4
 80076ac:	f001 f872 	bl	8008794 <_Bfree>
 80076b0:	4639      	mov	r1, r7
 80076b2:	4620      	mov	r0, r4
 80076b4:	f001 f86e 	bl	8008794 <_Bfree>
 80076b8:	e69c      	b.n	80073f4 <_dtoa_r+0x6c4>
 80076ba:	2600      	movs	r6, #0
 80076bc:	4637      	mov	r7, r6
 80076be:	e7e1      	b.n	8007684 <_dtoa_r+0x954>
 80076c0:	46bb      	mov	fp, r7
 80076c2:	4637      	mov	r7, r6
 80076c4:	e599      	b.n	80071fa <_dtoa_r+0x4ca>
 80076c6:	bf00      	nop
 80076c8:	40240000 	.word	0x40240000
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 80c8 	beq.w	8007864 <_dtoa_r+0xb34>
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	2d00      	cmp	r5, #0
 80076da:	dd05      	ble.n	80076e8 <_dtoa_r+0x9b8>
 80076dc:	4639      	mov	r1, r7
 80076de:	462a      	mov	r2, r5
 80076e0:	4620      	mov	r0, r4
 80076e2:	f001 fa71 	bl	8008bc8 <__lshift>
 80076e6:	4607      	mov	r7, r0
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	d05b      	beq.n	80077a6 <_dtoa_r+0xa76>
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 f80f 	bl	8008714 <_Balloc>
 80076f6:	4605      	mov	r5, r0
 80076f8:	b928      	cbnz	r0, 8007706 <_dtoa_r+0x9d6>
 80076fa:	4b83      	ldr	r3, [pc, #524]	; (8007908 <_dtoa_r+0xbd8>)
 80076fc:	4602      	mov	r2, r0
 80076fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007702:	f7ff bb2e 	b.w	8006d62 <_dtoa_r+0x32>
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	3202      	adds	r2, #2
 800770a:	0092      	lsls	r2, r2, #2
 800770c:	f107 010c 	add.w	r1, r7, #12
 8007710:	300c      	adds	r0, #12
 8007712:	f7ff fa66 	bl	8006be2 <memcpy>
 8007716:	2201      	movs	r2, #1
 8007718:	4629      	mov	r1, r5
 800771a:	4620      	mov	r0, r4
 800771c:	f001 fa54 	bl	8008bc8 <__lshift>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772a:	4413      	add	r3, r2
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	46b8      	mov	r8, r7
 8007736:	9306      	str	r3, [sp, #24]
 8007738:	4607      	mov	r7, r0
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	4631      	mov	r1, r6
 800773e:	3b01      	subs	r3, #1
 8007740:	4650      	mov	r0, sl
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	f7ff fa6a 	bl	8006c1c <quorem>
 8007748:	4641      	mov	r1, r8
 800774a:	9002      	str	r0, [sp, #8]
 800774c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007750:	4650      	mov	r0, sl
 8007752:	f001 faa5 	bl	8008ca0 <__mcmp>
 8007756:	463a      	mov	r2, r7
 8007758:	9005      	str	r0, [sp, #20]
 800775a:	4631      	mov	r1, r6
 800775c:	4620      	mov	r0, r4
 800775e:	f001 fabb 	bl	8008cd8 <__mdiff>
 8007762:	68c2      	ldr	r2, [r0, #12]
 8007764:	4605      	mov	r5, r0
 8007766:	bb02      	cbnz	r2, 80077aa <_dtoa_r+0xa7a>
 8007768:	4601      	mov	r1, r0
 800776a:	4650      	mov	r0, sl
 800776c:	f001 fa98 	bl	8008ca0 <__mcmp>
 8007770:	4602      	mov	r2, r0
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	9209      	str	r2, [sp, #36]	; 0x24
 8007778:	f001 f80c 	bl	8008794 <_Bfree>
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007780:	9d04      	ldr	r5, [sp, #16]
 8007782:	ea43 0102 	orr.w	r1, r3, r2
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	4319      	orrs	r1, r3
 800778a:	d110      	bne.n	80077ae <_dtoa_r+0xa7e>
 800778c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007790:	d029      	beq.n	80077e6 <_dtoa_r+0xab6>
 8007792:	9b05      	ldr	r3, [sp, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd02      	ble.n	800779e <_dtoa_r+0xa6e>
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	f883 9000 	strb.w	r9, [r3]
 80077a4:	e774      	b.n	8007690 <_dtoa_r+0x960>
 80077a6:	4638      	mov	r0, r7
 80077a8:	e7ba      	b.n	8007720 <_dtoa_r+0x9f0>
 80077aa:	2201      	movs	r2, #1
 80077ac:	e7e1      	b.n	8007772 <_dtoa_r+0xa42>
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	db04      	blt.n	80077be <_dtoa_r+0xa8e>
 80077b4:	9907      	ldr	r1, [sp, #28]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	9906      	ldr	r1, [sp, #24]
 80077ba:	430b      	orrs	r3, r1
 80077bc:	d120      	bne.n	8007800 <_dtoa_r+0xad0>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	dded      	ble.n	800779e <_dtoa_r+0xa6e>
 80077c2:	4651      	mov	r1, sl
 80077c4:	2201      	movs	r2, #1
 80077c6:	4620      	mov	r0, r4
 80077c8:	f001 f9fe 	bl	8008bc8 <__lshift>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4682      	mov	sl, r0
 80077d0:	f001 fa66 	bl	8008ca0 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dc03      	bgt.n	80077e0 <_dtoa_r+0xab0>
 80077d8:	d1e1      	bne.n	800779e <_dtoa_r+0xa6e>
 80077da:	f019 0f01 	tst.w	r9, #1
 80077de:	d0de      	beq.n	800779e <_dtoa_r+0xa6e>
 80077e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077e4:	d1d8      	bne.n	8007798 <_dtoa_r+0xa68>
 80077e6:	9a01      	ldr	r2, [sp, #4]
 80077e8:	2339      	movs	r3, #57	; 0x39
 80077ea:	7013      	strb	r3, [r2, #0]
 80077ec:	462b      	mov	r3, r5
 80077ee:	461d      	mov	r5, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077f6:	2a39      	cmp	r2, #57	; 0x39
 80077f8:	d06c      	beq.n	80078d4 <_dtoa_r+0xba4>
 80077fa:	3201      	adds	r2, #1
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e747      	b.n	8007690 <_dtoa_r+0x960>
 8007800:	2a00      	cmp	r2, #0
 8007802:	dd07      	ble.n	8007814 <_dtoa_r+0xae4>
 8007804:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007808:	d0ed      	beq.n	80077e6 <_dtoa_r+0xab6>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	f109 0301 	add.w	r3, r9, #1
 8007810:	7013      	strb	r3, [r2, #0]
 8007812:	e73d      	b.n	8007690 <_dtoa_r+0x960>
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	9a08      	ldr	r2, [sp, #32]
 8007818:	f803 9c01 	strb.w	r9, [r3, #-1]
 800781c:	4293      	cmp	r3, r2
 800781e:	d043      	beq.n	80078a8 <_dtoa_r+0xb78>
 8007820:	4651      	mov	r1, sl
 8007822:	2300      	movs	r3, #0
 8007824:	220a      	movs	r2, #10
 8007826:	4620      	mov	r0, r4
 8007828:	f000 ffd6 	bl	80087d8 <__multadd>
 800782c:	45b8      	cmp	r8, r7
 800782e:	4682      	mov	sl, r0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	f04f 020a 	mov.w	r2, #10
 8007838:	4641      	mov	r1, r8
 800783a:	4620      	mov	r0, r4
 800783c:	d107      	bne.n	800784e <_dtoa_r+0xb1e>
 800783e:	f000 ffcb 	bl	80087d8 <__multadd>
 8007842:	4680      	mov	r8, r0
 8007844:	4607      	mov	r7, r0
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	9304      	str	r3, [sp, #16]
 800784c:	e775      	b.n	800773a <_dtoa_r+0xa0a>
 800784e:	f000 ffc3 	bl	80087d8 <__multadd>
 8007852:	4639      	mov	r1, r7
 8007854:	4680      	mov	r8, r0
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 ffbc 	bl	80087d8 <__multadd>
 8007860:	4607      	mov	r7, r0
 8007862:	e7f0      	b.n	8007846 <_dtoa_r+0xb16>
 8007864:	9b04      	ldr	r3, [sp, #16]
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	9d00      	ldr	r5, [sp, #0]
 800786a:	4631      	mov	r1, r6
 800786c:	4650      	mov	r0, sl
 800786e:	f7ff f9d5 	bl	8006c1c <quorem>
 8007872:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	f805 9b01 	strb.w	r9, [r5], #1
 800787c:	1aea      	subs	r2, r5, r3
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	4293      	cmp	r3, r2
 8007882:	dd07      	ble.n	8007894 <_dtoa_r+0xb64>
 8007884:	4651      	mov	r1, sl
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	4620      	mov	r0, r4
 800788c:	f000 ffa4 	bl	80087d8 <__multadd>
 8007890:	4682      	mov	sl, r0
 8007892:	e7ea      	b.n	800786a <_dtoa_r+0xb3a>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfc8      	it	gt
 800789a:	461d      	movgt	r5, r3
 800789c:	9b00      	ldr	r3, [sp, #0]
 800789e:	bfd8      	it	le
 80078a0:	2501      	movle	r5, #1
 80078a2:	441d      	add	r5, r3
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	4651      	mov	r1, sl
 80078aa:	2201      	movs	r2, #1
 80078ac:	4620      	mov	r0, r4
 80078ae:	f001 f98b 	bl	8008bc8 <__lshift>
 80078b2:	4631      	mov	r1, r6
 80078b4:	4682      	mov	sl, r0
 80078b6:	f001 f9f3 	bl	8008ca0 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	dc96      	bgt.n	80077ec <_dtoa_r+0xabc>
 80078be:	d102      	bne.n	80078c6 <_dtoa_r+0xb96>
 80078c0:	f019 0f01 	tst.w	r9, #1
 80078c4:	d192      	bne.n	80077ec <_dtoa_r+0xabc>
 80078c6:	462b      	mov	r3, r5
 80078c8:	461d      	mov	r5, r3
 80078ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078ce:	2a30      	cmp	r2, #48	; 0x30
 80078d0:	d0fa      	beq.n	80078c8 <_dtoa_r+0xb98>
 80078d2:	e6dd      	b.n	8007690 <_dtoa_r+0x960>
 80078d4:	9a00      	ldr	r2, [sp, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d189      	bne.n	80077ee <_dtoa_r+0xabe>
 80078da:	f10b 0b01 	add.w	fp, fp, #1
 80078de:	2331      	movs	r3, #49	; 0x31
 80078e0:	e796      	b.n	8007810 <_dtoa_r+0xae0>
 80078e2:	4b0a      	ldr	r3, [pc, #40]	; (800790c <_dtoa_r+0xbdc>)
 80078e4:	f7ff ba99 	b.w	8006e1a <_dtoa_r+0xea>
 80078e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f47f aa6d 	bne.w	8006dca <_dtoa_r+0x9a>
 80078f0:	4b07      	ldr	r3, [pc, #28]	; (8007910 <_dtoa_r+0xbe0>)
 80078f2:	f7ff ba92 	b.w	8006e1a <_dtoa_r+0xea>
 80078f6:	9b01      	ldr	r3, [sp, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dcb5      	bgt.n	8007868 <_dtoa_r+0xb38>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f73f aeb1 	bgt.w	8007666 <_dtoa_r+0x936>
 8007904:	e7b0      	b.n	8007868 <_dtoa_r+0xb38>
 8007906:	bf00      	nop
 8007908:	08009745 	.word	0x08009745
 800790c:	08009540 	.word	0x08009540
 8007910:	080096c9 	.word	0x080096c9

08007914 <_free_r>:
 8007914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007916:	2900      	cmp	r1, #0
 8007918:	d044      	beq.n	80079a4 <_free_r+0x90>
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	9001      	str	r0, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f1a1 0404 	sub.w	r4, r1, #4
 8007926:	bfb8      	it	lt
 8007928:	18e4      	addlt	r4, r4, r3
 800792a:	f7fe f8e5 	bl	8005af8 <__malloc_lock>
 800792e:	4a1e      	ldr	r2, [pc, #120]	; (80079a8 <_free_r+0x94>)
 8007930:	9801      	ldr	r0, [sp, #4]
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x30>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007940:	f7fe b8e0 	b.w	8005b04 <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x46>
 8007948:	6825      	ldr	r5, [r4, #0]
 800794a:	1961      	adds	r1, r4, r5
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x22>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x50>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x46>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1855      	adds	r5, r2, r1
 8007968:	42a5      	cmp	r5, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x70>
 800796c:	6824      	ldr	r4, [r4, #0]
 800796e:	4421      	add	r1, r4
 8007970:	1854      	adds	r4, r2, r1
 8007972:	42a3      	cmp	r3, r4
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x26>
 8007978:	681c      	ldr	r4, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	440c      	add	r4, r1
 8007980:	6014      	str	r4, [r2, #0]
 8007982:	e7da      	b.n	800793a <_free_r+0x26>
 8007984:	d902      	bls.n	800798c <_free_r+0x78>
 8007986:	230c      	movs	r3, #12
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x26>
 800798c:	6825      	ldr	r5, [r4, #0]
 800798e:	1961      	adds	r1, r4, r5
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1949      	addeq	r1, r1, r5
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7ca      	b.n	800793a <_free_r+0x26>
 80079a4:	b003      	add	sp, #12
 80079a6:	bd30      	pop	{r4, r5, pc}
 80079a8:	20000388 	.word	0x20000388

080079ac <rshift>:
 80079ac:	6903      	ldr	r3, [r0, #16]
 80079ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079ba:	f100 0414 	add.w	r4, r0, #20
 80079be:	dd45      	ble.n	8007a4c <rshift+0xa0>
 80079c0:	f011 011f 	ands.w	r1, r1, #31
 80079c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079cc:	d10c      	bne.n	80079e8 <rshift+0x3c>
 80079ce:	f100 0710 	add.w	r7, r0, #16
 80079d2:	4629      	mov	r1, r5
 80079d4:	42b1      	cmp	r1, r6
 80079d6:	d334      	bcc.n	8007a42 <rshift+0x96>
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	1eea      	subs	r2, r5, #3
 80079de:	4296      	cmp	r6, r2
 80079e0:	bf38      	it	cc
 80079e2:	2300      	movcc	r3, #0
 80079e4:	4423      	add	r3, r4
 80079e6:	e015      	b.n	8007a14 <rshift+0x68>
 80079e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079ec:	f1c1 0820 	rsb	r8, r1, #32
 80079f0:	40cf      	lsrs	r7, r1
 80079f2:	f105 0e04 	add.w	lr, r5, #4
 80079f6:	46a1      	mov	r9, r4
 80079f8:	4576      	cmp	r6, lr
 80079fa:	46f4      	mov	ip, lr
 80079fc:	d815      	bhi.n	8007a2a <rshift+0x7e>
 80079fe:	1a9a      	subs	r2, r3, r2
 8007a00:	0092      	lsls	r2, r2, #2
 8007a02:	3a04      	subs	r2, #4
 8007a04:	3501      	adds	r5, #1
 8007a06:	42ae      	cmp	r6, r5
 8007a08:	bf38      	it	cc
 8007a0a:	2200      	movcc	r2, #0
 8007a0c:	18a3      	adds	r3, r4, r2
 8007a0e:	50a7      	str	r7, [r4, r2]
 8007a10:	b107      	cbz	r7, 8007a14 <rshift+0x68>
 8007a12:	3304      	adds	r3, #4
 8007a14:	1b1a      	subs	r2, r3, r4
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a1c:	bf08      	it	eq
 8007a1e:	2300      	moveq	r3, #0
 8007a20:	6102      	str	r2, [r0, #16]
 8007a22:	bf08      	it	eq
 8007a24:	6143      	streq	r3, [r0, #20]
 8007a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2a:	f8dc c000 	ldr.w	ip, [ip]
 8007a2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a32:	ea4c 0707 	orr.w	r7, ip, r7
 8007a36:	f849 7b04 	str.w	r7, [r9], #4
 8007a3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a3e:	40cf      	lsrs	r7, r1
 8007a40:	e7da      	b.n	80079f8 <rshift+0x4c>
 8007a42:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a46:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a4a:	e7c3      	b.n	80079d4 <rshift+0x28>
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	e7e1      	b.n	8007a14 <rshift+0x68>

08007a50 <__hexdig_fun>:
 8007a50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d802      	bhi.n	8007a5e <__hexdig_fun+0xe>
 8007a58:	3820      	subs	r0, #32
 8007a5a:	b2c0      	uxtb	r0, r0
 8007a5c:	4770      	bx	lr
 8007a5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d801      	bhi.n	8007a6a <__hexdig_fun+0x1a>
 8007a66:	3847      	subs	r0, #71	; 0x47
 8007a68:	e7f7      	b.n	8007a5a <__hexdig_fun+0xa>
 8007a6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	d801      	bhi.n	8007a76 <__hexdig_fun+0x26>
 8007a72:	3827      	subs	r0, #39	; 0x27
 8007a74:	e7f1      	b.n	8007a5a <__hexdig_fun+0xa>
 8007a76:	2000      	movs	r0, #0
 8007a78:	4770      	bx	lr
	...

08007a7c <__gethex>:
 8007a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	4617      	mov	r7, r2
 8007a82:	680a      	ldr	r2, [r1, #0]
 8007a84:	b085      	sub	sp, #20
 8007a86:	f102 0b02 	add.w	fp, r2, #2
 8007a8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a92:	4681      	mov	r9, r0
 8007a94:	468a      	mov	sl, r1
 8007a96:	9302      	str	r3, [sp, #8]
 8007a98:	32fe      	adds	r2, #254	; 0xfe
 8007a9a:	eb02 030b 	add.w	r3, r2, fp
 8007a9e:	46d8      	mov	r8, fp
 8007aa0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	2830      	cmp	r0, #48	; 0x30
 8007aa8:	d0f7      	beq.n	8007a9a <__gethex+0x1e>
 8007aaa:	f7ff ffd1 	bl	8007a50 <__hexdig_fun>
 8007aae:	4604      	mov	r4, r0
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d138      	bne.n	8007b26 <__gethex+0xaa>
 8007ab4:	49a7      	ldr	r1, [pc, #668]	; (8007d54 <__gethex+0x2d8>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4640      	mov	r0, r8
 8007aba:	f7ff f815 	bl	8006ae8 <strncmp>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d169      	bne.n	8007b98 <__gethex+0x11c>
 8007ac4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007ac8:	465d      	mov	r5, fp
 8007aca:	f7ff ffc1 	bl	8007a50 <__hexdig_fun>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d064      	beq.n	8007b9c <__gethex+0x120>
 8007ad2:	465a      	mov	r2, fp
 8007ad4:	7810      	ldrb	r0, [r2, #0]
 8007ad6:	2830      	cmp	r0, #48	; 0x30
 8007ad8:	4690      	mov	r8, r2
 8007ada:	f102 0201 	add.w	r2, r2, #1
 8007ade:	d0f9      	beq.n	8007ad4 <__gethex+0x58>
 8007ae0:	f7ff ffb6 	bl	8007a50 <__hexdig_fun>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	fab0 f480 	clz	r4, r0
 8007aea:	0964      	lsrs	r4, r4, #5
 8007aec:	465e      	mov	r6, fp
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	4642      	mov	r2, r8
 8007af2:	4615      	mov	r5, r2
 8007af4:	3201      	adds	r2, #1
 8007af6:	7828      	ldrb	r0, [r5, #0]
 8007af8:	f7ff ffaa 	bl	8007a50 <__hexdig_fun>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1f8      	bne.n	8007af2 <__gethex+0x76>
 8007b00:	4994      	ldr	r1, [pc, #592]	; (8007d54 <__gethex+0x2d8>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	4628      	mov	r0, r5
 8007b06:	f7fe ffef 	bl	8006ae8 <strncmp>
 8007b0a:	b978      	cbnz	r0, 8007b2c <__gethex+0xb0>
 8007b0c:	b946      	cbnz	r6, 8007b20 <__gethex+0xa4>
 8007b0e:	1c6e      	adds	r6, r5, #1
 8007b10:	4632      	mov	r2, r6
 8007b12:	4615      	mov	r5, r2
 8007b14:	3201      	adds	r2, #1
 8007b16:	7828      	ldrb	r0, [r5, #0]
 8007b18:	f7ff ff9a 	bl	8007a50 <__hexdig_fun>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1f8      	bne.n	8007b12 <__gethex+0x96>
 8007b20:	1b73      	subs	r3, r6, r5
 8007b22:	009e      	lsls	r6, r3, #2
 8007b24:	e004      	b.n	8007b30 <__gethex+0xb4>
 8007b26:	2400      	movs	r4, #0
 8007b28:	4626      	mov	r6, r4
 8007b2a:	e7e1      	b.n	8007af0 <__gethex+0x74>
 8007b2c:	2e00      	cmp	r6, #0
 8007b2e:	d1f7      	bne.n	8007b20 <__gethex+0xa4>
 8007b30:	782b      	ldrb	r3, [r5, #0]
 8007b32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b36:	2b50      	cmp	r3, #80	; 0x50
 8007b38:	d13d      	bne.n	8007bb6 <__gethex+0x13a>
 8007b3a:	786b      	ldrb	r3, [r5, #1]
 8007b3c:	2b2b      	cmp	r3, #43	; 0x2b
 8007b3e:	d02f      	beq.n	8007ba0 <__gethex+0x124>
 8007b40:	2b2d      	cmp	r3, #45	; 0x2d
 8007b42:	d031      	beq.n	8007ba8 <__gethex+0x12c>
 8007b44:	1c69      	adds	r1, r5, #1
 8007b46:	f04f 0b00 	mov.w	fp, #0
 8007b4a:	7808      	ldrb	r0, [r1, #0]
 8007b4c:	f7ff ff80 	bl	8007a50 <__hexdig_fun>
 8007b50:	1e42      	subs	r2, r0, #1
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	2a18      	cmp	r2, #24
 8007b56:	d82e      	bhi.n	8007bb6 <__gethex+0x13a>
 8007b58:	f1a0 0210 	sub.w	r2, r0, #16
 8007b5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b60:	f7ff ff76 	bl	8007a50 <__hexdig_fun>
 8007b64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007b68:	fa5f fc8c 	uxtb.w	ip, ip
 8007b6c:	f1bc 0f18 	cmp.w	ip, #24
 8007b70:	d91d      	bls.n	8007bae <__gethex+0x132>
 8007b72:	f1bb 0f00 	cmp.w	fp, #0
 8007b76:	d000      	beq.n	8007b7a <__gethex+0xfe>
 8007b78:	4252      	negs	r2, r2
 8007b7a:	4416      	add	r6, r2
 8007b7c:	f8ca 1000 	str.w	r1, [sl]
 8007b80:	b1dc      	cbz	r4, 8007bba <__gethex+0x13e>
 8007b82:	9b01      	ldr	r3, [sp, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf14      	ite	ne
 8007b88:	f04f 0800 	movne.w	r8, #0
 8007b8c:	f04f 0806 	moveq.w	r8, #6
 8007b90:	4640      	mov	r0, r8
 8007b92:	b005      	add	sp, #20
 8007b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b98:	4645      	mov	r5, r8
 8007b9a:	4626      	mov	r6, r4
 8007b9c:	2401      	movs	r4, #1
 8007b9e:	e7c7      	b.n	8007b30 <__gethex+0xb4>
 8007ba0:	f04f 0b00 	mov.w	fp, #0
 8007ba4:	1ca9      	adds	r1, r5, #2
 8007ba6:	e7d0      	b.n	8007b4a <__gethex+0xce>
 8007ba8:	f04f 0b01 	mov.w	fp, #1
 8007bac:	e7fa      	b.n	8007ba4 <__gethex+0x128>
 8007bae:	230a      	movs	r3, #10
 8007bb0:	fb03 0002 	mla	r0, r3, r2, r0
 8007bb4:	e7d0      	b.n	8007b58 <__gethex+0xdc>
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	e7e0      	b.n	8007b7c <__gethex+0x100>
 8007bba:	eba5 0308 	sub.w	r3, r5, r8
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	2b07      	cmp	r3, #7
 8007bc4:	dc0a      	bgt.n	8007bdc <__gethex+0x160>
 8007bc6:	4648      	mov	r0, r9
 8007bc8:	f000 fda4 	bl	8008714 <_Balloc>
 8007bcc:	4604      	mov	r4, r0
 8007bce:	b940      	cbnz	r0, 8007be2 <__gethex+0x166>
 8007bd0:	4b61      	ldr	r3, [pc, #388]	; (8007d58 <__gethex+0x2dc>)
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	21e4      	movs	r1, #228	; 0xe4
 8007bd6:	4861      	ldr	r0, [pc, #388]	; (8007d5c <__gethex+0x2e0>)
 8007bd8:	f001 fbbe 	bl	8009358 <__assert_func>
 8007bdc:	3101      	adds	r1, #1
 8007bde:	105b      	asrs	r3, r3, #1
 8007be0:	e7ef      	b.n	8007bc2 <__gethex+0x146>
 8007be2:	f100 0a14 	add.w	sl, r0, #20
 8007be6:	2300      	movs	r3, #0
 8007be8:	495a      	ldr	r1, [pc, #360]	; (8007d54 <__gethex+0x2d8>)
 8007bea:	f8cd a004 	str.w	sl, [sp, #4]
 8007bee:	469b      	mov	fp, r3
 8007bf0:	45a8      	cmp	r8, r5
 8007bf2:	d342      	bcc.n	8007c7a <__gethex+0x1fe>
 8007bf4:	9801      	ldr	r0, [sp, #4]
 8007bf6:	f840 bb04 	str.w	fp, [r0], #4
 8007bfa:	eba0 000a 	sub.w	r0, r0, sl
 8007bfe:	1080      	asrs	r0, r0, #2
 8007c00:	6120      	str	r0, [r4, #16]
 8007c02:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007c06:	4658      	mov	r0, fp
 8007c08:	f000 fe76 	bl	80088f8 <__hi0bits>
 8007c0c:	683d      	ldr	r5, [r7, #0]
 8007c0e:	eba8 0000 	sub.w	r0, r8, r0
 8007c12:	42a8      	cmp	r0, r5
 8007c14:	dd59      	ble.n	8007cca <__gethex+0x24e>
 8007c16:	eba0 0805 	sub.w	r8, r0, r5
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fa05 	bl	800902c <__any_on>
 8007c22:	4683      	mov	fp, r0
 8007c24:	b1b8      	cbz	r0, 8007c56 <__gethex+0x1da>
 8007c26:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8007c2a:	1159      	asrs	r1, r3, #5
 8007c2c:	f003 021f 	and.w	r2, r3, #31
 8007c30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007c34:	f04f 0b01 	mov.w	fp, #1
 8007c38:	fa0b f202 	lsl.w	r2, fp, r2
 8007c3c:	420a      	tst	r2, r1
 8007c3e:	d00a      	beq.n	8007c56 <__gethex+0x1da>
 8007c40:	455b      	cmp	r3, fp
 8007c42:	dd06      	ble.n	8007c52 <__gethex+0x1d6>
 8007c44:	f1a8 0102 	sub.w	r1, r8, #2
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 f9ef 	bl	800902c <__any_on>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d138      	bne.n	8007cc4 <__gethex+0x248>
 8007c52:	f04f 0b02 	mov.w	fp, #2
 8007c56:	4641      	mov	r1, r8
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff fea7 	bl	80079ac <rshift>
 8007c5e:	4446      	add	r6, r8
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	42b3      	cmp	r3, r6
 8007c64:	da41      	bge.n	8007cea <__gethex+0x26e>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4648      	mov	r0, r9
 8007c6a:	f000 fd93 	bl	8008794 <_Bfree>
 8007c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c70:	2300      	movs	r3, #0
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007c78:	e78a      	b.n	8007b90 <__gethex+0x114>
 8007c7a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007c7e:	2a2e      	cmp	r2, #46	; 0x2e
 8007c80:	d014      	beq.n	8007cac <__gethex+0x230>
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d106      	bne.n	8007c94 <__gethex+0x218>
 8007c86:	9b01      	ldr	r3, [sp, #4]
 8007c88:	f843 bb04 	str.w	fp, [r3], #4
 8007c8c:	f04f 0b00 	mov.w	fp, #0
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	465b      	mov	r3, fp
 8007c94:	7828      	ldrb	r0, [r5, #0]
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	f7ff feda 	bl	8007a50 <__hexdig_fun>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	f000 000f 	and.w	r0, r0, #15
 8007ca2:	4098      	lsls	r0, r3
 8007ca4:	ea4b 0b00 	orr.w	fp, fp, r0
 8007ca8:	3304      	adds	r3, #4
 8007caa:	e7a1      	b.n	8007bf0 <__gethex+0x174>
 8007cac:	45a8      	cmp	r8, r5
 8007cae:	d8e8      	bhi.n	8007c82 <__gethex+0x206>
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	9303      	str	r3, [sp, #12]
 8007cb6:	f7fe ff17 	bl	8006ae8 <strncmp>
 8007cba:	4926      	ldr	r1, [pc, #152]	; (8007d54 <__gethex+0x2d8>)
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d1df      	bne.n	8007c82 <__gethex+0x206>
 8007cc2:	e795      	b.n	8007bf0 <__gethex+0x174>
 8007cc4:	f04f 0b03 	mov.w	fp, #3
 8007cc8:	e7c5      	b.n	8007c56 <__gethex+0x1da>
 8007cca:	da0b      	bge.n	8007ce4 <__gethex+0x268>
 8007ccc:	eba5 0800 	sub.w	r8, r5, r0
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	4648      	mov	r0, r9
 8007cd6:	f000 ff77 	bl	8008bc8 <__lshift>
 8007cda:	eba6 0608 	sub.w	r6, r6, r8
 8007cde:	4604      	mov	r4, r0
 8007ce0:	f100 0a14 	add.w	sl, r0, #20
 8007ce4:	f04f 0b00 	mov.w	fp, #0
 8007ce8:	e7ba      	b.n	8007c60 <__gethex+0x1e4>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	42b3      	cmp	r3, r6
 8007cee:	dd73      	ble.n	8007dd8 <__gethex+0x35c>
 8007cf0:	1b9e      	subs	r6, r3, r6
 8007cf2:	42b5      	cmp	r5, r6
 8007cf4:	dc34      	bgt.n	8007d60 <__gethex+0x2e4>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d023      	beq.n	8007d44 <__gethex+0x2c8>
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d025      	beq.n	8007d4c <__gethex+0x2d0>
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d115      	bne.n	8007d30 <__gethex+0x2b4>
 8007d04:	42b5      	cmp	r5, r6
 8007d06:	d113      	bne.n	8007d30 <__gethex+0x2b4>
 8007d08:	2d01      	cmp	r5, #1
 8007d0a:	d10b      	bne.n	8007d24 <__gethex+0x2a8>
 8007d0c:	9a02      	ldr	r2, [sp, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	2301      	movs	r3, #1
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	f8ca 3000 	str.w	r3, [sl]
 8007d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d1c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007d20:	601c      	str	r4, [r3, #0]
 8007d22:	e735      	b.n	8007b90 <__gethex+0x114>
 8007d24:	1e69      	subs	r1, r5, #1
 8007d26:	4620      	mov	r0, r4
 8007d28:	f001 f980 	bl	800902c <__any_on>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1ed      	bne.n	8007d0c <__gethex+0x290>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4648      	mov	r0, r9
 8007d34:	f000 fd2e 	bl	8008794 <_Bfree>
 8007d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007d42:	e725      	b.n	8007b90 <__gethex+0x114>
 8007d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f2      	bne.n	8007d30 <__gethex+0x2b4>
 8007d4a:	e7df      	b.n	8007d0c <__gethex+0x290>
 8007d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1dc      	bne.n	8007d0c <__gethex+0x290>
 8007d52:	e7ed      	b.n	8007d30 <__gethex+0x2b4>
 8007d54:	08009569 	.word	0x08009569
 8007d58:	08009745 	.word	0x08009745
 8007d5c:	08009756 	.word	0x08009756
 8007d60:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8007d64:	f1bb 0f00 	cmp.w	fp, #0
 8007d68:	d133      	bne.n	8007dd2 <__gethex+0x356>
 8007d6a:	f1b8 0f00 	cmp.w	r8, #0
 8007d6e:	d004      	beq.n	8007d7a <__gethex+0x2fe>
 8007d70:	4641      	mov	r1, r8
 8007d72:	4620      	mov	r0, r4
 8007d74:	f001 f95a 	bl	800902c <__any_on>
 8007d78:	4683      	mov	fp, r0
 8007d7a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007d7e:	2301      	movs	r3, #1
 8007d80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d84:	f008 081f 	and.w	r8, r8, #31
 8007d88:	fa03 f308 	lsl.w	r3, r3, r8
 8007d8c:	4213      	tst	r3, r2
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4620      	mov	r0, r4
 8007d92:	bf18      	it	ne
 8007d94:	f04b 0b02 	orrne.w	fp, fp, #2
 8007d98:	1bad      	subs	r5, r5, r6
 8007d9a:	f7ff fe07 	bl	80079ac <rshift>
 8007d9e:	687e      	ldr	r6, [r7, #4]
 8007da0:	f04f 0802 	mov.w	r8, #2
 8007da4:	f1bb 0f00 	cmp.w	fp, #0
 8007da8:	d04a      	beq.n	8007e40 <__gethex+0x3c4>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d016      	beq.n	8007dde <__gethex+0x362>
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d018      	beq.n	8007de6 <__gethex+0x36a>
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d109      	bne.n	8007dcc <__gethex+0x350>
 8007db8:	f01b 0f02 	tst.w	fp, #2
 8007dbc:	d006      	beq.n	8007dcc <__gethex+0x350>
 8007dbe:	f8da 3000 	ldr.w	r3, [sl]
 8007dc2:	ea4b 0b03 	orr.w	fp, fp, r3
 8007dc6:	f01b 0f01 	tst.w	fp, #1
 8007dca:	d10f      	bne.n	8007dec <__gethex+0x370>
 8007dcc:	f048 0810 	orr.w	r8, r8, #16
 8007dd0:	e036      	b.n	8007e40 <__gethex+0x3c4>
 8007dd2:	f04f 0b01 	mov.w	fp, #1
 8007dd6:	e7d0      	b.n	8007d7a <__gethex+0x2fe>
 8007dd8:	f04f 0801 	mov.w	r8, #1
 8007ddc:	e7e2      	b.n	8007da4 <__gethex+0x328>
 8007dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de0:	f1c3 0301 	rsb	r3, r3, #1
 8007de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0ef      	beq.n	8007dcc <__gethex+0x350>
 8007dec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007df0:	f104 0214 	add.w	r2, r4, #20
 8007df4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4694      	mov	ip, r2
 8007e02:	f852 1b04 	ldr.w	r1, [r2], #4
 8007e06:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8007e0a:	d01e      	beq.n	8007e4a <__gethex+0x3ce>
 8007e0c:	3101      	adds	r1, #1
 8007e0e:	f8cc 1000 	str.w	r1, [ip]
 8007e12:	f1b8 0f02 	cmp.w	r8, #2
 8007e16:	f104 0214 	add.w	r2, r4, #20
 8007e1a:	d13d      	bne.n	8007e98 <__gethex+0x41c>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	d10b      	bne.n	8007e3c <__gethex+0x3c0>
 8007e24:	1169      	asrs	r1, r5, #5
 8007e26:	2301      	movs	r3, #1
 8007e28:	f005 051f 	and.w	r5, r5, #31
 8007e2c:	fa03 f505 	lsl.w	r5, r3, r5
 8007e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e34:	421d      	tst	r5, r3
 8007e36:	bf18      	it	ne
 8007e38:	f04f 0801 	movne.w	r8, #1
 8007e3c:	f048 0820 	orr.w	r8, r8, #32
 8007e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e42:	601c      	str	r4, [r3, #0]
 8007e44:	9b02      	ldr	r3, [sp, #8]
 8007e46:	601e      	str	r6, [r3, #0]
 8007e48:	e6a2      	b.n	8007b90 <__gethex+0x114>
 8007e4a:	4290      	cmp	r0, r2
 8007e4c:	f842 3c04 	str.w	r3, [r2, #-4]
 8007e50:	d8d6      	bhi.n	8007e00 <__gethex+0x384>
 8007e52:	68a2      	ldr	r2, [r4, #8]
 8007e54:	4593      	cmp	fp, r2
 8007e56:	db17      	blt.n	8007e88 <__gethex+0x40c>
 8007e58:	6861      	ldr	r1, [r4, #4]
 8007e5a:	4648      	mov	r0, r9
 8007e5c:	3101      	adds	r1, #1
 8007e5e:	f000 fc59 	bl	8008714 <_Balloc>
 8007e62:	4682      	mov	sl, r0
 8007e64:	b918      	cbnz	r0, 8007e6e <__gethex+0x3f2>
 8007e66:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <__gethex+0x458>)
 8007e68:	4602      	mov	r2, r0
 8007e6a:	2184      	movs	r1, #132	; 0x84
 8007e6c:	e6b3      	b.n	8007bd6 <__gethex+0x15a>
 8007e6e:	6922      	ldr	r2, [r4, #16]
 8007e70:	3202      	adds	r2, #2
 8007e72:	f104 010c 	add.w	r1, r4, #12
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	300c      	adds	r0, #12
 8007e7a:	f7fe feb2 	bl	8006be2 <memcpy>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 fc87 	bl	8008794 <_Bfree>
 8007e86:	4654      	mov	r4, sl
 8007e88:	6922      	ldr	r2, [r4, #16]
 8007e8a:	1c51      	adds	r1, r2, #1
 8007e8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007e90:	6121      	str	r1, [r4, #16]
 8007e92:	2101      	movs	r1, #1
 8007e94:	6151      	str	r1, [r2, #20]
 8007e96:	e7bc      	b.n	8007e12 <__gethex+0x396>
 8007e98:	6921      	ldr	r1, [r4, #16]
 8007e9a:	4559      	cmp	r1, fp
 8007e9c:	dd0b      	ble.n	8007eb6 <__gethex+0x43a>
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7ff fd83 	bl	80079ac <rshift>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	42b3      	cmp	r3, r6
 8007eac:	f6ff aedb 	blt.w	8007c66 <__gethex+0x1ea>
 8007eb0:	f04f 0801 	mov.w	r8, #1
 8007eb4:	e7c2      	b.n	8007e3c <__gethex+0x3c0>
 8007eb6:	f015 051f 	ands.w	r5, r5, #31
 8007eba:	d0f9      	beq.n	8007eb0 <__gethex+0x434>
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	441a      	add	r2, r3
 8007ec0:	f1c5 0520 	rsb	r5, r5, #32
 8007ec4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007ec8:	f000 fd16 	bl	80088f8 <__hi0bits>
 8007ecc:	42a8      	cmp	r0, r5
 8007ece:	dbe6      	blt.n	8007e9e <__gethex+0x422>
 8007ed0:	e7ee      	b.n	8007eb0 <__gethex+0x434>
 8007ed2:	bf00      	nop
 8007ed4:	08009745 	.word	0x08009745

08007ed8 <L_shift>:
 8007ed8:	f1c2 0208 	rsb	r2, r2, #8
 8007edc:	0092      	lsls	r2, r2, #2
 8007ede:	b570      	push	{r4, r5, r6, lr}
 8007ee0:	f1c2 0620 	rsb	r6, r2, #32
 8007ee4:	6843      	ldr	r3, [r0, #4]
 8007ee6:	6804      	ldr	r4, [r0, #0]
 8007ee8:	fa03 f506 	lsl.w	r5, r3, r6
 8007eec:	432c      	orrs	r4, r5
 8007eee:	40d3      	lsrs	r3, r2
 8007ef0:	6004      	str	r4, [r0, #0]
 8007ef2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ef6:	4288      	cmp	r0, r1
 8007ef8:	d3f4      	bcc.n	8007ee4 <L_shift+0xc>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}

08007efc <__match>:
 8007efc:	b530      	push	{r4, r5, lr}
 8007efe:	6803      	ldr	r3, [r0, #0]
 8007f00:	3301      	adds	r3, #1
 8007f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f06:	b914      	cbnz	r4, 8007f0e <__match+0x12>
 8007f08:	6003      	str	r3, [r0, #0]
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	bd30      	pop	{r4, r5, pc}
 8007f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f16:	2d19      	cmp	r5, #25
 8007f18:	bf98      	it	ls
 8007f1a:	3220      	addls	r2, #32
 8007f1c:	42a2      	cmp	r2, r4
 8007f1e:	d0f0      	beq.n	8007f02 <__match+0x6>
 8007f20:	2000      	movs	r0, #0
 8007f22:	e7f3      	b.n	8007f0c <__match+0x10>

08007f24 <__hexnan>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	6801      	ldr	r1, [r0, #0]
 8007f2c:	115e      	asrs	r6, r3, #5
 8007f2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f32:	f013 031f 	ands.w	r3, r3, #31
 8007f36:	b087      	sub	sp, #28
 8007f38:	bf18      	it	ne
 8007f3a:	3604      	addne	r6, #4
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	1f37      	subs	r7, r6, #4
 8007f40:	4682      	mov	sl, r0
 8007f42:	4690      	mov	r8, r2
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f4a:	46b9      	mov	r9, r7
 8007f4c:	463c      	mov	r4, r7
 8007f4e:	9502      	str	r5, [sp, #8]
 8007f50:	46ab      	mov	fp, r5
 8007f52:	784a      	ldrb	r2, [r1, #1]
 8007f54:	1c4b      	adds	r3, r1, #1
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	b342      	cbz	r2, 8007fac <__hexnan+0x88>
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	9105      	str	r1, [sp, #20]
 8007f5e:	9204      	str	r2, [sp, #16]
 8007f60:	f7ff fd76 	bl	8007a50 <__hexdig_fun>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d14f      	bne.n	8008008 <__hexnan+0xe4>
 8007f68:	9a04      	ldr	r2, [sp, #16]
 8007f6a:	9905      	ldr	r1, [sp, #20]
 8007f6c:	2a20      	cmp	r2, #32
 8007f6e:	d818      	bhi.n	8007fa2 <__hexnan+0x7e>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	459b      	cmp	fp, r3
 8007f74:	dd13      	ble.n	8007f9e <__hexnan+0x7a>
 8007f76:	454c      	cmp	r4, r9
 8007f78:	d206      	bcs.n	8007f88 <__hexnan+0x64>
 8007f7a:	2d07      	cmp	r5, #7
 8007f7c:	dc04      	bgt.n	8007f88 <__hexnan+0x64>
 8007f7e:	462a      	mov	r2, r5
 8007f80:	4649      	mov	r1, r9
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff ffa8 	bl	8007ed8 <L_shift>
 8007f88:	4544      	cmp	r4, r8
 8007f8a:	d950      	bls.n	800802e <__hexnan+0x10a>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f1a4 0904 	sub.w	r9, r4, #4
 8007f92:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f96:	f8cd b008 	str.w	fp, [sp, #8]
 8007f9a:	464c      	mov	r4, r9
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	9903      	ldr	r1, [sp, #12]
 8007fa0:	e7d7      	b.n	8007f52 <__hexnan+0x2e>
 8007fa2:	2a29      	cmp	r2, #41	; 0x29
 8007fa4:	d155      	bne.n	8008052 <__hexnan+0x12e>
 8007fa6:	3102      	adds	r1, #2
 8007fa8:	f8ca 1000 	str.w	r1, [sl]
 8007fac:	f1bb 0f00 	cmp.w	fp, #0
 8007fb0:	d04f      	beq.n	8008052 <__hexnan+0x12e>
 8007fb2:	454c      	cmp	r4, r9
 8007fb4:	d206      	bcs.n	8007fc4 <__hexnan+0xa0>
 8007fb6:	2d07      	cmp	r5, #7
 8007fb8:	dc04      	bgt.n	8007fc4 <__hexnan+0xa0>
 8007fba:	462a      	mov	r2, r5
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff ff8a 	bl	8007ed8 <L_shift>
 8007fc4:	4544      	cmp	r4, r8
 8007fc6:	d934      	bls.n	8008032 <__hexnan+0x10e>
 8007fc8:	f1a8 0204 	sub.w	r2, r8, #4
 8007fcc:	4623      	mov	r3, r4
 8007fce:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fd2:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fd6:	429f      	cmp	r7, r3
 8007fd8:	d2f9      	bcs.n	8007fce <__hexnan+0xaa>
 8007fda:	1b3b      	subs	r3, r7, r4
 8007fdc:	f023 0303 	bic.w	r3, r3, #3
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	3e03      	subs	r6, #3
 8007fe4:	3401      	adds	r4, #1
 8007fe6:	42a6      	cmp	r6, r4
 8007fe8:	bf38      	it	cc
 8007fea:	2304      	movcc	r3, #4
 8007fec:	4443      	add	r3, r8
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f843 2b04 	str.w	r2, [r3], #4
 8007ff4:	429f      	cmp	r7, r3
 8007ff6:	d2fb      	bcs.n	8007ff0 <__hexnan+0xcc>
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	b91b      	cbnz	r3, 8008004 <__hexnan+0xe0>
 8007ffc:	4547      	cmp	r7, r8
 8007ffe:	d126      	bne.n	800804e <__hexnan+0x12a>
 8008000:	2301      	movs	r3, #1
 8008002:	603b      	str	r3, [r7, #0]
 8008004:	2005      	movs	r0, #5
 8008006:	e025      	b.n	8008054 <__hexnan+0x130>
 8008008:	3501      	adds	r5, #1
 800800a:	2d08      	cmp	r5, #8
 800800c:	f10b 0b01 	add.w	fp, fp, #1
 8008010:	dd06      	ble.n	8008020 <__hexnan+0xfc>
 8008012:	4544      	cmp	r4, r8
 8008014:	d9c3      	bls.n	8007f9e <__hexnan+0x7a>
 8008016:	2300      	movs	r3, #0
 8008018:	f844 3c04 	str.w	r3, [r4, #-4]
 800801c:	2501      	movs	r5, #1
 800801e:	3c04      	subs	r4, #4
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	f000 000f 	and.w	r0, r0, #15
 8008026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800802a:	6020      	str	r0, [r4, #0]
 800802c:	e7b7      	b.n	8007f9e <__hexnan+0x7a>
 800802e:	2508      	movs	r5, #8
 8008030:	e7b5      	b.n	8007f9e <__hexnan+0x7a>
 8008032:	9b01      	ldr	r3, [sp, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0df      	beq.n	8007ff8 <__hexnan+0xd4>
 8008038:	f1c3 0320 	rsb	r3, r3, #32
 800803c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008040:	40da      	lsrs	r2, r3
 8008042:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008046:	4013      	ands	r3, r2
 8008048:	f846 3c04 	str.w	r3, [r6, #-4]
 800804c:	e7d4      	b.n	8007ff8 <__hexnan+0xd4>
 800804e:	3f04      	subs	r7, #4
 8008050:	e7d2      	b.n	8007ff8 <__hexnan+0xd4>
 8008052:	2004      	movs	r0, #4
 8008054:	b007      	add	sp, #28
 8008056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800805a <__ssputs_r>:
 800805a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805e:	688e      	ldr	r6, [r1, #8]
 8008060:	461f      	mov	r7, r3
 8008062:	42be      	cmp	r6, r7
 8008064:	680b      	ldr	r3, [r1, #0]
 8008066:	4682      	mov	sl, r0
 8008068:	460c      	mov	r4, r1
 800806a:	4690      	mov	r8, r2
 800806c:	d82c      	bhi.n	80080c8 <__ssputs_r+0x6e>
 800806e:	898a      	ldrh	r2, [r1, #12]
 8008070:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008074:	d026      	beq.n	80080c4 <__ssputs_r+0x6a>
 8008076:	6965      	ldr	r5, [r4, #20]
 8008078:	6909      	ldr	r1, [r1, #16]
 800807a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800807e:	eba3 0901 	sub.w	r9, r3, r1
 8008082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008086:	1c7b      	adds	r3, r7, #1
 8008088:	444b      	add	r3, r9
 800808a:	106d      	asrs	r5, r5, #1
 800808c:	429d      	cmp	r5, r3
 800808e:	bf38      	it	cc
 8008090:	461d      	movcc	r5, r3
 8008092:	0553      	lsls	r3, r2, #21
 8008094:	d527      	bpl.n	80080e6 <__ssputs_r+0x8c>
 8008096:	4629      	mov	r1, r5
 8008098:	f7fd f858 	bl	800514c <_malloc_r>
 800809c:	4606      	mov	r6, r0
 800809e:	b360      	cbz	r0, 80080fa <__ssputs_r+0xa0>
 80080a0:	6921      	ldr	r1, [r4, #16]
 80080a2:	464a      	mov	r2, r9
 80080a4:	f7fe fd9d 	bl	8006be2 <memcpy>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6126      	str	r6, [r4, #16]
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	444e      	add	r6, r9
 80080ba:	eba5 0509 	sub.w	r5, r5, r9
 80080be:	6026      	str	r6, [r4, #0]
 80080c0:	60a5      	str	r5, [r4, #8]
 80080c2:	463e      	mov	r6, r7
 80080c4:	42be      	cmp	r6, r7
 80080c6:	d900      	bls.n	80080ca <__ssputs_r+0x70>
 80080c8:	463e      	mov	r6, r7
 80080ca:	6820      	ldr	r0, [r4, #0]
 80080cc:	4632      	mov	r2, r6
 80080ce:	4641      	mov	r1, r8
 80080d0:	f001 f8e1 	bl	8009296 <memmove>
 80080d4:	68a3      	ldr	r3, [r4, #8]
 80080d6:	1b9b      	subs	r3, r3, r6
 80080d8:	60a3      	str	r3, [r4, #8]
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	4433      	add	r3, r6
 80080de:	6023      	str	r3, [r4, #0]
 80080e0:	2000      	movs	r0, #0
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	462a      	mov	r2, r5
 80080e8:	f001 f804 	bl	80090f4 <_realloc_r>
 80080ec:	4606      	mov	r6, r0
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d1e0      	bne.n	80080b4 <__ssputs_r+0x5a>
 80080f2:	6921      	ldr	r1, [r4, #16]
 80080f4:	4650      	mov	r0, sl
 80080f6:	f7ff fc0d 	bl	8007914 <_free_r>
 80080fa:	230c      	movs	r3, #12
 80080fc:	f8ca 3000 	str.w	r3, [sl]
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008106:	81a3      	strh	r3, [r4, #12]
 8008108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810c:	e7e9      	b.n	80080e2 <__ssputs_r+0x88>
	...

08008110 <_svfiprintf_r>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4698      	mov	r8, r3
 8008116:	898b      	ldrh	r3, [r1, #12]
 8008118:	061b      	lsls	r3, r3, #24
 800811a:	b09d      	sub	sp, #116	; 0x74
 800811c:	4607      	mov	r7, r0
 800811e:	460d      	mov	r5, r1
 8008120:	4614      	mov	r4, r2
 8008122:	d50e      	bpl.n	8008142 <_svfiprintf_r+0x32>
 8008124:	690b      	ldr	r3, [r1, #16]
 8008126:	b963      	cbnz	r3, 8008142 <_svfiprintf_r+0x32>
 8008128:	2140      	movs	r1, #64	; 0x40
 800812a:	f7fd f80f 	bl	800514c <_malloc_r>
 800812e:	6028      	str	r0, [r5, #0]
 8008130:	6128      	str	r0, [r5, #16]
 8008132:	b920      	cbnz	r0, 800813e <_svfiprintf_r+0x2e>
 8008134:	230c      	movs	r3, #12
 8008136:	603b      	str	r3, [r7, #0]
 8008138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800813c:	e0d0      	b.n	80082e0 <_svfiprintf_r+0x1d0>
 800813e:	2340      	movs	r3, #64	; 0x40
 8008140:	616b      	str	r3, [r5, #20]
 8008142:	2300      	movs	r3, #0
 8008144:	9309      	str	r3, [sp, #36]	; 0x24
 8008146:	2320      	movs	r3, #32
 8008148:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008150:	2330      	movs	r3, #48	; 0x30
 8008152:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082f8 <_svfiprintf_r+0x1e8>
 8008156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800815a:	f04f 0901 	mov.w	r9, #1
 800815e:	4623      	mov	r3, r4
 8008160:	469a      	mov	sl, r3
 8008162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008166:	b10a      	cbz	r2, 800816c <_svfiprintf_r+0x5c>
 8008168:	2a25      	cmp	r2, #37	; 0x25
 800816a:	d1f9      	bne.n	8008160 <_svfiprintf_r+0x50>
 800816c:	ebba 0b04 	subs.w	fp, sl, r4
 8008170:	d00b      	beq.n	800818a <_svfiprintf_r+0x7a>
 8008172:	465b      	mov	r3, fp
 8008174:	4622      	mov	r2, r4
 8008176:	4629      	mov	r1, r5
 8008178:	4638      	mov	r0, r7
 800817a:	f7ff ff6e 	bl	800805a <__ssputs_r>
 800817e:	3001      	adds	r0, #1
 8008180:	f000 80a9 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008184:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008186:	445a      	add	r2, fp
 8008188:	9209      	str	r2, [sp, #36]	; 0x24
 800818a:	f89a 3000 	ldrb.w	r3, [sl]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 80a1 	beq.w	80082d6 <_svfiprintf_r+0x1c6>
 8008194:	2300      	movs	r3, #0
 8008196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800819e:	f10a 0a01 	add.w	sl, sl, #1
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	9307      	str	r3, [sp, #28]
 80081a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081aa:	931a      	str	r3, [sp, #104]	; 0x68
 80081ac:	4654      	mov	r4, sl
 80081ae:	2205      	movs	r2, #5
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	4850      	ldr	r0, [pc, #320]	; (80082f8 <_svfiprintf_r+0x1e8>)
 80081b6:	f7f8 f833 	bl	8000220 <memchr>
 80081ba:	9a04      	ldr	r2, [sp, #16]
 80081bc:	b9d8      	cbnz	r0, 80081f6 <_svfiprintf_r+0xe6>
 80081be:	06d0      	lsls	r0, r2, #27
 80081c0:	bf44      	itt	mi
 80081c2:	2320      	movmi	r3, #32
 80081c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c8:	0711      	lsls	r1, r2, #28
 80081ca:	bf44      	itt	mi
 80081cc:	232b      	movmi	r3, #43	; 0x2b
 80081ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d2:	f89a 3000 	ldrb.w	r3, [sl]
 80081d6:	2b2a      	cmp	r3, #42	; 0x2a
 80081d8:	d015      	beq.n	8008206 <_svfiprintf_r+0xf6>
 80081da:	9a07      	ldr	r2, [sp, #28]
 80081dc:	4654      	mov	r4, sl
 80081de:	2000      	movs	r0, #0
 80081e0:	f04f 0c0a 	mov.w	ip, #10
 80081e4:	4621      	mov	r1, r4
 80081e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ea:	3b30      	subs	r3, #48	; 0x30
 80081ec:	2b09      	cmp	r3, #9
 80081ee:	d94d      	bls.n	800828c <_svfiprintf_r+0x17c>
 80081f0:	b1b0      	cbz	r0, 8008220 <_svfiprintf_r+0x110>
 80081f2:	9207      	str	r2, [sp, #28]
 80081f4:	e014      	b.n	8008220 <_svfiprintf_r+0x110>
 80081f6:	eba0 0308 	sub.w	r3, r0, r8
 80081fa:	fa09 f303 	lsl.w	r3, r9, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	9304      	str	r3, [sp, #16]
 8008202:	46a2      	mov	sl, r4
 8008204:	e7d2      	b.n	80081ac <_svfiprintf_r+0x9c>
 8008206:	9b03      	ldr	r3, [sp, #12]
 8008208:	1d19      	adds	r1, r3, #4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	9103      	str	r1, [sp, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	bfbb      	ittet	lt
 8008212:	425b      	neglt	r3, r3
 8008214:	f042 0202 	orrlt.w	r2, r2, #2
 8008218:	9307      	strge	r3, [sp, #28]
 800821a:	9307      	strlt	r3, [sp, #28]
 800821c:	bfb8      	it	lt
 800821e:	9204      	strlt	r2, [sp, #16]
 8008220:	7823      	ldrb	r3, [r4, #0]
 8008222:	2b2e      	cmp	r3, #46	; 0x2e
 8008224:	d10c      	bne.n	8008240 <_svfiprintf_r+0x130>
 8008226:	7863      	ldrb	r3, [r4, #1]
 8008228:	2b2a      	cmp	r3, #42	; 0x2a
 800822a:	d134      	bne.n	8008296 <_svfiprintf_r+0x186>
 800822c:	9b03      	ldr	r3, [sp, #12]
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	9203      	str	r2, [sp, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	bfb8      	it	lt
 8008238:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800823c:	3402      	adds	r4, #2
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008308 <_svfiprintf_r+0x1f8>
 8008244:	7821      	ldrb	r1, [r4, #0]
 8008246:	2203      	movs	r2, #3
 8008248:	4650      	mov	r0, sl
 800824a:	f7f7 ffe9 	bl	8000220 <memchr>
 800824e:	b138      	cbz	r0, 8008260 <_svfiprintf_r+0x150>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	eba0 000a 	sub.w	r0, r0, sl
 8008256:	2240      	movs	r2, #64	; 0x40
 8008258:	4082      	lsls	r2, r0
 800825a:	4313      	orrs	r3, r2
 800825c:	3401      	adds	r4, #1
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	4825      	ldr	r0, [pc, #148]	; (80082fc <_svfiprintf_r+0x1ec>)
 8008266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800826a:	2206      	movs	r2, #6
 800826c:	f7f7 ffd8 	bl	8000220 <memchr>
 8008270:	2800      	cmp	r0, #0
 8008272:	d038      	beq.n	80082e6 <_svfiprintf_r+0x1d6>
 8008274:	4b22      	ldr	r3, [pc, #136]	; (8008300 <_svfiprintf_r+0x1f0>)
 8008276:	bb1b      	cbnz	r3, 80082c0 <_svfiprintf_r+0x1b0>
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	3307      	adds	r3, #7
 800827c:	f023 0307 	bic.w	r3, r3, #7
 8008280:	3308      	adds	r3, #8
 8008282:	9303      	str	r3, [sp, #12]
 8008284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008286:	4433      	add	r3, r6
 8008288:	9309      	str	r3, [sp, #36]	; 0x24
 800828a:	e768      	b.n	800815e <_svfiprintf_r+0x4e>
 800828c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008290:	460c      	mov	r4, r1
 8008292:	2001      	movs	r0, #1
 8008294:	e7a6      	b.n	80081e4 <_svfiprintf_r+0xd4>
 8008296:	2300      	movs	r3, #0
 8008298:	3401      	adds	r4, #1
 800829a:	9305      	str	r3, [sp, #20]
 800829c:	4619      	mov	r1, r3
 800829e:	f04f 0c0a 	mov.w	ip, #10
 80082a2:	4620      	mov	r0, r4
 80082a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082a8:	3a30      	subs	r2, #48	; 0x30
 80082aa:	2a09      	cmp	r2, #9
 80082ac:	d903      	bls.n	80082b6 <_svfiprintf_r+0x1a6>
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0c6      	beq.n	8008240 <_svfiprintf_r+0x130>
 80082b2:	9105      	str	r1, [sp, #20]
 80082b4:	e7c4      	b.n	8008240 <_svfiprintf_r+0x130>
 80082b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80082ba:	4604      	mov	r4, r0
 80082bc:	2301      	movs	r3, #1
 80082be:	e7f0      	b.n	80082a2 <_svfiprintf_r+0x192>
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	462a      	mov	r2, r5
 80082c6:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <_svfiprintf_r+0x1f4>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	4638      	mov	r0, r7
 80082cc:	f7fc fce0 	bl	8004c90 <_printf_float>
 80082d0:	1c42      	adds	r2, r0, #1
 80082d2:	4606      	mov	r6, r0
 80082d4:	d1d6      	bne.n	8008284 <_svfiprintf_r+0x174>
 80082d6:	89ab      	ldrh	r3, [r5, #12]
 80082d8:	065b      	lsls	r3, r3, #25
 80082da:	f53f af2d 	bmi.w	8008138 <_svfiprintf_r+0x28>
 80082de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082e0:	b01d      	add	sp, #116	; 0x74
 80082e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e6:	ab03      	add	r3, sp, #12
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	462a      	mov	r2, r5
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <_svfiprintf_r+0x1f4>)
 80082ee:	a904      	add	r1, sp, #16
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7fd f819 	bl	8005328 <_printf_i>
 80082f6:	e7eb      	b.n	80082d0 <_svfiprintf_r+0x1c0>
 80082f8:	080097b6 	.word	0x080097b6
 80082fc:	080097c0 	.word	0x080097c0
 8008300:	08004c91 	.word	0x08004c91
 8008304:	0800805b 	.word	0x0800805b
 8008308:	080097bc 	.word	0x080097bc

0800830c <__sfputc_r>:
 800830c:	6893      	ldr	r3, [r2, #8]
 800830e:	3b01      	subs	r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	b410      	push	{r4}
 8008314:	6093      	str	r3, [r2, #8]
 8008316:	da08      	bge.n	800832a <__sfputc_r+0x1e>
 8008318:	6994      	ldr	r4, [r2, #24]
 800831a:	42a3      	cmp	r3, r4
 800831c:	db01      	blt.n	8008322 <__sfputc_r+0x16>
 800831e:	290a      	cmp	r1, #10
 8008320:	d103      	bne.n	800832a <__sfputc_r+0x1e>
 8008322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008326:	f000 bf14 	b.w	8009152 <__swbuf_r>
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	1c58      	adds	r0, r3, #1
 800832e:	6010      	str	r0, [r2, #0]
 8008330:	7019      	strb	r1, [r3, #0]
 8008332:	4608      	mov	r0, r1
 8008334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008338:	4770      	bx	lr

0800833a <__sfputs_r>:
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	4614      	mov	r4, r2
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	42ac      	cmp	r4, r5
 8008346:	d101      	bne.n	800834c <__sfputs_r+0x12>
 8008348:	2000      	movs	r0, #0
 800834a:	e007      	b.n	800835c <__sfputs_r+0x22>
 800834c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008350:	463a      	mov	r2, r7
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ffda 	bl	800830c <__sfputc_r>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d1f3      	bne.n	8008344 <__sfputs_r+0xa>
 800835c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008360 <_vfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	460d      	mov	r5, r1
 8008366:	b09d      	sub	sp, #116	; 0x74
 8008368:	4614      	mov	r4, r2
 800836a:	4698      	mov	r8, r3
 800836c:	4606      	mov	r6, r0
 800836e:	b118      	cbz	r0, 8008378 <_vfiprintf_r+0x18>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <_vfiprintf_r+0x18>
 8008374:	f7fd fc78 	bl	8005c68 <__sinit>
 8008378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800837a:	07d9      	lsls	r1, r3, #31
 800837c:	d405      	bmi.n	800838a <_vfiprintf_r+0x2a>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	059a      	lsls	r2, r3, #22
 8008382:	d402      	bmi.n	800838a <_vfiprintf_r+0x2a>
 8008384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008386:	f7fe fc2a 	bl	8006bde <__retarget_lock_acquire_recursive>
 800838a:	89ab      	ldrh	r3, [r5, #12]
 800838c:	071b      	lsls	r3, r3, #28
 800838e:	d501      	bpl.n	8008394 <_vfiprintf_r+0x34>
 8008390:	692b      	ldr	r3, [r5, #16]
 8008392:	b99b      	cbnz	r3, 80083bc <_vfiprintf_r+0x5c>
 8008394:	4629      	mov	r1, r5
 8008396:	4630      	mov	r0, r6
 8008398:	f000 ff18 	bl	80091cc <__swsetup_r>
 800839c:	b170      	cbz	r0, 80083bc <_vfiprintf_r+0x5c>
 800839e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a0:	07dc      	lsls	r4, r3, #31
 80083a2:	d504      	bpl.n	80083ae <_vfiprintf_r+0x4e>
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083a8:	b01d      	add	sp, #116	; 0x74
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	0598      	lsls	r0, r3, #22
 80083b2:	d4f7      	bmi.n	80083a4 <_vfiprintf_r+0x44>
 80083b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b6:	f7fe fc13 	bl	8006be0 <__retarget_lock_release_recursive>
 80083ba:	e7f3      	b.n	80083a4 <_vfiprintf_r+0x44>
 80083bc:	2300      	movs	r3, #0
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	2320      	movs	r3, #32
 80083c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ca:	2330      	movs	r3, #48	; 0x30
 80083cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008580 <_vfiprintf_r+0x220>
 80083d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083d4:	f04f 0901 	mov.w	r9, #1
 80083d8:	4623      	mov	r3, r4
 80083da:	469a      	mov	sl, r3
 80083dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e0:	b10a      	cbz	r2, 80083e6 <_vfiprintf_r+0x86>
 80083e2:	2a25      	cmp	r2, #37	; 0x25
 80083e4:	d1f9      	bne.n	80083da <_vfiprintf_r+0x7a>
 80083e6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ea:	d00b      	beq.n	8008404 <_vfiprintf_r+0xa4>
 80083ec:	465b      	mov	r3, fp
 80083ee:	4622      	mov	r2, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ffa1 	bl	800833a <__sfputs_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f000 80a9 	beq.w	8008550 <_vfiprintf_r+0x1f0>
 80083fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008400:	445a      	add	r2, fp
 8008402:	9209      	str	r2, [sp, #36]	; 0x24
 8008404:	f89a 3000 	ldrb.w	r3, [sl]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80a1 	beq.w	8008550 <_vfiprintf_r+0x1f0>
 800840e:	2300      	movs	r3, #0
 8008410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008424:	931a      	str	r3, [sp, #104]	; 0x68
 8008426:	4654      	mov	r4, sl
 8008428:	2205      	movs	r2, #5
 800842a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842e:	4854      	ldr	r0, [pc, #336]	; (8008580 <_vfiprintf_r+0x220>)
 8008430:	f7f7 fef6 	bl	8000220 <memchr>
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	b9d8      	cbnz	r0, 8008470 <_vfiprintf_r+0x110>
 8008438:	06d1      	lsls	r1, r2, #27
 800843a:	bf44      	itt	mi
 800843c:	2320      	movmi	r3, #32
 800843e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008442:	0713      	lsls	r3, r2, #28
 8008444:	bf44      	itt	mi
 8008446:	232b      	movmi	r3, #43	; 0x2b
 8008448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800844c:	f89a 3000 	ldrb.w	r3, [sl]
 8008450:	2b2a      	cmp	r3, #42	; 0x2a
 8008452:	d015      	beq.n	8008480 <_vfiprintf_r+0x120>
 8008454:	9a07      	ldr	r2, [sp, #28]
 8008456:	4654      	mov	r4, sl
 8008458:	2000      	movs	r0, #0
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	4621      	mov	r1, r4
 8008460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008464:	3b30      	subs	r3, #48	; 0x30
 8008466:	2b09      	cmp	r3, #9
 8008468:	d94d      	bls.n	8008506 <_vfiprintf_r+0x1a6>
 800846a:	b1b0      	cbz	r0, 800849a <_vfiprintf_r+0x13a>
 800846c:	9207      	str	r2, [sp, #28]
 800846e:	e014      	b.n	800849a <_vfiprintf_r+0x13a>
 8008470:	eba0 0308 	sub.w	r3, r0, r8
 8008474:	fa09 f303 	lsl.w	r3, r9, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	46a2      	mov	sl, r4
 800847e:	e7d2      	b.n	8008426 <_vfiprintf_r+0xc6>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfbb      	ittet	lt
 800848c:	425b      	neglt	r3, r3
 800848e:	f042 0202 	orrlt.w	r2, r2, #2
 8008492:	9307      	strge	r3, [sp, #28]
 8008494:	9307      	strlt	r3, [sp, #28]
 8008496:	bfb8      	it	lt
 8008498:	9204      	strlt	r2, [sp, #16]
 800849a:	7823      	ldrb	r3, [r4, #0]
 800849c:	2b2e      	cmp	r3, #46	; 0x2e
 800849e:	d10c      	bne.n	80084ba <_vfiprintf_r+0x15a>
 80084a0:	7863      	ldrb	r3, [r4, #1]
 80084a2:	2b2a      	cmp	r3, #42	; 0x2a
 80084a4:	d134      	bne.n	8008510 <_vfiprintf_r+0x1b0>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9203      	str	r2, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfb8      	it	lt
 80084b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80084b6:	3402      	adds	r4, #2
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008590 <_vfiprintf_r+0x230>
 80084be:	7821      	ldrb	r1, [r4, #0]
 80084c0:	2203      	movs	r2, #3
 80084c2:	4650      	mov	r0, sl
 80084c4:	f7f7 feac 	bl	8000220 <memchr>
 80084c8:	b138      	cbz	r0, 80084da <_vfiprintf_r+0x17a>
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	eba0 000a 	sub.w	r0, r0, sl
 80084d0:	2240      	movs	r2, #64	; 0x40
 80084d2:	4082      	lsls	r2, r0
 80084d4:	4313      	orrs	r3, r2
 80084d6:	3401      	adds	r4, #1
 80084d8:	9304      	str	r3, [sp, #16]
 80084da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084de:	4829      	ldr	r0, [pc, #164]	; (8008584 <_vfiprintf_r+0x224>)
 80084e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e4:	2206      	movs	r2, #6
 80084e6:	f7f7 fe9b 	bl	8000220 <memchr>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d03f      	beq.n	800856e <_vfiprintf_r+0x20e>
 80084ee:	4b26      	ldr	r3, [pc, #152]	; (8008588 <_vfiprintf_r+0x228>)
 80084f0:	bb1b      	cbnz	r3, 800853a <_vfiprintf_r+0x1da>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	3307      	adds	r3, #7
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	3308      	adds	r3, #8
 80084fc:	9303      	str	r3, [sp, #12]
 80084fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008500:	443b      	add	r3, r7
 8008502:	9309      	str	r3, [sp, #36]	; 0x24
 8008504:	e768      	b.n	80083d8 <_vfiprintf_r+0x78>
 8008506:	fb0c 3202 	mla	r2, ip, r2, r3
 800850a:	460c      	mov	r4, r1
 800850c:	2001      	movs	r0, #1
 800850e:	e7a6      	b.n	800845e <_vfiprintf_r+0xfe>
 8008510:	2300      	movs	r3, #0
 8008512:	3401      	adds	r4, #1
 8008514:	9305      	str	r3, [sp, #20]
 8008516:	4619      	mov	r1, r3
 8008518:	f04f 0c0a 	mov.w	ip, #10
 800851c:	4620      	mov	r0, r4
 800851e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008522:	3a30      	subs	r2, #48	; 0x30
 8008524:	2a09      	cmp	r2, #9
 8008526:	d903      	bls.n	8008530 <_vfiprintf_r+0x1d0>
 8008528:	2b00      	cmp	r3, #0
 800852a:	d0c6      	beq.n	80084ba <_vfiprintf_r+0x15a>
 800852c:	9105      	str	r1, [sp, #20]
 800852e:	e7c4      	b.n	80084ba <_vfiprintf_r+0x15a>
 8008530:	fb0c 2101 	mla	r1, ip, r1, r2
 8008534:	4604      	mov	r4, r0
 8008536:	2301      	movs	r3, #1
 8008538:	e7f0      	b.n	800851c <_vfiprintf_r+0x1bc>
 800853a:	ab03      	add	r3, sp, #12
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	462a      	mov	r2, r5
 8008540:	4b12      	ldr	r3, [pc, #72]	; (800858c <_vfiprintf_r+0x22c>)
 8008542:	a904      	add	r1, sp, #16
 8008544:	4630      	mov	r0, r6
 8008546:	f7fc fba3 	bl	8004c90 <_printf_float>
 800854a:	4607      	mov	r7, r0
 800854c:	1c78      	adds	r0, r7, #1
 800854e:	d1d6      	bne.n	80084fe <_vfiprintf_r+0x19e>
 8008550:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008552:	07d9      	lsls	r1, r3, #31
 8008554:	d405      	bmi.n	8008562 <_vfiprintf_r+0x202>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	059a      	lsls	r2, r3, #22
 800855a:	d402      	bmi.n	8008562 <_vfiprintf_r+0x202>
 800855c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800855e:	f7fe fb3f 	bl	8006be0 <__retarget_lock_release_recursive>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	065b      	lsls	r3, r3, #25
 8008566:	f53f af1d 	bmi.w	80083a4 <_vfiprintf_r+0x44>
 800856a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856c:	e71c      	b.n	80083a8 <_vfiprintf_r+0x48>
 800856e:	ab03      	add	r3, sp, #12
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	462a      	mov	r2, r5
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <_vfiprintf_r+0x22c>)
 8008576:	a904      	add	r1, sp, #16
 8008578:	4630      	mov	r0, r6
 800857a:	f7fc fed5 	bl	8005328 <_printf_i>
 800857e:	e7e4      	b.n	800854a <_vfiprintf_r+0x1ea>
 8008580:	080097b6 	.word	0x080097b6
 8008584:	080097c0 	.word	0x080097c0
 8008588:	08004c91 	.word	0x08004c91
 800858c:	0800833b 	.word	0x0800833b
 8008590:	080097bc 	.word	0x080097bc

08008594 <__ascii_mbtowc>:
 8008594:	b082      	sub	sp, #8
 8008596:	b901      	cbnz	r1, 800859a <__ascii_mbtowc+0x6>
 8008598:	a901      	add	r1, sp, #4
 800859a:	b142      	cbz	r2, 80085ae <__ascii_mbtowc+0x1a>
 800859c:	b14b      	cbz	r3, 80085b2 <__ascii_mbtowc+0x1e>
 800859e:	7813      	ldrb	r3, [r2, #0]
 80085a0:	600b      	str	r3, [r1, #0]
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	1e10      	subs	r0, r2, #0
 80085a6:	bf18      	it	ne
 80085a8:	2001      	movne	r0, #1
 80085aa:	b002      	add	sp, #8
 80085ac:	4770      	bx	lr
 80085ae:	4610      	mov	r0, r2
 80085b0:	e7fb      	b.n	80085aa <__ascii_mbtowc+0x16>
 80085b2:	f06f 0001 	mvn.w	r0, #1
 80085b6:	e7f8      	b.n	80085aa <__ascii_mbtowc+0x16>

080085b8 <__sflush_r>:
 80085b8:	898a      	ldrh	r2, [r1, #12]
 80085ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085be:	4605      	mov	r5, r0
 80085c0:	0710      	lsls	r0, r2, #28
 80085c2:	460c      	mov	r4, r1
 80085c4:	d458      	bmi.n	8008678 <__sflush_r+0xc0>
 80085c6:	684b      	ldr	r3, [r1, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc05      	bgt.n	80085d8 <__sflush_r+0x20>
 80085cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	dc02      	bgt.n	80085d8 <__sflush_r+0x20>
 80085d2:	2000      	movs	r0, #0
 80085d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085da:	2e00      	cmp	r6, #0
 80085dc:	d0f9      	beq.n	80085d2 <__sflush_r+0x1a>
 80085de:	2300      	movs	r3, #0
 80085e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085e4:	682f      	ldr	r7, [r5, #0]
 80085e6:	6a21      	ldr	r1, [r4, #32]
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	d032      	beq.n	8008652 <__sflush_r+0x9a>
 80085ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	075a      	lsls	r2, r3, #29
 80085f2:	d505      	bpl.n	8008600 <__sflush_r+0x48>
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	1ac0      	subs	r0, r0, r3
 80085f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085fa:	b10b      	cbz	r3, 8008600 <__sflush_r+0x48>
 80085fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085fe:	1ac0      	subs	r0, r0, r3
 8008600:	2300      	movs	r3, #0
 8008602:	4602      	mov	r2, r0
 8008604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008606:	6a21      	ldr	r1, [r4, #32]
 8008608:	4628      	mov	r0, r5
 800860a:	47b0      	blx	r6
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	d106      	bne.n	8008620 <__sflush_r+0x68>
 8008612:	6829      	ldr	r1, [r5, #0]
 8008614:	291d      	cmp	r1, #29
 8008616:	d82b      	bhi.n	8008670 <__sflush_r+0xb8>
 8008618:	4a29      	ldr	r2, [pc, #164]	; (80086c0 <__sflush_r+0x108>)
 800861a:	410a      	asrs	r2, r1
 800861c:	07d6      	lsls	r6, r2, #31
 800861e:	d427      	bmi.n	8008670 <__sflush_r+0xb8>
 8008620:	2200      	movs	r2, #0
 8008622:	6062      	str	r2, [r4, #4]
 8008624:	04d9      	lsls	r1, r3, #19
 8008626:	6922      	ldr	r2, [r4, #16]
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	d504      	bpl.n	8008636 <__sflush_r+0x7e>
 800862c:	1c42      	adds	r2, r0, #1
 800862e:	d101      	bne.n	8008634 <__sflush_r+0x7c>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b903      	cbnz	r3, 8008636 <__sflush_r+0x7e>
 8008634:	6560      	str	r0, [r4, #84]	; 0x54
 8008636:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008638:	602f      	str	r7, [r5, #0]
 800863a:	2900      	cmp	r1, #0
 800863c:	d0c9      	beq.n	80085d2 <__sflush_r+0x1a>
 800863e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008642:	4299      	cmp	r1, r3
 8008644:	d002      	beq.n	800864c <__sflush_r+0x94>
 8008646:	4628      	mov	r0, r5
 8008648:	f7ff f964 	bl	8007914 <_free_r>
 800864c:	2000      	movs	r0, #0
 800864e:	6360      	str	r0, [r4, #52]	; 0x34
 8008650:	e7c0      	b.n	80085d4 <__sflush_r+0x1c>
 8008652:	2301      	movs	r3, #1
 8008654:	4628      	mov	r0, r5
 8008656:	47b0      	blx	r6
 8008658:	1c41      	adds	r1, r0, #1
 800865a:	d1c8      	bne.n	80085ee <__sflush_r+0x36>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0c5      	beq.n	80085ee <__sflush_r+0x36>
 8008662:	2b1d      	cmp	r3, #29
 8008664:	d001      	beq.n	800866a <__sflush_r+0xb2>
 8008666:	2b16      	cmp	r3, #22
 8008668:	d101      	bne.n	800866e <__sflush_r+0xb6>
 800866a:	602f      	str	r7, [r5, #0]
 800866c:	e7b1      	b.n	80085d2 <__sflush_r+0x1a>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008674:	81a3      	strh	r3, [r4, #12]
 8008676:	e7ad      	b.n	80085d4 <__sflush_r+0x1c>
 8008678:	690f      	ldr	r7, [r1, #16]
 800867a:	2f00      	cmp	r7, #0
 800867c:	d0a9      	beq.n	80085d2 <__sflush_r+0x1a>
 800867e:	0793      	lsls	r3, r2, #30
 8008680:	680e      	ldr	r6, [r1, #0]
 8008682:	bf08      	it	eq
 8008684:	694b      	ldreq	r3, [r1, #20]
 8008686:	600f      	str	r7, [r1, #0]
 8008688:	bf18      	it	ne
 800868a:	2300      	movne	r3, #0
 800868c:	eba6 0807 	sub.w	r8, r6, r7
 8008690:	608b      	str	r3, [r1, #8]
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	dd9c      	ble.n	80085d2 <__sflush_r+0x1a>
 8008698:	6a21      	ldr	r1, [r4, #32]
 800869a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800869c:	4643      	mov	r3, r8
 800869e:	463a      	mov	r2, r7
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b0      	blx	r6
 80086a4:	2800      	cmp	r0, #0
 80086a6:	dc06      	bgt.n	80086b6 <__sflush_r+0xfe>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b4:	e78e      	b.n	80085d4 <__sflush_r+0x1c>
 80086b6:	4407      	add	r7, r0
 80086b8:	eba8 0800 	sub.w	r8, r8, r0
 80086bc:	e7e9      	b.n	8008692 <__sflush_r+0xda>
 80086be:	bf00      	nop
 80086c0:	dfbffffe 	.word	0xdfbffffe

080086c4 <_fflush_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	690b      	ldr	r3, [r1, #16]
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	b913      	cbnz	r3, 80086d4 <_fflush_r+0x10>
 80086ce:	2500      	movs	r5, #0
 80086d0:	4628      	mov	r0, r5
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	b118      	cbz	r0, 80086de <_fflush_r+0x1a>
 80086d6:	6a03      	ldr	r3, [r0, #32]
 80086d8:	b90b      	cbnz	r3, 80086de <_fflush_r+0x1a>
 80086da:	f7fd fac5 	bl	8005c68 <__sinit>
 80086de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f3      	beq.n	80086ce <_fflush_r+0xa>
 80086e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086e8:	07d0      	lsls	r0, r2, #31
 80086ea:	d404      	bmi.n	80086f6 <_fflush_r+0x32>
 80086ec:	0599      	lsls	r1, r3, #22
 80086ee:	d402      	bmi.n	80086f6 <_fflush_r+0x32>
 80086f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f2:	f7fe fa74 	bl	8006bde <__retarget_lock_acquire_recursive>
 80086f6:	4628      	mov	r0, r5
 80086f8:	4621      	mov	r1, r4
 80086fa:	f7ff ff5d 	bl	80085b8 <__sflush_r>
 80086fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008700:	07da      	lsls	r2, r3, #31
 8008702:	4605      	mov	r5, r0
 8008704:	d4e4      	bmi.n	80086d0 <_fflush_r+0xc>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	059b      	lsls	r3, r3, #22
 800870a:	d4e1      	bmi.n	80086d0 <_fflush_r+0xc>
 800870c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800870e:	f7fe fa67 	bl	8006be0 <__retarget_lock_release_recursive>
 8008712:	e7dd      	b.n	80086d0 <_fflush_r+0xc>

08008714 <_Balloc>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	69c6      	ldr	r6, [r0, #28]
 8008718:	4604      	mov	r4, r0
 800871a:	460d      	mov	r5, r1
 800871c:	b976      	cbnz	r6, 800873c <_Balloc+0x28>
 800871e:	2010      	movs	r0, #16
 8008720:	f7fc fcec 	bl	80050fc <malloc>
 8008724:	4602      	mov	r2, r0
 8008726:	61e0      	str	r0, [r4, #28]
 8008728:	b920      	cbnz	r0, 8008734 <_Balloc+0x20>
 800872a:	4b18      	ldr	r3, [pc, #96]	; (800878c <_Balloc+0x78>)
 800872c:	4818      	ldr	r0, [pc, #96]	; (8008790 <_Balloc+0x7c>)
 800872e:	216b      	movs	r1, #107	; 0x6b
 8008730:	f000 fe12 	bl	8009358 <__assert_func>
 8008734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008738:	6006      	str	r6, [r0, #0]
 800873a:	60c6      	str	r6, [r0, #12]
 800873c:	69e6      	ldr	r6, [r4, #28]
 800873e:	68f3      	ldr	r3, [r6, #12]
 8008740:	b183      	cbz	r3, 8008764 <_Balloc+0x50>
 8008742:	69e3      	ldr	r3, [r4, #28]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800874a:	b9b8      	cbnz	r0, 800877c <_Balloc+0x68>
 800874c:	2101      	movs	r1, #1
 800874e:	fa01 f605 	lsl.w	r6, r1, r5
 8008752:	1d72      	adds	r2, r6, #5
 8008754:	0092      	lsls	r2, r2, #2
 8008756:	4620      	mov	r0, r4
 8008758:	f000 fe1c 	bl	8009394 <_calloc_r>
 800875c:	b160      	cbz	r0, 8008778 <_Balloc+0x64>
 800875e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008762:	e00e      	b.n	8008782 <_Balloc+0x6e>
 8008764:	2221      	movs	r2, #33	; 0x21
 8008766:	2104      	movs	r1, #4
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fe13 	bl	8009394 <_calloc_r>
 800876e:	69e3      	ldr	r3, [r4, #28]
 8008770:	60f0      	str	r0, [r6, #12]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e4      	bne.n	8008742 <_Balloc+0x2e>
 8008778:	2000      	movs	r0, #0
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	6802      	ldr	r2, [r0, #0]
 800877e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008782:	2300      	movs	r3, #0
 8008784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008788:	e7f7      	b.n	800877a <_Balloc+0x66>
 800878a:	bf00      	nop
 800878c:	080096d6 	.word	0x080096d6
 8008790:	080097c7 	.word	0x080097c7

08008794 <_Bfree>:
 8008794:	b570      	push	{r4, r5, r6, lr}
 8008796:	69c6      	ldr	r6, [r0, #28]
 8008798:	4605      	mov	r5, r0
 800879a:	460c      	mov	r4, r1
 800879c:	b976      	cbnz	r6, 80087bc <_Bfree+0x28>
 800879e:	2010      	movs	r0, #16
 80087a0:	f7fc fcac 	bl	80050fc <malloc>
 80087a4:	4602      	mov	r2, r0
 80087a6:	61e8      	str	r0, [r5, #28]
 80087a8:	b920      	cbnz	r0, 80087b4 <_Bfree+0x20>
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <_Bfree+0x3c>)
 80087ac:	4809      	ldr	r0, [pc, #36]	; (80087d4 <_Bfree+0x40>)
 80087ae:	218f      	movs	r1, #143	; 0x8f
 80087b0:	f000 fdd2 	bl	8009358 <__assert_func>
 80087b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087b8:	6006      	str	r6, [r0, #0]
 80087ba:	60c6      	str	r6, [r0, #12]
 80087bc:	b13c      	cbz	r4, 80087ce <_Bfree+0x3a>
 80087be:	69eb      	ldr	r3, [r5, #28]
 80087c0:	6862      	ldr	r2, [r4, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087c8:	6021      	str	r1, [r4, #0]
 80087ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	080096d6 	.word	0x080096d6
 80087d4:	080097c7 	.word	0x080097c7

080087d8 <__multadd>:
 80087d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087dc:	690d      	ldr	r5, [r1, #16]
 80087de:	4607      	mov	r7, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	461e      	mov	r6, r3
 80087e4:	f101 0c14 	add.w	ip, r1, #20
 80087e8:	2000      	movs	r0, #0
 80087ea:	f8dc 3000 	ldr.w	r3, [ip]
 80087ee:	b299      	uxth	r1, r3
 80087f0:	fb02 6101 	mla	r1, r2, r1, r6
 80087f4:	0c1e      	lsrs	r6, r3, #16
 80087f6:	0c0b      	lsrs	r3, r1, #16
 80087f8:	fb02 3306 	mla	r3, r2, r6, r3
 80087fc:	b289      	uxth	r1, r1
 80087fe:	3001      	adds	r0, #1
 8008800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008804:	4285      	cmp	r5, r0
 8008806:	f84c 1b04 	str.w	r1, [ip], #4
 800880a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800880e:	dcec      	bgt.n	80087ea <__multadd+0x12>
 8008810:	b30e      	cbz	r6, 8008856 <__multadd+0x7e>
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	42ab      	cmp	r3, r5
 8008816:	dc19      	bgt.n	800884c <__multadd+0x74>
 8008818:	6861      	ldr	r1, [r4, #4]
 800881a:	4638      	mov	r0, r7
 800881c:	3101      	adds	r1, #1
 800881e:	f7ff ff79 	bl	8008714 <_Balloc>
 8008822:	4680      	mov	r8, r0
 8008824:	b928      	cbnz	r0, 8008832 <__multadd+0x5a>
 8008826:	4602      	mov	r2, r0
 8008828:	4b0c      	ldr	r3, [pc, #48]	; (800885c <__multadd+0x84>)
 800882a:	480d      	ldr	r0, [pc, #52]	; (8008860 <__multadd+0x88>)
 800882c:	21ba      	movs	r1, #186	; 0xba
 800882e:	f000 fd93 	bl	8009358 <__assert_func>
 8008832:	6922      	ldr	r2, [r4, #16]
 8008834:	3202      	adds	r2, #2
 8008836:	f104 010c 	add.w	r1, r4, #12
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	300c      	adds	r0, #12
 800883e:	f7fe f9d0 	bl	8006be2 <memcpy>
 8008842:	4621      	mov	r1, r4
 8008844:	4638      	mov	r0, r7
 8008846:	f7ff ffa5 	bl	8008794 <_Bfree>
 800884a:	4644      	mov	r4, r8
 800884c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008850:	3501      	adds	r5, #1
 8008852:	615e      	str	r6, [r3, #20]
 8008854:	6125      	str	r5, [r4, #16]
 8008856:	4620      	mov	r0, r4
 8008858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800885c:	08009745 	.word	0x08009745
 8008860:	080097c7 	.word	0x080097c7

08008864 <__s2b>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	4615      	mov	r5, r2
 800886c:	461f      	mov	r7, r3
 800886e:	2209      	movs	r2, #9
 8008870:	3308      	adds	r3, #8
 8008872:	4606      	mov	r6, r0
 8008874:	fb93 f3f2 	sdiv	r3, r3, r2
 8008878:	2100      	movs	r1, #0
 800887a:	2201      	movs	r2, #1
 800887c:	429a      	cmp	r2, r3
 800887e:	db09      	blt.n	8008894 <__s2b+0x30>
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff ff47 	bl	8008714 <_Balloc>
 8008886:	b940      	cbnz	r0, 800889a <__s2b+0x36>
 8008888:	4602      	mov	r2, r0
 800888a:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <__s2b+0x8c>)
 800888c:	4819      	ldr	r0, [pc, #100]	; (80088f4 <__s2b+0x90>)
 800888e:	21d3      	movs	r1, #211	; 0xd3
 8008890:	f000 fd62 	bl	8009358 <__assert_func>
 8008894:	0052      	lsls	r2, r2, #1
 8008896:	3101      	adds	r1, #1
 8008898:	e7f0      	b.n	800887c <__s2b+0x18>
 800889a:	9b08      	ldr	r3, [sp, #32]
 800889c:	6143      	str	r3, [r0, #20]
 800889e:	2d09      	cmp	r5, #9
 80088a0:	f04f 0301 	mov.w	r3, #1
 80088a4:	6103      	str	r3, [r0, #16]
 80088a6:	dd16      	ble.n	80088d6 <__s2b+0x72>
 80088a8:	f104 0909 	add.w	r9, r4, #9
 80088ac:	46c8      	mov	r8, r9
 80088ae:	442c      	add	r4, r5
 80088b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80088b4:	4601      	mov	r1, r0
 80088b6:	3b30      	subs	r3, #48	; 0x30
 80088b8:	220a      	movs	r2, #10
 80088ba:	4630      	mov	r0, r6
 80088bc:	f7ff ff8c 	bl	80087d8 <__multadd>
 80088c0:	45a0      	cmp	r8, r4
 80088c2:	d1f5      	bne.n	80088b0 <__s2b+0x4c>
 80088c4:	f1a5 0408 	sub.w	r4, r5, #8
 80088c8:	444c      	add	r4, r9
 80088ca:	1b2d      	subs	r5, r5, r4
 80088cc:	1963      	adds	r3, r4, r5
 80088ce:	42bb      	cmp	r3, r7
 80088d0:	db04      	blt.n	80088dc <__s2b+0x78>
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	340a      	adds	r4, #10
 80088d8:	2509      	movs	r5, #9
 80088da:	e7f6      	b.n	80088ca <__s2b+0x66>
 80088dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80088e0:	4601      	mov	r1, r0
 80088e2:	3b30      	subs	r3, #48	; 0x30
 80088e4:	220a      	movs	r2, #10
 80088e6:	4630      	mov	r0, r6
 80088e8:	f7ff ff76 	bl	80087d8 <__multadd>
 80088ec:	e7ee      	b.n	80088cc <__s2b+0x68>
 80088ee:	bf00      	nop
 80088f0:	08009745 	.word	0x08009745
 80088f4:	080097c7 	.word	0x080097c7

080088f8 <__hi0bits>:
 80088f8:	0c03      	lsrs	r3, r0, #16
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	b9d3      	cbnz	r3, 8008934 <__hi0bits+0x3c>
 80088fe:	0400      	lsls	r0, r0, #16
 8008900:	2310      	movs	r3, #16
 8008902:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008906:	bf04      	itt	eq
 8008908:	0200      	lsleq	r0, r0, #8
 800890a:	3308      	addeq	r3, #8
 800890c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008910:	bf04      	itt	eq
 8008912:	0100      	lsleq	r0, r0, #4
 8008914:	3304      	addeq	r3, #4
 8008916:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800891a:	bf04      	itt	eq
 800891c:	0080      	lsleq	r0, r0, #2
 800891e:	3302      	addeq	r3, #2
 8008920:	2800      	cmp	r0, #0
 8008922:	db05      	blt.n	8008930 <__hi0bits+0x38>
 8008924:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008928:	f103 0301 	add.w	r3, r3, #1
 800892c:	bf08      	it	eq
 800892e:	2320      	moveq	r3, #32
 8008930:	4618      	mov	r0, r3
 8008932:	4770      	bx	lr
 8008934:	2300      	movs	r3, #0
 8008936:	e7e4      	b.n	8008902 <__hi0bits+0xa>

08008938 <__lo0bits>:
 8008938:	6803      	ldr	r3, [r0, #0]
 800893a:	f013 0207 	ands.w	r2, r3, #7
 800893e:	d00c      	beq.n	800895a <__lo0bits+0x22>
 8008940:	07d9      	lsls	r1, r3, #31
 8008942:	d422      	bmi.n	800898a <__lo0bits+0x52>
 8008944:	079a      	lsls	r2, r3, #30
 8008946:	bf49      	itett	mi
 8008948:	085b      	lsrmi	r3, r3, #1
 800894a:	089b      	lsrpl	r3, r3, #2
 800894c:	6003      	strmi	r3, [r0, #0]
 800894e:	2201      	movmi	r2, #1
 8008950:	bf5c      	itt	pl
 8008952:	6003      	strpl	r3, [r0, #0]
 8008954:	2202      	movpl	r2, #2
 8008956:	4610      	mov	r0, r2
 8008958:	4770      	bx	lr
 800895a:	b299      	uxth	r1, r3
 800895c:	b909      	cbnz	r1, 8008962 <__lo0bits+0x2a>
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	2210      	movs	r2, #16
 8008962:	b2d9      	uxtb	r1, r3
 8008964:	b909      	cbnz	r1, 800896a <__lo0bits+0x32>
 8008966:	3208      	adds	r2, #8
 8008968:	0a1b      	lsrs	r3, r3, #8
 800896a:	0719      	lsls	r1, r3, #28
 800896c:	bf04      	itt	eq
 800896e:	091b      	lsreq	r3, r3, #4
 8008970:	3204      	addeq	r2, #4
 8008972:	0799      	lsls	r1, r3, #30
 8008974:	bf04      	itt	eq
 8008976:	089b      	lsreq	r3, r3, #2
 8008978:	3202      	addeq	r2, #2
 800897a:	07d9      	lsls	r1, r3, #31
 800897c:	d403      	bmi.n	8008986 <__lo0bits+0x4e>
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	f102 0201 	add.w	r2, r2, #1
 8008984:	d003      	beq.n	800898e <__lo0bits+0x56>
 8008986:	6003      	str	r3, [r0, #0]
 8008988:	e7e5      	b.n	8008956 <__lo0bits+0x1e>
 800898a:	2200      	movs	r2, #0
 800898c:	e7e3      	b.n	8008956 <__lo0bits+0x1e>
 800898e:	2220      	movs	r2, #32
 8008990:	e7e1      	b.n	8008956 <__lo0bits+0x1e>
	...

08008994 <__i2b>:
 8008994:	b510      	push	{r4, lr}
 8008996:	460c      	mov	r4, r1
 8008998:	2101      	movs	r1, #1
 800899a:	f7ff febb 	bl	8008714 <_Balloc>
 800899e:	4602      	mov	r2, r0
 80089a0:	b928      	cbnz	r0, 80089ae <__i2b+0x1a>
 80089a2:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <__i2b+0x24>)
 80089a4:	4805      	ldr	r0, [pc, #20]	; (80089bc <__i2b+0x28>)
 80089a6:	f240 1145 	movw	r1, #325	; 0x145
 80089aa:	f000 fcd5 	bl	8009358 <__assert_func>
 80089ae:	2301      	movs	r3, #1
 80089b0:	6144      	str	r4, [r0, #20]
 80089b2:	6103      	str	r3, [r0, #16]
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	bf00      	nop
 80089b8:	08009745 	.word	0x08009745
 80089bc:	080097c7 	.word	0x080097c7

080089c0 <__multiply>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4691      	mov	r9, r2
 80089c6:	690a      	ldr	r2, [r1, #16]
 80089c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	bfb8      	it	lt
 80089d0:	460b      	movlt	r3, r1
 80089d2:	460c      	mov	r4, r1
 80089d4:	bfbc      	itt	lt
 80089d6:	464c      	movlt	r4, r9
 80089d8:	4699      	movlt	r9, r3
 80089da:	6927      	ldr	r7, [r4, #16]
 80089dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	6861      	ldr	r1, [r4, #4]
 80089e4:	eb07 060a 	add.w	r6, r7, sl
 80089e8:	42b3      	cmp	r3, r6
 80089ea:	b085      	sub	sp, #20
 80089ec:	bfb8      	it	lt
 80089ee:	3101      	addlt	r1, #1
 80089f0:	f7ff fe90 	bl	8008714 <_Balloc>
 80089f4:	b930      	cbnz	r0, 8008a04 <__multiply+0x44>
 80089f6:	4602      	mov	r2, r0
 80089f8:	4b44      	ldr	r3, [pc, #272]	; (8008b0c <__multiply+0x14c>)
 80089fa:	4845      	ldr	r0, [pc, #276]	; (8008b10 <__multiply+0x150>)
 80089fc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a00:	f000 fcaa 	bl	8009358 <__assert_func>
 8008a04:	f100 0514 	add.w	r5, r0, #20
 8008a08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4543      	cmp	r3, r8
 8008a12:	d321      	bcc.n	8008a58 <__multiply+0x98>
 8008a14:	f104 0314 	add.w	r3, r4, #20
 8008a18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a1c:	f109 0314 	add.w	r3, r9, #20
 8008a20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a24:	9202      	str	r2, [sp, #8]
 8008a26:	1b3a      	subs	r2, r7, r4
 8008a28:	3a15      	subs	r2, #21
 8008a2a:	f022 0203 	bic.w	r2, r2, #3
 8008a2e:	3204      	adds	r2, #4
 8008a30:	f104 0115 	add.w	r1, r4, #21
 8008a34:	428f      	cmp	r7, r1
 8008a36:	bf38      	it	cc
 8008a38:	2204      	movcc	r2, #4
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9a02      	ldr	r2, [sp, #8]
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d80c      	bhi.n	8008a5e <__multiply+0x9e>
 8008a44:	2e00      	cmp	r6, #0
 8008a46:	dd03      	ble.n	8008a50 <__multiply+0x90>
 8008a48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d05b      	beq.n	8008b08 <__multiply+0x148>
 8008a50:	6106      	str	r6, [r0, #16]
 8008a52:	b005      	add	sp, #20
 8008a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a58:	f843 2b04 	str.w	r2, [r3], #4
 8008a5c:	e7d8      	b.n	8008a10 <__multiply+0x50>
 8008a5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a62:	f1ba 0f00 	cmp.w	sl, #0
 8008a66:	d024      	beq.n	8008ab2 <__multiply+0xf2>
 8008a68:	f104 0e14 	add.w	lr, r4, #20
 8008a6c:	46a9      	mov	r9, r5
 8008a6e:	f04f 0c00 	mov.w	ip, #0
 8008a72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a76:	f8d9 1000 	ldr.w	r1, [r9]
 8008a7a:	fa1f fb82 	uxth.w	fp, r2
 8008a7e:	b289      	uxth	r1, r1
 8008a80:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a88:	f8d9 2000 	ldr.w	r2, [r9]
 8008a8c:	4461      	add	r1, ip
 8008a8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a92:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008aa0:	4577      	cmp	r7, lr
 8008aa2:	f849 1b04 	str.w	r1, [r9], #4
 8008aa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aaa:	d8e2      	bhi.n	8008a72 <__multiply+0xb2>
 8008aac:	9a01      	ldr	r2, [sp, #4]
 8008aae:	f845 c002 	str.w	ip, [r5, r2]
 8008ab2:	9a03      	ldr	r2, [sp, #12]
 8008ab4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	f1b9 0f00 	cmp.w	r9, #0
 8008abe:	d021      	beq.n	8008b04 <__multiply+0x144>
 8008ac0:	6829      	ldr	r1, [r5, #0]
 8008ac2:	f104 0c14 	add.w	ip, r4, #20
 8008ac6:	46ae      	mov	lr, r5
 8008ac8:	f04f 0a00 	mov.w	sl, #0
 8008acc:	f8bc b000 	ldrh.w	fp, [ip]
 8008ad0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ad4:	fb09 220b 	mla	r2, r9, fp, r2
 8008ad8:	4452      	add	r2, sl
 8008ada:	b289      	uxth	r1, r1
 8008adc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ae0:	f84e 1b04 	str.w	r1, [lr], #4
 8008ae4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aec:	f8be 1000 	ldrh.w	r1, [lr]
 8008af0:	fb09 110a 	mla	r1, r9, sl, r1
 8008af4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008af8:	4567      	cmp	r7, ip
 8008afa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008afe:	d8e5      	bhi.n	8008acc <__multiply+0x10c>
 8008b00:	9a01      	ldr	r2, [sp, #4]
 8008b02:	50a9      	str	r1, [r5, r2]
 8008b04:	3504      	adds	r5, #4
 8008b06:	e799      	b.n	8008a3c <__multiply+0x7c>
 8008b08:	3e01      	subs	r6, #1
 8008b0a:	e79b      	b.n	8008a44 <__multiply+0x84>
 8008b0c:	08009745 	.word	0x08009745
 8008b10:	080097c7 	.word	0x080097c7

08008b14 <__pow5mult>:
 8008b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b18:	4615      	mov	r5, r2
 8008b1a:	f012 0203 	ands.w	r2, r2, #3
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460f      	mov	r7, r1
 8008b22:	d007      	beq.n	8008b34 <__pow5mult+0x20>
 8008b24:	4c25      	ldr	r4, [pc, #148]	; (8008bbc <__pow5mult+0xa8>)
 8008b26:	3a01      	subs	r2, #1
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b2e:	f7ff fe53 	bl	80087d8 <__multadd>
 8008b32:	4607      	mov	r7, r0
 8008b34:	10ad      	asrs	r5, r5, #2
 8008b36:	d03d      	beq.n	8008bb4 <__pow5mult+0xa0>
 8008b38:	69f4      	ldr	r4, [r6, #28]
 8008b3a:	b97c      	cbnz	r4, 8008b5c <__pow5mult+0x48>
 8008b3c:	2010      	movs	r0, #16
 8008b3e:	f7fc fadd 	bl	80050fc <malloc>
 8008b42:	4602      	mov	r2, r0
 8008b44:	61f0      	str	r0, [r6, #28]
 8008b46:	b928      	cbnz	r0, 8008b54 <__pow5mult+0x40>
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <__pow5mult+0xac>)
 8008b4a:	481e      	ldr	r0, [pc, #120]	; (8008bc4 <__pow5mult+0xb0>)
 8008b4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b50:	f000 fc02 	bl	8009358 <__assert_func>
 8008b54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b58:	6004      	str	r4, [r0, #0]
 8008b5a:	60c4      	str	r4, [r0, #12]
 8008b5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b64:	b94c      	cbnz	r4, 8008b7a <__pow5mult+0x66>
 8008b66:	f240 2171 	movw	r1, #625	; 0x271
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7ff ff12 	bl	8008994 <__i2b>
 8008b70:	2300      	movs	r3, #0
 8008b72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b76:	4604      	mov	r4, r0
 8008b78:	6003      	str	r3, [r0, #0]
 8008b7a:	f04f 0900 	mov.w	r9, #0
 8008b7e:	07eb      	lsls	r3, r5, #31
 8008b80:	d50a      	bpl.n	8008b98 <__pow5mult+0x84>
 8008b82:	4639      	mov	r1, r7
 8008b84:	4622      	mov	r2, r4
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ff1a 	bl	80089c0 <__multiply>
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4680      	mov	r8, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff fdff 	bl	8008794 <_Bfree>
 8008b96:	4647      	mov	r7, r8
 8008b98:	106d      	asrs	r5, r5, #1
 8008b9a:	d00b      	beq.n	8008bb4 <__pow5mult+0xa0>
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	b938      	cbnz	r0, 8008bb0 <__pow5mult+0x9c>
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff ff0b 	bl	80089c0 <__multiply>
 8008baa:	6020      	str	r0, [r4, #0]
 8008bac:	f8c0 9000 	str.w	r9, [r0]
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	e7e4      	b.n	8008b7e <__pow5mult+0x6a>
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bba:	bf00      	nop
 8008bbc:	08009910 	.word	0x08009910
 8008bc0:	080096d6 	.word	0x080096d6
 8008bc4:	080097c7 	.word	0x080097c7

08008bc8 <__lshift>:
 8008bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bcc:	460c      	mov	r4, r1
 8008bce:	6849      	ldr	r1, [r1, #4]
 8008bd0:	6923      	ldr	r3, [r4, #16]
 8008bd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	4607      	mov	r7, r0
 8008bda:	4691      	mov	r9, r2
 8008bdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008be0:	f108 0601 	add.w	r6, r8, #1
 8008be4:	42b3      	cmp	r3, r6
 8008be6:	db0b      	blt.n	8008c00 <__lshift+0x38>
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff fd93 	bl	8008714 <_Balloc>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	b948      	cbnz	r0, 8008c06 <__lshift+0x3e>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b28      	ldr	r3, [pc, #160]	; (8008c98 <__lshift+0xd0>)
 8008bf6:	4829      	ldr	r0, [pc, #164]	; (8008c9c <__lshift+0xd4>)
 8008bf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008bfc:	f000 fbac 	bl	8009358 <__assert_func>
 8008c00:	3101      	adds	r1, #1
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	e7ee      	b.n	8008be4 <__lshift+0x1c>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f100 0114 	add.w	r1, r0, #20
 8008c0c:	f100 0210 	add.w	r2, r0, #16
 8008c10:	4618      	mov	r0, r3
 8008c12:	4553      	cmp	r3, sl
 8008c14:	db33      	blt.n	8008c7e <__lshift+0xb6>
 8008c16:	6920      	ldr	r0, [r4, #16]
 8008c18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c1c:	f104 0314 	add.w	r3, r4, #20
 8008c20:	f019 091f 	ands.w	r9, r9, #31
 8008c24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c2c:	d02b      	beq.n	8008c86 <__lshift+0xbe>
 8008c2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008c32:	468a      	mov	sl, r1
 8008c34:	2200      	movs	r2, #0
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	fa00 f009 	lsl.w	r0, r0, r9
 8008c3c:	4310      	orrs	r0, r2
 8008c3e:	f84a 0b04 	str.w	r0, [sl], #4
 8008c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c46:	459c      	cmp	ip, r3
 8008c48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c4c:	d8f3      	bhi.n	8008c36 <__lshift+0x6e>
 8008c4e:	ebac 0304 	sub.w	r3, ip, r4
 8008c52:	3b15      	subs	r3, #21
 8008c54:	f023 0303 	bic.w	r3, r3, #3
 8008c58:	3304      	adds	r3, #4
 8008c5a:	f104 0015 	add.w	r0, r4, #21
 8008c5e:	4584      	cmp	ip, r0
 8008c60:	bf38      	it	cc
 8008c62:	2304      	movcc	r3, #4
 8008c64:	50ca      	str	r2, [r1, r3]
 8008c66:	b10a      	cbz	r2, 8008c6c <__lshift+0xa4>
 8008c68:	f108 0602 	add.w	r6, r8, #2
 8008c6c:	3e01      	subs	r6, #1
 8008c6e:	4638      	mov	r0, r7
 8008c70:	612e      	str	r6, [r5, #16]
 8008c72:	4621      	mov	r1, r4
 8008c74:	f7ff fd8e 	bl	8008794 <_Bfree>
 8008c78:	4628      	mov	r0, r5
 8008c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c82:	3301      	adds	r3, #1
 8008c84:	e7c5      	b.n	8008c12 <__lshift+0x4a>
 8008c86:	3904      	subs	r1, #4
 8008c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c90:	459c      	cmp	ip, r3
 8008c92:	d8f9      	bhi.n	8008c88 <__lshift+0xc0>
 8008c94:	e7ea      	b.n	8008c6c <__lshift+0xa4>
 8008c96:	bf00      	nop
 8008c98:	08009745 	.word	0x08009745
 8008c9c:	080097c7 	.word	0x080097c7

08008ca0 <__mcmp>:
 8008ca0:	b530      	push	{r4, r5, lr}
 8008ca2:	6902      	ldr	r2, [r0, #16]
 8008ca4:	690c      	ldr	r4, [r1, #16]
 8008ca6:	1b12      	subs	r2, r2, r4
 8008ca8:	d10e      	bne.n	8008cc8 <__mcmp+0x28>
 8008caa:	f100 0314 	add.w	r3, r0, #20
 8008cae:	3114      	adds	r1, #20
 8008cb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cc0:	42a5      	cmp	r5, r4
 8008cc2:	d003      	beq.n	8008ccc <__mcmp+0x2c>
 8008cc4:	d305      	bcc.n	8008cd2 <__mcmp+0x32>
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	4610      	mov	r0, r2
 8008cca:	bd30      	pop	{r4, r5, pc}
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d3f3      	bcc.n	8008cb8 <__mcmp+0x18>
 8008cd0:	e7fa      	b.n	8008cc8 <__mcmp+0x28>
 8008cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cd6:	e7f7      	b.n	8008cc8 <__mcmp+0x28>

08008cd8 <__mdiff>:
 8008cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4606      	mov	r6, r0
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4690      	mov	r8, r2
 8008ce6:	f7ff ffdb 	bl	8008ca0 <__mcmp>
 8008cea:	1e05      	subs	r5, r0, #0
 8008cec:	d110      	bne.n	8008d10 <__mdiff+0x38>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	f7ff fd0f 	bl	8008714 <_Balloc>
 8008cf6:	b930      	cbnz	r0, 8008d06 <__mdiff+0x2e>
 8008cf8:	4b3a      	ldr	r3, [pc, #232]	; (8008de4 <__mdiff+0x10c>)
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	f240 2137 	movw	r1, #567	; 0x237
 8008d00:	4839      	ldr	r0, [pc, #228]	; (8008de8 <__mdiff+0x110>)
 8008d02:	f000 fb29 	bl	8009358 <__assert_func>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	bfa4      	itt	ge
 8008d12:	4643      	movge	r3, r8
 8008d14:	46a0      	movge	r8, r4
 8008d16:	4630      	mov	r0, r6
 8008d18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d1c:	bfa6      	itte	ge
 8008d1e:	461c      	movge	r4, r3
 8008d20:	2500      	movge	r5, #0
 8008d22:	2501      	movlt	r5, #1
 8008d24:	f7ff fcf6 	bl	8008714 <_Balloc>
 8008d28:	b920      	cbnz	r0, 8008d34 <__mdiff+0x5c>
 8008d2a:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <__mdiff+0x10c>)
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f240 2145 	movw	r1, #581	; 0x245
 8008d32:	e7e5      	b.n	8008d00 <__mdiff+0x28>
 8008d34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d38:	6926      	ldr	r6, [r4, #16]
 8008d3a:	60c5      	str	r5, [r0, #12]
 8008d3c:	f104 0914 	add.w	r9, r4, #20
 8008d40:	f108 0514 	add.w	r5, r8, #20
 8008d44:	f100 0e14 	add.w	lr, r0, #20
 8008d48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d50:	f108 0210 	add.w	r2, r8, #16
 8008d54:	46f2      	mov	sl, lr
 8008d56:	2100      	movs	r1, #0
 8008d58:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d60:	fa11 f88b 	uxtah	r8, r1, fp
 8008d64:	b299      	uxth	r1, r3
 8008d66:	0c1b      	lsrs	r3, r3, #16
 8008d68:	eba8 0801 	sub.w	r8, r8, r1
 8008d6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d74:	fa1f f888 	uxth.w	r8, r8
 8008d78:	1419      	asrs	r1, r3, #16
 8008d7a:	454e      	cmp	r6, r9
 8008d7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d80:	f84a 3b04 	str.w	r3, [sl], #4
 8008d84:	d8e8      	bhi.n	8008d58 <__mdiff+0x80>
 8008d86:	1b33      	subs	r3, r6, r4
 8008d88:	3b15      	subs	r3, #21
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	3304      	adds	r3, #4
 8008d90:	3415      	adds	r4, #21
 8008d92:	42a6      	cmp	r6, r4
 8008d94:	bf38      	it	cc
 8008d96:	2304      	movcc	r3, #4
 8008d98:	441d      	add	r5, r3
 8008d9a:	4473      	add	r3, lr
 8008d9c:	469e      	mov	lr, r3
 8008d9e:	462e      	mov	r6, r5
 8008da0:	4566      	cmp	r6, ip
 8008da2:	d30e      	bcc.n	8008dc2 <__mdiff+0xea>
 8008da4:	f10c 0203 	add.w	r2, ip, #3
 8008da8:	1b52      	subs	r2, r2, r5
 8008daa:	f022 0203 	bic.w	r2, r2, #3
 8008dae:	3d03      	subs	r5, #3
 8008db0:	45ac      	cmp	ip, r5
 8008db2:	bf38      	it	cc
 8008db4:	2200      	movcc	r2, #0
 8008db6:	4413      	add	r3, r2
 8008db8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008dbc:	b17a      	cbz	r2, 8008dde <__mdiff+0x106>
 8008dbe:	6107      	str	r7, [r0, #16]
 8008dc0:	e7a4      	b.n	8008d0c <__mdiff+0x34>
 8008dc2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dc6:	fa11 f288 	uxtah	r2, r1, r8
 8008dca:	1414      	asrs	r4, r2, #16
 8008dcc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dd0:	b292      	uxth	r2, r2
 8008dd2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dd6:	f84e 2b04 	str.w	r2, [lr], #4
 8008dda:	1421      	asrs	r1, r4, #16
 8008ddc:	e7e0      	b.n	8008da0 <__mdiff+0xc8>
 8008dde:	3f01      	subs	r7, #1
 8008de0:	e7ea      	b.n	8008db8 <__mdiff+0xe0>
 8008de2:	bf00      	nop
 8008de4:	08009745 	.word	0x08009745
 8008de8:	080097c7 	.word	0x080097c7

08008dec <__ulp>:
 8008dec:	b082      	sub	sp, #8
 8008dee:	ed8d 0b00 	vstr	d0, [sp]
 8008df2:	9a01      	ldr	r2, [sp, #4]
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <__ulp+0x48>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dc08      	bgt.n	8008e12 <__ulp+0x26>
 8008e00:	425b      	negs	r3, r3
 8008e02:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008e06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e0a:	da04      	bge.n	8008e16 <__ulp+0x2a>
 8008e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e10:	4113      	asrs	r3, r2
 8008e12:	2200      	movs	r2, #0
 8008e14:	e008      	b.n	8008e28 <__ulp+0x3c>
 8008e16:	f1a2 0314 	sub.w	r3, r2, #20
 8008e1a:	2b1e      	cmp	r3, #30
 8008e1c:	bfda      	itte	le
 8008e1e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008e22:	40da      	lsrle	r2, r3
 8008e24:	2201      	movgt	r2, #1
 8008e26:	2300      	movs	r3, #0
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	ec41 0b10 	vmov	d0, r0, r1
 8008e30:	b002      	add	sp, #8
 8008e32:	4770      	bx	lr
 8008e34:	7ff00000 	.word	0x7ff00000

08008e38 <__b2d>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	6906      	ldr	r6, [r0, #16]
 8008e3e:	f100 0814 	add.w	r8, r0, #20
 8008e42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008e46:	1f37      	subs	r7, r6, #4
 8008e48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	f7ff fd53 	bl	80088f8 <__hi0bits>
 8008e52:	f1c0 0320 	rsb	r3, r0, #32
 8008e56:	280a      	cmp	r0, #10
 8008e58:	600b      	str	r3, [r1, #0]
 8008e5a:	491b      	ldr	r1, [pc, #108]	; (8008ec8 <__b2d+0x90>)
 8008e5c:	dc15      	bgt.n	8008e8a <__b2d+0x52>
 8008e5e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e62:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e66:	45b8      	cmp	r8, r7
 8008e68:	ea43 0501 	orr.w	r5, r3, r1
 8008e6c:	bf34      	ite	cc
 8008e6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e72:	2300      	movcs	r3, #0
 8008e74:	3015      	adds	r0, #21
 8008e76:	fa02 f000 	lsl.w	r0, r2, r0
 8008e7a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e7e:	4303      	orrs	r3, r0
 8008e80:	461c      	mov	r4, r3
 8008e82:	ec45 4b10 	vmov	d0, r4, r5
 8008e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e8a:	45b8      	cmp	r8, r7
 8008e8c:	bf3a      	itte	cc
 8008e8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e92:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e96:	2300      	movcs	r3, #0
 8008e98:	380b      	subs	r0, #11
 8008e9a:	d012      	beq.n	8008ec2 <__b2d+0x8a>
 8008e9c:	f1c0 0120 	rsb	r1, r0, #32
 8008ea0:	fa23 f401 	lsr.w	r4, r3, r1
 8008ea4:	4082      	lsls	r2, r0
 8008ea6:	4322      	orrs	r2, r4
 8008ea8:	4547      	cmp	r7, r8
 8008eaa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008eae:	bf8c      	ite	hi
 8008eb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008eb4:	2200      	movls	r2, #0
 8008eb6:	4083      	lsls	r3, r0
 8008eb8:	40ca      	lsrs	r2, r1
 8008eba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	e7de      	b.n	8008e80 <__b2d+0x48>
 8008ec2:	ea42 0501 	orr.w	r5, r2, r1
 8008ec6:	e7db      	b.n	8008e80 <__b2d+0x48>
 8008ec8:	3ff00000 	.word	0x3ff00000

08008ecc <__d2b>:
 8008ecc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ed0:	460f      	mov	r7, r1
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	ec59 8b10 	vmov	r8, r9, d0
 8008ed8:	4616      	mov	r6, r2
 8008eda:	f7ff fc1b 	bl	8008714 <_Balloc>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	b930      	cbnz	r0, 8008ef0 <__d2b+0x24>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <__d2b+0xac>)
 8008ee6:	4825      	ldr	r0, [pc, #148]	; (8008f7c <__d2b+0xb0>)
 8008ee8:	f240 310f 	movw	r1, #783	; 0x30f
 8008eec:	f000 fa34 	bl	8009358 <__assert_func>
 8008ef0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ef8:	bb2d      	cbnz	r5, 8008f46 <__d2b+0x7a>
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	f1b8 0300 	subs.w	r3, r8, #0
 8008f00:	d026      	beq.n	8008f50 <__d2b+0x84>
 8008f02:	4668      	mov	r0, sp
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	f7ff fd17 	bl	8008938 <__lo0bits>
 8008f0a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f0e:	b1e8      	cbz	r0, 8008f4c <__d2b+0x80>
 8008f10:	f1c0 0320 	rsb	r3, r0, #32
 8008f14:	fa02 f303 	lsl.w	r3, r2, r3
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	40c2      	lsrs	r2, r0
 8008f1c:	6163      	str	r3, [r4, #20]
 8008f1e:	9201      	str	r2, [sp, #4]
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	61a3      	str	r3, [r4, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf14      	ite	ne
 8008f28:	2202      	movne	r2, #2
 8008f2a:	2201      	moveq	r2, #1
 8008f2c:	6122      	str	r2, [r4, #16]
 8008f2e:	b1bd      	cbz	r5, 8008f60 <__d2b+0x94>
 8008f30:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f34:	4405      	add	r5, r0
 8008f36:	603d      	str	r5, [r7, #0]
 8008f38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f3c:	6030      	str	r0, [r6, #0]
 8008f3e:	4620      	mov	r0, r4
 8008f40:	b003      	add	sp, #12
 8008f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f4a:	e7d6      	b.n	8008efa <__d2b+0x2e>
 8008f4c:	6161      	str	r1, [r4, #20]
 8008f4e:	e7e7      	b.n	8008f20 <__d2b+0x54>
 8008f50:	a801      	add	r0, sp, #4
 8008f52:	f7ff fcf1 	bl	8008938 <__lo0bits>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	6163      	str	r3, [r4, #20]
 8008f5a:	3020      	adds	r0, #32
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	e7e5      	b.n	8008f2c <__d2b+0x60>
 8008f60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f68:	6038      	str	r0, [r7, #0]
 8008f6a:	6918      	ldr	r0, [r3, #16]
 8008f6c:	f7ff fcc4 	bl	80088f8 <__hi0bits>
 8008f70:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f74:	e7e2      	b.n	8008f3c <__d2b+0x70>
 8008f76:	bf00      	nop
 8008f78:	08009745 	.word	0x08009745
 8008f7c:	080097c7 	.word	0x080097c7

08008f80 <__ratio>:
 8008f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	4688      	mov	r8, r1
 8008f86:	4669      	mov	r1, sp
 8008f88:	4681      	mov	r9, r0
 8008f8a:	f7ff ff55 	bl	8008e38 <__b2d>
 8008f8e:	a901      	add	r1, sp, #4
 8008f90:	4640      	mov	r0, r8
 8008f92:	ec55 4b10 	vmov	r4, r5, d0
 8008f96:	f7ff ff4f 	bl	8008e38 <__b2d>
 8008f9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008fa2:	eba3 0c02 	sub.w	ip, r3, r2
 8008fa6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008faa:	1a9b      	subs	r3, r3, r2
 8008fac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008fb0:	ec51 0b10 	vmov	r0, r1, d0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfd6      	itet	le
 8008fb8:	460a      	movle	r2, r1
 8008fba:	462a      	movgt	r2, r5
 8008fbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	462f      	mov	r7, r5
 8008fc4:	bfd4      	ite	le
 8008fc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008fca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008fce:	4620      	mov	r0, r4
 8008fd0:	ee10 2a10 	vmov	r2, s0
 8008fd4:	465b      	mov	r3, fp
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fc60 	bl	800089c <__aeabi_ddiv>
 8008fdc:	ec41 0b10 	vmov	d0, r0, r1
 8008fe0:	b003      	add	sp, #12
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fe6 <__copybits>:
 8008fe6:	3901      	subs	r1, #1
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	1149      	asrs	r1, r1, #5
 8008fec:	6914      	ldr	r4, [r2, #16]
 8008fee:	3101      	adds	r1, #1
 8008ff0:	f102 0314 	add.w	r3, r2, #20
 8008ff4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ffc:	1f05      	subs	r5, r0, #4
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	d30c      	bcc.n	800901c <__copybits+0x36>
 8009002:	1aa3      	subs	r3, r4, r2
 8009004:	3b11      	subs	r3, #17
 8009006:	f023 0303 	bic.w	r3, r3, #3
 800900a:	3211      	adds	r2, #17
 800900c:	42a2      	cmp	r2, r4
 800900e:	bf88      	it	hi
 8009010:	2300      	movhi	r3, #0
 8009012:	4418      	add	r0, r3
 8009014:	2300      	movs	r3, #0
 8009016:	4288      	cmp	r0, r1
 8009018:	d305      	bcc.n	8009026 <__copybits+0x40>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009020:	f845 6f04 	str.w	r6, [r5, #4]!
 8009024:	e7eb      	b.n	8008ffe <__copybits+0x18>
 8009026:	f840 3b04 	str.w	r3, [r0], #4
 800902a:	e7f4      	b.n	8009016 <__copybits+0x30>

0800902c <__any_on>:
 800902c:	f100 0214 	add.w	r2, r0, #20
 8009030:	6900      	ldr	r0, [r0, #16]
 8009032:	114b      	asrs	r3, r1, #5
 8009034:	4298      	cmp	r0, r3
 8009036:	b510      	push	{r4, lr}
 8009038:	db11      	blt.n	800905e <__any_on+0x32>
 800903a:	dd0a      	ble.n	8009052 <__any_on+0x26>
 800903c:	f011 011f 	ands.w	r1, r1, #31
 8009040:	d007      	beq.n	8009052 <__any_on+0x26>
 8009042:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009046:	fa24 f001 	lsr.w	r0, r4, r1
 800904a:	fa00 f101 	lsl.w	r1, r0, r1
 800904e:	428c      	cmp	r4, r1
 8009050:	d10b      	bne.n	800906a <__any_on+0x3e>
 8009052:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009056:	4293      	cmp	r3, r2
 8009058:	d803      	bhi.n	8009062 <__any_on+0x36>
 800905a:	2000      	movs	r0, #0
 800905c:	bd10      	pop	{r4, pc}
 800905e:	4603      	mov	r3, r0
 8009060:	e7f7      	b.n	8009052 <__any_on+0x26>
 8009062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009066:	2900      	cmp	r1, #0
 8009068:	d0f5      	beq.n	8009056 <__any_on+0x2a>
 800906a:	2001      	movs	r0, #1
 800906c:	e7f6      	b.n	800905c <__any_on+0x30>

0800906e <__sread>:
 800906e:	b510      	push	{r4, lr}
 8009070:	460c      	mov	r4, r1
 8009072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009076:	f000 f94b 	bl	8009310 <_read_r>
 800907a:	2800      	cmp	r0, #0
 800907c:	bfab      	itete	ge
 800907e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009080:	89a3      	ldrhlt	r3, [r4, #12]
 8009082:	181b      	addge	r3, r3, r0
 8009084:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009088:	bfac      	ite	ge
 800908a:	6563      	strge	r3, [r4, #84]	; 0x54
 800908c:	81a3      	strhlt	r3, [r4, #12]
 800908e:	bd10      	pop	{r4, pc}

08009090 <__swrite>:
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	461f      	mov	r7, r3
 8009096:	898b      	ldrh	r3, [r1, #12]
 8009098:	05db      	lsls	r3, r3, #23
 800909a:	4605      	mov	r5, r0
 800909c:	460c      	mov	r4, r1
 800909e:	4616      	mov	r6, r2
 80090a0:	d505      	bpl.n	80090ae <__swrite+0x1e>
 80090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a6:	2302      	movs	r3, #2
 80090a8:	2200      	movs	r2, #0
 80090aa:	f000 f91f 	bl	80092ec <_lseek_r>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	4632      	mov	r2, r6
 80090bc:	463b      	mov	r3, r7
 80090be:	4628      	mov	r0, r5
 80090c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c4:	f000 b936 	b.w	8009334 <_write_r>

080090c8 <__sseek>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	460c      	mov	r4, r1
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	f000 f90c 	bl	80092ec <_lseek_r>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	bf15      	itete	ne
 80090da:	6560      	strne	r0, [r4, #84]	; 0x54
 80090dc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090e0:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090e4:	81a3      	strheq	r3, [r4, #12]
 80090e6:	bf18      	it	ne
 80090e8:	81a3      	strhne	r3, [r4, #12]
 80090ea:	bd10      	pop	{r4, pc}

080090ec <__sclose>:
 80090ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f0:	f000 b8ec 	b.w	80092cc <_close_r>

080090f4 <_realloc_r>:
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	4680      	mov	r8, r0
 80090fa:	4614      	mov	r4, r2
 80090fc:	460e      	mov	r6, r1
 80090fe:	b921      	cbnz	r1, 800910a <_realloc_r+0x16>
 8009100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009104:	4611      	mov	r1, r2
 8009106:	f7fc b821 	b.w	800514c <_malloc_r>
 800910a:	b92a      	cbnz	r2, 8009118 <_realloc_r+0x24>
 800910c:	f7fe fc02 	bl	8007914 <_free_r>
 8009110:	4625      	mov	r5, r4
 8009112:	4628      	mov	r0, r5
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	f000 f952 	bl	80093c0 <_malloc_usable_size_r>
 800911c:	4284      	cmp	r4, r0
 800911e:	4607      	mov	r7, r0
 8009120:	d802      	bhi.n	8009128 <_realloc_r+0x34>
 8009122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009126:	d812      	bhi.n	800914e <_realloc_r+0x5a>
 8009128:	4621      	mov	r1, r4
 800912a:	4640      	mov	r0, r8
 800912c:	f7fc f80e 	bl	800514c <_malloc_r>
 8009130:	4605      	mov	r5, r0
 8009132:	2800      	cmp	r0, #0
 8009134:	d0ed      	beq.n	8009112 <_realloc_r+0x1e>
 8009136:	42bc      	cmp	r4, r7
 8009138:	4622      	mov	r2, r4
 800913a:	4631      	mov	r1, r6
 800913c:	bf28      	it	cs
 800913e:	463a      	movcs	r2, r7
 8009140:	f7fd fd4f 	bl	8006be2 <memcpy>
 8009144:	4631      	mov	r1, r6
 8009146:	4640      	mov	r0, r8
 8009148:	f7fe fbe4 	bl	8007914 <_free_r>
 800914c:	e7e1      	b.n	8009112 <_realloc_r+0x1e>
 800914e:	4635      	mov	r5, r6
 8009150:	e7df      	b.n	8009112 <_realloc_r+0x1e>

08009152 <__swbuf_r>:
 8009152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009154:	460e      	mov	r6, r1
 8009156:	4614      	mov	r4, r2
 8009158:	4605      	mov	r5, r0
 800915a:	b118      	cbz	r0, 8009164 <__swbuf_r+0x12>
 800915c:	6a03      	ldr	r3, [r0, #32]
 800915e:	b90b      	cbnz	r3, 8009164 <__swbuf_r+0x12>
 8009160:	f7fc fd82 	bl	8005c68 <__sinit>
 8009164:	69a3      	ldr	r3, [r4, #24]
 8009166:	60a3      	str	r3, [r4, #8]
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	071a      	lsls	r2, r3, #28
 800916c:	d525      	bpl.n	80091ba <__swbuf_r+0x68>
 800916e:	6923      	ldr	r3, [r4, #16]
 8009170:	b31b      	cbz	r3, 80091ba <__swbuf_r+0x68>
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	6922      	ldr	r2, [r4, #16]
 8009176:	1a98      	subs	r0, r3, r2
 8009178:	6963      	ldr	r3, [r4, #20]
 800917a:	b2f6      	uxtb	r6, r6
 800917c:	4283      	cmp	r3, r0
 800917e:	4637      	mov	r7, r6
 8009180:	dc04      	bgt.n	800918c <__swbuf_r+0x3a>
 8009182:	4621      	mov	r1, r4
 8009184:	4628      	mov	r0, r5
 8009186:	f7ff fa9d 	bl	80086c4 <_fflush_r>
 800918a:	b9e0      	cbnz	r0, 80091c6 <__swbuf_r+0x74>
 800918c:	68a3      	ldr	r3, [r4, #8]
 800918e:	3b01      	subs	r3, #1
 8009190:	60a3      	str	r3, [r4, #8]
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	6022      	str	r2, [r4, #0]
 8009198:	701e      	strb	r6, [r3, #0]
 800919a:	6962      	ldr	r2, [r4, #20]
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	429a      	cmp	r2, r3
 80091a0:	d004      	beq.n	80091ac <__swbuf_r+0x5a>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	07db      	lsls	r3, r3, #31
 80091a6:	d506      	bpl.n	80091b6 <__swbuf_r+0x64>
 80091a8:	2e0a      	cmp	r6, #10
 80091aa:	d104      	bne.n	80091b6 <__swbuf_r+0x64>
 80091ac:	4621      	mov	r1, r4
 80091ae:	4628      	mov	r0, r5
 80091b0:	f7ff fa88 	bl	80086c4 <_fflush_r>
 80091b4:	b938      	cbnz	r0, 80091c6 <__swbuf_r+0x74>
 80091b6:	4638      	mov	r0, r7
 80091b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091ba:	4621      	mov	r1, r4
 80091bc:	4628      	mov	r0, r5
 80091be:	f000 f805 	bl	80091cc <__swsetup_r>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d0d5      	beq.n	8009172 <__swbuf_r+0x20>
 80091c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80091ca:	e7f4      	b.n	80091b6 <__swbuf_r+0x64>

080091cc <__swsetup_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4b2a      	ldr	r3, [pc, #168]	; (8009278 <__swsetup_r+0xac>)
 80091d0:	4605      	mov	r5, r0
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	460c      	mov	r4, r1
 80091d6:	b118      	cbz	r0, 80091e0 <__swsetup_r+0x14>
 80091d8:	6a03      	ldr	r3, [r0, #32]
 80091da:	b90b      	cbnz	r3, 80091e0 <__swsetup_r+0x14>
 80091dc:	f7fc fd44 	bl	8005c68 <__sinit>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e6:	0718      	lsls	r0, r3, #28
 80091e8:	d422      	bmi.n	8009230 <__swsetup_r+0x64>
 80091ea:	06d9      	lsls	r1, r3, #27
 80091ec:	d407      	bmi.n	80091fe <__swsetup_r+0x32>
 80091ee:	2309      	movs	r3, #9
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091fc:	e034      	b.n	8009268 <__swsetup_r+0x9c>
 80091fe:	0758      	lsls	r0, r3, #29
 8009200:	d512      	bpl.n	8009228 <__swsetup_r+0x5c>
 8009202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009204:	b141      	cbz	r1, 8009218 <__swsetup_r+0x4c>
 8009206:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800920a:	4299      	cmp	r1, r3
 800920c:	d002      	beq.n	8009214 <__swsetup_r+0x48>
 800920e:	4628      	mov	r0, r5
 8009210:	f7fe fb80 	bl	8007914 <_free_r>
 8009214:	2300      	movs	r3, #0
 8009216:	6363      	str	r3, [r4, #52]	; 0x34
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800921e:	81a3      	strh	r3, [r4, #12]
 8009220:	2300      	movs	r3, #0
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f043 0308 	orr.w	r3, r3, #8
 800922e:	81a3      	strh	r3, [r4, #12]
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	b94b      	cbnz	r3, 8009248 <__swsetup_r+0x7c>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800923a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923e:	d003      	beq.n	8009248 <__swsetup_r+0x7c>
 8009240:	4621      	mov	r1, r4
 8009242:	4628      	mov	r0, r5
 8009244:	f7fd fc02 	bl	8006a4c <__smakebuf_r>
 8009248:	89a0      	ldrh	r0, [r4, #12]
 800924a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800924e:	f010 0301 	ands.w	r3, r0, #1
 8009252:	d00a      	beq.n	800926a <__swsetup_r+0x9e>
 8009254:	2300      	movs	r3, #0
 8009256:	60a3      	str	r3, [r4, #8]
 8009258:	6963      	ldr	r3, [r4, #20]
 800925a:	425b      	negs	r3, r3
 800925c:	61a3      	str	r3, [r4, #24]
 800925e:	6923      	ldr	r3, [r4, #16]
 8009260:	b943      	cbnz	r3, 8009274 <__swsetup_r+0xa8>
 8009262:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009266:	d1c4      	bne.n	80091f2 <__swsetup_r+0x26>
 8009268:	bd38      	pop	{r3, r4, r5, pc}
 800926a:	0781      	lsls	r1, r0, #30
 800926c:	bf58      	it	pl
 800926e:	6963      	ldrpl	r3, [r4, #20]
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	e7f4      	b.n	800925e <__swsetup_r+0x92>
 8009274:	2000      	movs	r0, #0
 8009276:	e7f7      	b.n	8009268 <__swsetup_r+0x9c>
 8009278:	20000204 	.word	0x20000204

0800927c <__ascii_wctomb>:
 800927c:	b149      	cbz	r1, 8009292 <__ascii_wctomb+0x16>
 800927e:	2aff      	cmp	r2, #255	; 0xff
 8009280:	bf85      	ittet	hi
 8009282:	238a      	movhi	r3, #138	; 0x8a
 8009284:	6003      	strhi	r3, [r0, #0]
 8009286:	700a      	strbls	r2, [r1, #0]
 8009288:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800928c:	bf98      	it	ls
 800928e:	2001      	movls	r0, #1
 8009290:	4770      	bx	lr
 8009292:	4608      	mov	r0, r1
 8009294:	4770      	bx	lr

08009296 <memmove>:
 8009296:	4288      	cmp	r0, r1
 8009298:	b510      	push	{r4, lr}
 800929a:	eb01 0402 	add.w	r4, r1, r2
 800929e:	d902      	bls.n	80092a6 <memmove+0x10>
 80092a0:	4284      	cmp	r4, r0
 80092a2:	4623      	mov	r3, r4
 80092a4:	d807      	bhi.n	80092b6 <memmove+0x20>
 80092a6:	1e43      	subs	r3, r0, #1
 80092a8:	42a1      	cmp	r1, r4
 80092aa:	d008      	beq.n	80092be <memmove+0x28>
 80092ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092b4:	e7f8      	b.n	80092a8 <memmove+0x12>
 80092b6:	4402      	add	r2, r0
 80092b8:	4601      	mov	r1, r0
 80092ba:	428a      	cmp	r2, r1
 80092bc:	d100      	bne.n	80092c0 <memmove+0x2a>
 80092be:	bd10      	pop	{r4, pc}
 80092c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092c8:	e7f7      	b.n	80092ba <memmove+0x24>
	...

080092cc <_close_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d06      	ldr	r5, [pc, #24]	; (80092e8 <_close_r+0x1c>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	602b      	str	r3, [r5, #0]
 80092d8:	f7f8 fbe1 	bl	8001a9e <_close>
 80092dc:	1c43      	adds	r3, r0, #1
 80092de:	d102      	bne.n	80092e6 <_close_r+0x1a>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	b103      	cbz	r3, 80092e6 <_close_r+0x1a>
 80092e4:	6023      	str	r3, [r4, #0]
 80092e6:	bd38      	pop	{r3, r4, r5, pc}
 80092e8:	200004d0 	.word	0x200004d0

080092ec <_lseek_r>:
 80092ec:	b538      	push	{r3, r4, r5, lr}
 80092ee:	4d07      	ldr	r5, [pc, #28]	; (800930c <_lseek_r+0x20>)
 80092f0:	4604      	mov	r4, r0
 80092f2:	4608      	mov	r0, r1
 80092f4:	4611      	mov	r1, r2
 80092f6:	2200      	movs	r2, #0
 80092f8:	602a      	str	r2, [r5, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f7f8 fbf6 	bl	8001aec <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_lseek_r+0x1e>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_lseek_r+0x1e>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	200004d0 	.word	0x200004d0

08009310 <_read_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d07      	ldr	r5, [pc, #28]	; (8009330 <_read_r+0x20>)
 8009314:	4604      	mov	r4, r0
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	2200      	movs	r2, #0
 800931c:	602a      	str	r2, [r5, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	f7f8 fba0 	bl	8001a64 <_read>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_read_r+0x1e>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_read_r+0x1e>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200004d0 	.word	0x200004d0

08009334 <_write_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d07      	ldr	r5, [pc, #28]	; (8009354 <_write_r+0x20>)
 8009338:	4604      	mov	r4, r0
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	2200      	movs	r2, #0
 8009340:	602a      	str	r2, [r5, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	f7f8 f82a 	bl	800139c <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_write_r+0x1e>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_write_r+0x1e>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	200004d0 	.word	0x200004d0

08009358 <__assert_func>:
 8009358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800935a:	4614      	mov	r4, r2
 800935c:	461a      	mov	r2, r3
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <__assert_func+0x2c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4605      	mov	r5, r0
 8009364:	68d8      	ldr	r0, [r3, #12]
 8009366:	b14c      	cbz	r4, 800937c <__assert_func+0x24>
 8009368:	4b07      	ldr	r3, [pc, #28]	; (8009388 <__assert_func+0x30>)
 800936a:	9100      	str	r1, [sp, #0]
 800936c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009370:	4906      	ldr	r1, [pc, #24]	; (800938c <__assert_func+0x34>)
 8009372:	462b      	mov	r3, r5
 8009374:	f000 f82c 	bl	80093d0 <fiprintf>
 8009378:	f000 f83c 	bl	80093f4 <abort>
 800937c:	4b04      	ldr	r3, [pc, #16]	; (8009390 <__assert_func+0x38>)
 800937e:	461c      	mov	r4, r3
 8009380:	e7f3      	b.n	800936a <__assert_func+0x12>
 8009382:	bf00      	nop
 8009384:	20000204 	.word	0x20000204
 8009388:	0800991c 	.word	0x0800991c
 800938c:	08009929 	.word	0x08009929
 8009390:	08009957 	.word	0x08009957

08009394 <_calloc_r>:
 8009394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009396:	fba1 2402 	umull	r2, r4, r1, r2
 800939a:	b94c      	cbnz	r4, 80093b0 <_calloc_r+0x1c>
 800939c:	4611      	mov	r1, r2
 800939e:	9201      	str	r2, [sp, #4]
 80093a0:	f7fb fed4 	bl	800514c <_malloc_r>
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	4605      	mov	r5, r0
 80093a8:	b930      	cbnz	r0, 80093b8 <_calloc_r+0x24>
 80093aa:	4628      	mov	r0, r5
 80093ac:	b003      	add	sp, #12
 80093ae:	bd30      	pop	{r4, r5, pc}
 80093b0:	220c      	movs	r2, #12
 80093b2:	6002      	str	r2, [r0, #0]
 80093b4:	2500      	movs	r5, #0
 80093b6:	e7f8      	b.n	80093aa <_calloc_r+0x16>
 80093b8:	4621      	mov	r1, r4
 80093ba:	f7fd fba7 	bl	8006b0c <memset>
 80093be:	e7f4      	b.n	80093aa <_calloc_r+0x16>

080093c0 <_malloc_usable_size_r>:
 80093c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c4:	1f18      	subs	r0, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bfbc      	itt	lt
 80093ca:	580b      	ldrlt	r3, [r1, r0]
 80093cc:	18c0      	addlt	r0, r0, r3
 80093ce:	4770      	bx	lr

080093d0 <fiprintf>:
 80093d0:	b40e      	push	{r1, r2, r3}
 80093d2:	b503      	push	{r0, r1, lr}
 80093d4:	4601      	mov	r1, r0
 80093d6:	ab03      	add	r3, sp, #12
 80093d8:	4805      	ldr	r0, [pc, #20]	; (80093f0 <fiprintf+0x20>)
 80093da:	f853 2b04 	ldr.w	r2, [r3], #4
 80093de:	6800      	ldr	r0, [r0, #0]
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	f7fe ffbd 	bl	8008360 <_vfiprintf_r>
 80093e6:	b002      	add	sp, #8
 80093e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ec:	b003      	add	sp, #12
 80093ee:	4770      	bx	lr
 80093f0:	20000204 	.word	0x20000204

080093f4 <abort>:
 80093f4:	b508      	push	{r3, lr}
 80093f6:	2006      	movs	r0, #6
 80093f8:	f000 f82c 	bl	8009454 <raise>
 80093fc:	2001      	movs	r0, #1
 80093fe:	f7f8 fb27 	bl	8001a50 <_exit>

08009402 <_raise_r>:
 8009402:	291f      	cmp	r1, #31
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	d904      	bls.n	8009416 <_raise_r+0x14>
 800940c:	2316      	movs	r3, #22
 800940e:	6003      	str	r3, [r0, #0]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009414:	bd38      	pop	{r3, r4, r5, pc}
 8009416:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009418:	b112      	cbz	r2, 8009420 <_raise_r+0x1e>
 800941a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800941e:	b94b      	cbnz	r3, 8009434 <_raise_r+0x32>
 8009420:	4620      	mov	r0, r4
 8009422:	f000 f831 	bl	8009488 <_getpid_r>
 8009426:	462a      	mov	r2, r5
 8009428:	4601      	mov	r1, r0
 800942a:	4620      	mov	r0, r4
 800942c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009430:	f000 b818 	b.w	8009464 <_kill_r>
 8009434:	2b01      	cmp	r3, #1
 8009436:	d00a      	beq.n	800944e <_raise_r+0x4c>
 8009438:	1c59      	adds	r1, r3, #1
 800943a:	d103      	bne.n	8009444 <_raise_r+0x42>
 800943c:	2316      	movs	r3, #22
 800943e:	6003      	str	r3, [r0, #0]
 8009440:	2001      	movs	r0, #1
 8009442:	e7e7      	b.n	8009414 <_raise_r+0x12>
 8009444:	2400      	movs	r4, #0
 8009446:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800944a:	4628      	mov	r0, r5
 800944c:	4798      	blx	r3
 800944e:	2000      	movs	r0, #0
 8009450:	e7e0      	b.n	8009414 <_raise_r+0x12>
	...

08009454 <raise>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <raise+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f7ff bfd2 	b.w	8009402 <_raise_r>
 800945e:	bf00      	nop
 8009460:	20000204 	.word	0x20000204

08009464 <_kill_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_kill_r+0x20>)
 8009468:	2300      	movs	r3, #0
 800946a:	4604      	mov	r4, r0
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	602b      	str	r3, [r5, #0]
 8009472:	f7f8 fadd 	bl	8001a30 <_kill>
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	d102      	bne.n	8009480 <_kill_r+0x1c>
 800947a:	682b      	ldr	r3, [r5, #0]
 800947c:	b103      	cbz	r3, 8009480 <_kill_r+0x1c>
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	bd38      	pop	{r3, r4, r5, pc}
 8009482:	bf00      	nop
 8009484:	200004d0 	.word	0x200004d0

08009488 <_getpid_r>:
 8009488:	f7f8 baca 	b.w	8001a20 <_getpid>

0800948c <_init>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	bf00      	nop
 8009490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009492:	bc08      	pop	{r3}
 8009494:	469e      	mov	lr, r3
 8009496:	4770      	bx	lr

08009498 <_fini>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr
